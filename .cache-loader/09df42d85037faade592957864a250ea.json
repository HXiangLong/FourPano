{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawLine.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawLine.js","mtime":1537409782294},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538971317145},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWDrawString = require('./SWDrawString');\n\nvar _SWDrawString2 = _interopRequireDefault(_SWDrawString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 绘制线\r\n */\nvar SWDrawLine = function () {\n        function SWDrawLine() {\n                _classCallCheck(this, SWDrawLine);\n\n                /**起点坐标 */\n                this.startPoint = new THREE.Vector3(0, 0, 0);\n                /**终点坐标*/\n                this.endPoint = new THREE.Vector3(0, 0, 0);\n                /**划分段数 */\n                this.lineAllNum = 10;\n                /**画线整体时间 */\n                this.lineOverTime = 300 / this.lineAllNum;\n                /**计时 */\n                this.lineTimeNum = 0;\n                /**计数 */\n                this.lineNum = 0;\n                /**线宽度 */\n                this.lineWidth = 2;\n                /**线颜色 */\n                this.lineColors = 0xff0000;\n                /**线的线段点 */\n                this.linePointArr = [];\n                /**所有线段集合 */\n                this.lineAllArr = [];\n                /**画线中，请勿打扰 */\n                this.lineTimeBoo = false;\n                /**文本显示 */\n                this.swDrawString = new _SWDrawString2.default();\n                /**文字标记大小 */\n                this.fontSize = 1;\n        }\n\n        /**\r\n         * 新增点击点\r\n         * @param {Vector3} points 点击点坐标\r\n         * @param {Boolean} textBoo 是否显示距离\r\n         */\n\n\n        _createClass(SWDrawLine, [{\n                key: 'addPoint',\n                value: function addPoint(points) {\n                        var _this = this;\n\n                        var textBoo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\n                        this.endPoint.copy(points);\n\n                        var dis = this.startPoint.distanceTo(this.endPoint);\n\n                        if (dis > 0 && this.startPoint.distanceTo(new THREE.Vector3(0, 0, 0)) > 0) {\n\n                                var v1 = this.endPoint.clone().sub(this.startPoint.clone());\n\n                                for (var i = 1; i <= this.lineAllNum; i++) {\n\n                                        var v2 = v1.clone().divideScalar(this.lineAllNum / i);\n\n                                        var segment = this.endPoint.clone().sub(v2);\n\n                                        this.linePointArr.push(segment);\n                                }\n\n                                this.linePointArr.reverse();\n\n                                this.lineTimeBoo = true;\n\n                                if (textBoo) {\n\n                                        var dis1 = Math.ceil(this.endPoint.distanceTo(this.startPoint) * 10) / 100 + \"m\";\n\n                                        this.fontSize = _SWConstants.sw_measure.swDrawPoint.dotRadius * 3;\n\n                                        this.swDrawString.drawString(new THREE.Vector3(this.endPoint.x + _SWConstants.sw_measure.swDrawPoint.dotRadius, this.endPoint.y + _SWConstants.sw_measure.swDrawPoint.dotRadius, this.endPoint.z + _SWConstants.sw_measure.swDrawPoint.dotRadius), dis1, this.fontSize);\n                                }\n                        }\n\n                        this.startPoint.copy(this.endPoint);\n\n                        if (this.linePointArr.length > 0) {\n                                //开始自我计时\n                                this.lineTimeNum = setInterval(function () {\n\n                                        if (_this.lineNum == _this.lineAllNum) {\n\n                                                _this.lineNum = 0;\n\n                                                clearInterval(_this.lineTimeNum);\n\n                                                _this.lineTimeBoo = false;\n\n                                                _this.linePointArr.length = 0;\n\n                                                return;\n                                        }\n\n                                        _this.drawLine(_this.linePointArr[_this.lineNum], _this.lineNum + 1 >= _this.lineAllNum ? _this.endPoint : _this.linePointArr[_this.lineNum + 1]);\n\n                                        _this.lineNum++;\n                                }, this.lineOverTime);\n                        }\n                }\n\n                /**\r\n                 * 绘制线段\r\n                 * @param {Vector3} p1 第一个点坐标\r\n                 * @param {Vector3} p2 第二个点坐标\r\n                 */\n\n        }, {\n                key: 'drawLine',\n                value: function drawLine(p1, p2) {\n\n                        var geometry = new THREE.Geometry();\n\n                        var material = new THREE.LineBasicMaterial({ color: this.lineColors, linewidth: this.lineWidth });\n\n                        geometry.vertices.push(p1);\n\n                        geometry.vertices.push(p2);\n\n                        var line = new THREE.Line(geometry, material);\n\n                        line.position.set(0, 0, 0);\n\n                        _SWConstants.scene.add(line);\n\n                        this.lineAllArr.push(line);\n                }\n\n                /**\r\n                 * 清除点\r\n                 * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n                 */\n\n        }, {\n                key: 'clear',\n                value: function clear() {\n                        var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\n                        var dArr = num == 0 ? this.lineAllArr.splice(0, this.lineAllArr.length) : num < 0 ? this.lineAllArr.splice(num * this.lineAllNum, Math.abs(num * this.lineAllNum)) : this.lineAllArr.splice(0, num * this.lineAllNum);\n\n                        dArr.forEach(function (item) {\n\n                                (0, _SWTool.disposeNode)(item);\n                        });\n\n                        this.startPoint = new THREE.Vector3(0, 0, 0);\n\n                        this.endPoint = new THREE.Vector3(0, 0, 0);\n\n                        this.lineNum = 0;\n\n                        if (this.swDrawString) {\n\n                                this.swDrawString.clear(num);\n                        }\n                }\n        }]);\n\n        return SWDrawLine;\n}();\n\nexports.default = SWDrawLine;",{"version":3,"sources":["app\\src\\module\\draw\\SWDrawLine.js"],"names":["SWDrawLine","startPoint","THREE","Vector3","endPoint","lineAllNum","lineOverTime","lineTimeNum","lineNum","lineWidth","lineColors","linePointArr","lineAllArr","lineTimeBoo","swDrawString","SWDrawString","fontSize","points","textBoo","copy","dis","distanceTo","v1","clone","sub","i","v2","divideScalar","segment","push","reverse","dis1","Math","ceil","sw_measure","swDrawPoint","dotRadius","drawString","x","y","z","length","setInterval","clearInterval","drawLine","p1","p2","geometry","Geometry","material","LineBasicMaterial","color","linewidth","vertices","line","Line","position","set","scene","add","num","dArr","splice","abs","forEach","item","clear"],"mappings":"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","file":"SWDrawLine.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\nimport { scene, sw_measure } from '../../tool/SWConstants';\r\nimport { disposeNode } from '../../tool/SWTool';\r\nimport SWDrawString from './SWDrawString';\r\n\r\n/**\r\n * 绘制线\r\n */\r\nclass SWDrawLine {\r\n    constructor() {\r\n        /**起点坐标 */\r\n        this.startPoint = new THREE.Vector3(0, 0, 0);\r\n        /**终点坐标*/\r\n        this.endPoint = new THREE.Vector3(0, 0, 0);\r\n        /**划分段数 */\r\n        this.lineAllNum = 10;\r\n        /**画线整体时间 */\r\n        this.lineOverTime = 300 / this.lineAllNum;\r\n        /**计时 */\r\n        this.lineTimeNum = 0;\r\n        /**计数 */\r\n        this.lineNum = 0;\r\n        /**线宽度 */\r\n        this.lineWidth = 2;\r\n        /**线颜色 */\r\n        this.lineColors = 0xff0000;\r\n        /**线的线段点 */\r\n        this.linePointArr = [];\r\n        /**所有线段集合 */\r\n        this.lineAllArr = [];\r\n        /**画线中，请勿打扰 */\r\n        this.lineTimeBoo = false;\r\n        /**文本显示 */\r\n        this.swDrawString = new SWDrawString();\r\n        /**文字标记大小 */\r\n        this.fontSize = 1;\r\n    }\r\n\r\n    /**\r\n     * 新增点击点\r\n     * @param {Vector3} points 点击点坐标\r\n     * @param {Boolean} textBoo 是否显示距离\r\n     */\r\n    addPoint(points, textBoo = true) {\r\n\r\n        this.endPoint.copy(points);\r\n\r\n        let dis = this.startPoint.distanceTo(this.endPoint);\r\n\r\n        if (dis > 0 && this.startPoint.distanceTo(new THREE.Vector3(0, 0, 0)) > 0) {\r\n\r\n            let v1 = this.endPoint.clone().sub(this.startPoint.clone());\r\n\r\n            for (let i = 1; i <= this.lineAllNum; i++) {\r\n\r\n                let v2 = v1.clone().divideScalar(this.lineAllNum / i);\r\n\r\n                let segment = this.endPoint.clone().sub(v2);\r\n\r\n                this.linePointArr.push(segment);\r\n\r\n            }\r\n\r\n            this.linePointArr.reverse();\r\n\r\n            this.lineTimeBoo = true;\r\n\r\n            if (textBoo) {\r\n\r\n                let dis1 = (Math.ceil(this.endPoint.distanceTo(this.startPoint) * 10) / 100) + \"m\";\r\n\r\n                this.fontSize = sw_measure.swDrawPoint.dotRadius * 3;\r\n\r\n                this.swDrawString.drawString(new THREE.Vector3(this.endPoint.x + sw_measure.swDrawPoint.dotRadius, this.endPoint.y + sw_measure.swDrawPoint.dotRadius, this.endPoint.z + sw_measure.swDrawPoint.dotRadius), dis1, this.fontSize);\r\n\r\n            }\r\n        }\r\n\r\n        this.startPoint.copy(this.endPoint);\r\n\r\n        if (this.linePointArr.length > 0) {\r\n            //开始自我计时\r\n            this.lineTimeNum = setInterval(() => {\r\n\r\n                if (this.lineNum == this.lineAllNum) {\r\n\r\n                    this.lineNum = 0;\r\n\r\n                    clearInterval(this.lineTimeNum);\r\n\r\n                    this.lineTimeBoo = false;\r\n\r\n                    this.linePointArr.length = 0;\r\n\r\n                    return;\r\n                }\r\n\r\n                this.drawLine(this.linePointArr[this.lineNum], ((this.lineNum + 1) >= this.lineAllNum) ? this.endPoint : this.linePointArr[this.lineNum + 1]);\r\n\r\n                this.lineNum++;\r\n\r\n            }, this.lineOverTime);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 绘制线段\r\n     * @param {Vector3} p1 第一个点坐标\r\n     * @param {Vector3} p2 第二个点坐标\r\n     */\r\n    drawLine(p1, p2) {\r\n\r\n        let geometry = new THREE.Geometry();\r\n\r\n        let material = new THREE.LineBasicMaterial({ color: this.lineColors, linewidth: this.lineWidth });\r\n\r\n        geometry.vertices.push(p1);\r\n\r\n        geometry.vertices.push(p2);\r\n\r\n        let line = new THREE.Line(geometry, material);\r\n\r\n        line.position.set(0, 0, 0);\r\n\r\n        scene.add(line);\r\n\r\n        this.lineAllArr.push(line);\r\n    }\r\n\r\n    /**\r\n     * 清除点\r\n     * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n     */\r\n    clear(num = 0) {\r\n\r\n        let dArr = num == 0 ? this.lineAllArr.splice(0, this.lineAllArr.length) :\r\n            num < 0 ? this.lineAllArr.splice(num * this.lineAllNum, Math.abs(num * this.lineAllNum)) :\r\n            this.lineAllArr.splice(0, num * this.lineAllNum);\r\n\r\n        dArr.forEach((item) => {\r\n\r\n            disposeNode(item);\r\n\r\n        });\r\n\r\n        this.startPoint = new THREE.Vector3(0, 0, 0);\r\n\r\n        this.endPoint = new THREE.Vector3(0, 0, 0);\r\n\r\n        this.lineNum = 0;\r\n\r\n        if (this.swDrawString) {\r\n\r\n            this.swDrawString.clear(num);\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default SWDrawLine;"]}]}