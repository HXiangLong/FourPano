{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallFaceModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallFaceModule.js","mtime":1530153979865},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 激光点云墙面片\r\n */\nvar SWWallFaceModule = function () {\n    function SWWallFaceModule(obj) {\n        _classCallCheck(this, SWWallFaceModule);\n\n        this.info = obj; //面片数据\n        this.points = [];\n        this.startPoint = new THREE.Vector2();\n        this.wallmesh = undefined;\n\n        this.drawWallFace();\n    }\n\n    _createClass(SWWallFaceModule, [{\n        key: 'drawWallFace',\n        value: function drawWallFace() {\n\n            var sif = _SWConstants.c_StationInfo.point.clone();\n\n            this.points.p1 = new THREE.Vector3(this.info.points.p1.x - sif.x, this.info.points.p1.y - sif.y, this.info.points.p1.z - sif.z);\n            this.points.p2 = new THREE.Vector3(this.info.points.p2.x - sif.x, this.info.points.p2.y - sif.y, this.info.points.p2.z - sif.z);\n            this.points.p3 = new THREE.Vector3(this.info.points.p3.x - sif.x, this.info.points.p3.y - sif.y, this.info.points.p3.z - sif.z);\n            this.points.p4 = new THREE.Vector3(this.info.points.p4.x - sif.x, this.info.points.p4.y - sif.y, this.info.points.p4.z - sif.z);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: (0, _SWTool.getRandomColor)(),\n                depthTest: true,\n                side: 2,\n                transparent: true,\n                opacity: 0.5\n            });\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices.push(new THREE.Vector3(this.points.p1.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p1.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p1.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p2.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p2.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p2.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p3.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p3.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p3.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p4.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p4.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p4.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n\n            var face = new THREE.Face3(0, 1, 2);\n            var face1 = new THREE.Face3(2, 3, 0);\n            geometry.faces.push(face);\n            geometry.faces.push(face1);\n            geometry.computeFaceNormals();\n\n            this.wallmesh = new THREE.Mesh(geometry, material);\n            this.wallmesh.rotation.y = THREE.Math.degToRad(90);\n            this.wallmesh.rotation.z = THREE.Math.degToRad(180);\n            this.wallmesh.userData.depthlevel = 2;\n            this.wallmesh.name = this.info.facadeID;\n            _SWConstants.scene.add(this.wallmesh);\n        }\n    }, {\n        key: 'wallMouseEvent',\n        value: function wallMouseEvent() {\n            var _this = this;\n\n            this.wallmesh.mouseOver = function (e, obj) {//鼠标进入\n                // if (!SWPanoView.isMeasureStatus) { //测量状态\n                //     SWPanoView.wallProbeSurface.wallProbeSurfaceVisible(true);\n                // }\n            };\n\n            this.wallmesh.mouseOut = function (e, obj) {//鼠标离开\n                // SWPanoView.wallProbeSurface.wallProbeSurfaceVisible(false);\n            };\n\n            this.wallmesh.mouseUp = function (e, obj) {\n                //鼠标点击事件\n\n                var event = e || window.event;\n\n                var v3 = new THREE.Vector2(event.clientX, event.clientY);\n\n                var boo = v3.equals(_this.startPoint);\n\n                if (boo) {\n\n                    // if (!SWPanoView.isEditorStatus) { //编辑状态\n\n                    //     if (SWPanoView.isMeasureStatus) { //测量状态\n\n                    //         SWPanoView.swMeasure.addPoint(obj.point, 1);\n\n                    //     } else {\n\n                    //         if (!c_isWallProbeSurfacePlusShow) {\n\n                    // SWPanoView.addmouseEvent.mouseEvent.ifJump = true;\n\n                    var realPoint1 = obj.point.clone().applyMatrix4(obj.object.matrix).applyMatrix4(_SWConstants.c_OpenGLToDS3Mx4);\n\n                    var realPoint = new THREE.Vector3(_SWConstants.c_StationInfo.nx + realPoint1.x / 10, _SWConstants.c_StationInfo.ny + realPoint1.y / 10, _SWConstants.c_StationInfo.nz + realPoint1.z / 10);\n\n                    _SWConstants.c_wallClickRotateV3.copy(realPoint);\n\n                    _SWConstants.sw_getService.getOtherPanoByFacadeID(realPoint.x, realPoint.y, realPoint.z, obj.object.name);\n\n                    // SWPanoView.wallProbeSurface.wallProbeSurfaceVisible(false);\n\n                    // } else {\n\n                    // let fovLevel = Math.ceil((camera.fov - minfov) / 12);\n\n                    // if (fovLevel > 1) {\n\n                    //     SWPanoView.swCameraManage.wallMoseWheel(1);\n                    // } else {\n\n                    //     SWPanoView.swCameraManage.wallMoseWheel(0);\n\n                    // }\n                    // }\n                    // }\n                    // }\n                }\n            };\n\n            this.wallmesh.mouseDown = function (e) {\n\n                var event = e || window.event;\n\n                _this.startPoint.x = event.clientX;\n\n                _this.startPoint.y = event.clientY;\n            };\n        }\n    }, {\n        key: 'clearWallMesh',\n        value: function clearWallMesh() {\n            (0, _SWTool.disposeNode)(this.wallmesh);\n        }\n    }]);\n\n    return SWWallFaceModule;\n}();\n\nexports.default = SWWallFaceModule;",null]}