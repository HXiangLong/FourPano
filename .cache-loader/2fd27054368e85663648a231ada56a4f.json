{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\marker\\SWMarkerMoreModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\marker\\SWMarkerMoreModule.js","mtime":1537500714312},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1537425210134},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SWMarkerModule2 = require('./SWMarkerModule');\n\nvar _SWMarkerModule3 = _interopRequireDefault(_SWMarkerModule2);\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWViewGesture = require('../../tool/SWViewGesture');\n\nvar _SWViewGesture2 = _interopRequireDefault(_SWViewGesture);\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global THREE,$*/\n\n\n/**\r\n * 多点绘面标注\r\n */\nvar SWMarkerMoreModule = function (_SWMarkerModule) {\n        _inherits(SWMarkerMoreModule, _SWMarkerModule);\n\n        /**\r\n         * 构造函数\r\n         * @param {SWMarkerInfo} obj 标注数据对象\r\n         */\n        function SWMarkerMoreModule(obj) {\n                _classCallCheck(this, SWMarkerMoreModule);\n\n                var _this = _possibleConstructorReturn(this, (SWMarkerMoreModule.__proto__ || Object.getPrototypeOf(SWMarkerMoreModule)).call(this));\n\n                _this.config = {\n                        max: 0.6,\n                        min: 0.15,\n                        openness: 0.6,\n                        weak: -0.005\n                };\n\n                if (obj) {\n                        _this.markerObj = obj;\n\n                        _this.createPolygon(obj.points);\n                }\n                return _this;\n        }\n\n        /**\r\n         * 创建多边形\r\n         * @param {Array} vertices 顶点信息\r\n         */\n\n\n        _createClass(SWMarkerMoreModule, [{\n                key: 'createPolygon',\n                value: function createPolygon(points) {\n                        var holes = [],\n                            triangles = void 0,\n                            vertices = [];\n\n                        this.material = new THREE.MeshBasicMaterial({\n                                color: new THREE.Color(0x06FFFF),\n                                depthTest: false,\n                                transparent: true,\n                                side: 2,\n                                alphaTest: 0,\n                                opacity: 1\n                        });\n\n                        //所有点由空间坐标转三维坐标\n                        points.forEach(function (data) {\n\n                                var v3 = (0, _SWTool.VPToVector3)(new _SWViewGesture2.default(parseFloat(data.yaw), parseFloat(data.pitch), 0));\n\n                                vertices.push(v3.subScalar(0.8));\n                        });\n\n                        this.geometry = new THREE.Geometry();\n\n                        this.geometry.vertices = vertices;\n\n                        //构建面顶点信息\n                        triangles = THREE.ShapeUtils.triangulateShape(vertices, holes);\n\n                        //三点构建面\n                        for (var i = 0; i < triangles.length; i++) {\n\n                                this.geometry.faces.push(new THREE.Face3(triangles[i][0], triangles[i][1], triangles[i][2]));\n                        }\n\n                        this.geometry.computeFaceNormals();\n\n                        this.mesh = new THREE.Mesh(this.geometry, this.material);\n                        this.mesh.lookAt(constants.camera.position);\n                        this.mesh.name = \"markerMesh\";\n                        this.mesh.userData.depthlevel = 1;\n                        this.mesh.userData.markerID = this.markerObj.markerID;\n                        constants.scene.add(this.mesh);\n\n                        console.log('==================markerMesh==================');\n                        console.log(this.mesh);\n                        console.log('====================================');\n\n                        this.addMouseEvent();\n                }\n        }, {\n                key: 'update',\n                value: function update() {\n\n                        this.mesh.material.transparent = true;\n\n                        this.mesh.material.opacity = this.config.openness;\n\n                        this.config.openness += this.config.weak;\n\n                        if (this.config.openness <= this.config.min || this.config.openness >= this.config.max) {\n\n                                this.config.weak = -this.config.weak;\n                        }\n                }\n        }]);\n\n        return SWMarkerMoreModule;\n}(_SWMarkerModule3.default);\n\nexports.default = SWMarkerMoreModule;",null]}