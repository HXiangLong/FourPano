{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\SWMouseModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\SWMouseModule.js","mtime":1531468021832},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require(\"../tool/SWConstants\");\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 鼠标事件\r\n * 将要解决手机双击的问题\r\n * 由UI层传递屏幕点击坐标之后，在转换成三维坐标射线判定\r\n */\nvar SWMouseModule = function () {\n    function SWMouseModule(canvas) {\n        _classCallCheck(this, SWMouseModule);\n\n        this.canvas3d = canvas;\n\n        /**是否按下鼠标 */\n        this.ifMouseDownBoo = false;\n\n        /**是否鼠标离开 */\n        this.ifMouseOutBoo = false;\n\n        /**鼠标坐标 */\n        this.mouseV2 = new THREE.Vector2();\n\n        /**射线 */\n        this.raycaster = new THREE.Raycaster();\n\n        this.addMosueEvent();\n        // this.addGyroEvent();\n        this.addTouchEvent();\n    }\n\n    /**添加鼠标事件 */\n\n\n    _createClass(SWMouseModule, [{\n        key: \"addMosueEvent\",\n        value: function addMosueEvent() {\n            this.canvas3d.addEventListener(\"mousedown\", this.mouseDown.bind(this), false); //鼠标按钮被按下\n            this.canvas3d.addEventListener(\"mouseup\", this.mouseUp.bind(this), false); //鼠标按键被松开\n            this.canvas3d.addEventListener(\"mousemove\", this.mouseMove.bind(this), false); //鼠标被移动\n\n            this.canvas3d.addEventListener(\"mouseover\", this.mouseOver.bind(this), false); //鼠标移到某元素之上\n            this.canvas3d.addEventListener(\"mouseout\", this.mouseOut.bind(this), false); //鼠标从某元素移开\n\n            this.canvas3d.addEventListener(\"wheel\", this.mouseWheel.bind(this), false); //鼠标滚轮\n\n            document.addEventListener('contextmenu', this.contextMenu, false); //关闭右键事件\n        }\n\n        /**清除鼠标事件 */\n\n    }, {\n        key: \"deleteMouseEvent\",\n        value: function deleteMouseEvent() {\n            this.canvas3d.removeEventListener(\"mousedown\", this.mouseDown.bind(this), false); //鼠标按钮被按下\n            this.canvas3d.removeEventListener(\"mouseup\", this.mouseUp.bind(this), false); //鼠标按键被松开\n            this.canvas3d.removeEventListener(\"mousemove\", this.mouseMove.bind(this), false); //鼠标被移动\n\n            this.canvas3d.removeEventListener(\"mouseover\", this.mouseOver.bind(this), false); //鼠标移到某元素之上\n            this.canvas3d.removeEventListener(\"mouseout\", this.mouseOut.bind(this), false); //鼠标从某元素移开\n\n            this.canvas3d.removeEventListener(\"wheel\", this.mouseWheel.bind(this), false); //鼠标滚轮\n        }\n\n        /**添加触摸事件 */\n\n    }, {\n        key: \"addTouchEvent\",\n        value: function addTouchEvent() {\n            this.canvas3d.addEventListener(\"touchstart\", this.touchStart.bind(this), false); //触摸按下\n            this.canvas3d.addEventListener(\"touchmove\", this.touchMove.bind(this), false); //触摸移动\n            this.canvas3d.addEventListener(\"touchend\", this.touchEnd.bind(this), false); //触摸结束\n        }\n\n        /**清除触摸事件 */\n\n    }, {\n        key: \"deleteTouchEvent\",\n        value: function deleteTouchEvent() {\n            this.canvas3d.removeEventListener(\"touchstart\", this.touchStart.bind(this), false); //触摸按下\n            this.canvas3d.removeEventListener(\"touchmove\", this.touchMove.bind(this), false); //触摸移动\n            this.canvas3d.removeEventListener(\"touchend\", this.touchEnd.bind(this), false); //触摸结束\n        }\n\n        /**添加手机陀螺仪事件 */\n\n    }, {\n        key: \"addGyroEvent\",\n        value: function addGyroEvent() {\n            window.addEventListener('orientationchange', this.screenOrientationChangeEvent.bind(this), false); //浏览器横竖屏切换检测\n            //处理方向事件 接收设备方向变化信息\n            if (window.DeviceOrientationEvent) {\n                window.addEventListener('deviceorientation', this.deviceOrientationChangeEvent.bind(this), false); //检测手机倾斜旋转\n            } else {\n                alert('本设备不支持deviceorientation事件');\n            }\n        }\n\n        /**清除手机陀螺仪事件 */\n\n    }, {\n        key: \"deleteGyroEvent\",\n        value: function deleteGyroEvent() {\n            window.removeEventListener('orientationchange', this.screenOrientationChangeEvent.bind(this), false); //浏览器横竖屏切换检测\n            window.removeEventListener('deviceorientation', this.deviceOrientationChangeEvent.bind(this), false); //检测手机倾斜旋转\n        }\n\n        /**\r\n         * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n         * @param {Number} ex 鼠标/触摸点X坐标\r\n         * @param {Number} ey 鼠标/触摸点Y坐标\r\n         */\n\n    }, {\n        key: \"mousePosition\",\n        value: function mousePosition(ex, ey) {\n\n            this.mouseV2.x = ex / window.innerWidth * 2 - 1;\n\n            this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\n        }\n\n        /**\r\n         * 朝着某个点发射线\r\n         * @param {Vector2} mouseXY 屏蔽坐标点\r\n         */\n\n    }, {\n        key: \"mouseRaycaster\",\n        value: function mouseRaycaster(mouseXY) {\n\n            this.raycaster.setFromCamera(mouseXY, constants.camera);\n\n            var intersects = this.raycaster.intersectObjects(constants.scene.children);\n\n            var intersect = void 0,\n                depthlevel = void 0;\n\n            if (intersects.length > 0) {\n\n                depthlevel = intersects[0].object.userData.depthlevel;\n\n                intersect = intersects[0];\n\n                for (var i = 1; i < intersects.length; i++) {\n\n                    if (depthlevel > intersects[i].object.userData.depthlevel) {\n\n                        depthlevel = intersects[i].object.userData.depthlevel;\n\n                        intersect = intersects[i];\n                    }\n                }\n            }\n\n            return intersect;\n        }\n\n        /**\r\n         * 鼠标滚轮事件\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"mouseWheel\",\n        value: function mouseWheel(e) {\n\n            constants.sw_cameraManage.onMouseWheel(e);\n        }\n\n        /**\r\n         * 鼠标弹起\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"mouseUp\",\n        value: function mouseUp(e) {\n\n            constants.sw_cameraManage.onMouseUp(e);\n\n            if (constants.c_currentState === constants.c_currentStateEnum.editorStatus && constants.c_editorState === constants.c_editorStateEnum.markerPoint) {\n\n                constants.sw_markPoint.addPoint(e.clientX, e.clientY, 2);\n            } else {\n                this.mousePosition(e.clientX, e.clientY);\n\n                this.intersect = this.mouseRaycaster(this.mouseV2);\n\n                if (this.intersect && this.intersect.object.mouseUp) {\n                    //模型弹起事件\n\n                    this.intersect.object.mouseUp(e, this.intersect);\n                }\n            }\n        }\n\n        /**\r\n         * 鼠标移动\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"mouseMove\",\n        value: function mouseMove(e) {\n\n            constants.sw_cameraManage.onMouseMove(e);\n\n            this.mousePosition(e.clientX, e.clientY);\n\n            var rayObj = this.mouseRaycaster(this.mouseV2);\n\n            if (rayObj) {\n\n                if (this.intersect && this.intersect != rayObj) {\n                    //如果再次返回对象不是上次对象，就是离开对象了\n\n                    if (this.intersect.object.mouseOut) {\n                        //离开模型事件\n\n                        this.intersect.object.mouseOut(e, this.intersect);\n                    }\n                }\n\n                if (rayObj.object.mouseOver) {\n                    //进入模型事件\n\n                    rayObj.object.mouseOver(e, rayObj);\n                }\n\n                if (rayObj.object.mouseMove) {\n                    //移动事件\n\n                    rayObj.object.mouseMove(e, rayObj);\n                }\n            } else if (this.intersect) {\n\n                if (this.intersect.object.mouseOut) {\n                    //离开模型事件\n\n                    this.intersect.object.mouseOut(e, this.intersect);\n                }\n            }\n\n            this.intersect = rayObj;\n        }\n\n        /**\r\n         * 鼠标按下\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"mouseDown\",\n        value: function mouseDown(e) {\n\n            constants.sw_cameraManage.onMouseDown(e);\n\n            if (constants.c_currentState === constants.c_currentStateEnum.editorStatus && constants.c_editorState === constants.c_editorStateEnum.markerPoint) {\n\n                constants.sw_markPoint.addPoint(e.clientX, e.clientY, 1);\n            } else {\n\n                this.mousePosition(e.clientX, e.clientY);\n\n                this.intersect = this.mouseRaycaster(this.mouseV2);\n\n                if (this.intersect && this.intersect.object.mouseDown) {\n\n                    this.intersect.object.mouseDown(e, this.intersect);\n                }\n            }\n        }\n\n        /**\r\n         * 鼠标从某元素移开\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"mouseOut\",\n        value: function mouseOut(e) {\n\n            this.ifMouseOutBoo = true;\n        }\n\n        /**\r\n         * 鼠标移到某元素之上\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"mouseOver\",\n        value: function mouseOver(e) {\n\n            this.ifMouseOutBoo = false;\n        }\n\n        /**\r\n         * 触摸开始\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"touchStart\",\n        value: function touchStart(e) {\n\n            constants.sw_cameraManage.onTouchStart(e);\n        }\n\n        /**\r\n         * 触摸结束\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"touchEnd\",\n        value: function touchEnd(e) {\n\n            constants.sw_cameraManage.onTouchEnd(e);\n        }\n\n        /**\r\n         * 触摸移动\r\n         * @param {Event} e \r\n         */\n\n    }, {\n        key: \"touchMove\",\n        value: function touchMove(e) {\n\n            constants.sw_cameraManage.onTouchMove(e);\n        }\n\n        /**陀螺仪旋转事件-设备定位改变事件 */\n\n    }, {\n        key: \"deviceOrientationChangeEvent\",\n        value: function deviceOrientationChangeEvent(event) {\n\n            constants.sw_cameraManage.onDeviceOrientationChangeEvent(event);\n        }\n\n        /**陀螺仪旋转事件-屏幕方向改变事件 */\n\n    }, {\n        key: \"screenOrientationChangeEvent\",\n        value: function screenOrientationChangeEvent() {\n\n            constants.sw_cameraManage.onScreenOrientationChangeEvent();\n        }\n\n        /**屏蔽右键 */\n\n    }, {\n        key: \"contextMenu\",\n        value: function contextMenu(e) {\n            e.preventDefault();\n        }\n    }]);\n\n    return SWMouseModule;\n}();\n\nexports.default = SWMouseModule;",{"version":3,"sources":["app\\src\\module\\SWMouseModule.js"],"names":["constants","SWMouseModule","canvas","canvas3d","ifMouseDownBoo","ifMouseOutBoo","mouseV2","THREE","Vector2","raycaster","Raycaster","addMosueEvent","addTouchEvent","addEventListener","mouseDown","bind","mouseUp","mouseMove","mouseOver","mouseOut","mouseWheel","document","contextMenu","removeEventListener","touchStart","touchMove","touchEnd","window","screenOrientationChangeEvent","DeviceOrientationEvent","deviceOrientationChangeEvent","alert","ex","ey","x","innerWidth","y","innerHeight","mouseXY","setFromCamera","camera","intersects","intersectObjects","scene","children","intersect","depthlevel","length","object","userData","i","e","sw_cameraManage","onMouseWheel","onMouseUp","c_currentState","c_currentStateEnum","editorStatus","c_editorState","c_editorStateEnum","markerPoint","sw_markPoint","addPoint","clientX","clientY","mousePosition","mouseRaycaster","onMouseMove","rayObj","onMouseDown","onTouchStart","onTouchEnd","onTouchMove","event","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","preventDefault"],"mappings":"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","file":"SWMouseModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\n\r\nimport * as constants from '../tool/SWConstants';\r\n\r\n/**\r\n * 鼠标事件\r\n * 将要解决手机双击的问题\r\n * 由UI层传递屏幕点击坐标之后，在转换成三维坐标射线判定\r\n */\r\nclass SWMouseModule {\r\n    constructor(canvas) {\r\n\r\n        this.canvas3d = canvas;\r\n\r\n        /**是否按下鼠标 */\r\n        this.ifMouseDownBoo = false;\r\n\r\n        /**是否鼠标离开 */\r\n        this.ifMouseOutBoo = false;\r\n\r\n        /**鼠标坐标 */\r\n        this.mouseV2 = new THREE.Vector2();\r\n\r\n        /**射线 */\r\n        this.raycaster = new THREE.Raycaster();\r\n\r\n        this.addMosueEvent();\r\n        // this.addGyroEvent();\r\n        this.addTouchEvent();\r\n    }\r\n\r\n    /**添加鼠标事件 */\r\n    addMosueEvent() {\r\n        this.canvas3d.addEventListener(\"mousedown\", this.mouseDown.bind(this), false); //鼠标按钮被按下\r\n        this.canvas3d.addEventListener(\"mouseup\", this.mouseUp.bind(this), false); //鼠标按键被松开\r\n        this.canvas3d.addEventListener(\"mousemove\", this.mouseMove.bind(this), false); //鼠标被移动\r\n\r\n        this.canvas3d.addEventListener(\"mouseover\", this.mouseOver.bind(this), false); //鼠标移到某元素之上\r\n        this.canvas3d.addEventListener(\"mouseout\", this.mouseOut.bind(this), false); //鼠标从某元素移开\r\n\r\n        this.canvas3d.addEventListener(\"wheel\", this.mouseWheel.bind(this), false); //鼠标滚轮\r\n\r\n        document.addEventListener('contextmenu', this.contextMenu, false); //关闭右键事件\r\n    }\r\n\r\n    /**清除鼠标事件 */\r\n    deleteMouseEvent() {\r\n        this.canvas3d.removeEventListener(\"mousedown\", this.mouseDown.bind(this), false); //鼠标按钮被按下\r\n        this.canvas3d.removeEventListener(\"mouseup\", this.mouseUp.bind(this), false); //鼠标按键被松开\r\n        this.canvas3d.removeEventListener(\"mousemove\", this.mouseMove.bind(this), false); //鼠标被移动\r\n\r\n        this.canvas3d.removeEventListener(\"mouseover\", this.mouseOver.bind(this), false); //鼠标移到某元素之上\r\n        this.canvas3d.removeEventListener(\"mouseout\", this.mouseOut.bind(this), false); //鼠标从某元素移开\r\n\r\n        this.canvas3d.removeEventListener(\"wheel\", this.mouseWheel.bind(this), false); //鼠标滚轮\r\n\r\n    }\r\n\r\n    /**添加触摸事件 */\r\n    addTouchEvent() {\r\n        this.canvas3d.addEventListener(\"touchstart\", this.touchStart.bind(this), false); //触摸按下\r\n        this.canvas3d.addEventListener(\"touchmove\", this.touchMove.bind(this), false); //触摸移动\r\n        this.canvas3d.addEventListener(\"touchend\", this.touchEnd.bind(this), false); //触摸结束\r\n    }\r\n\r\n    /**清除触摸事件 */\r\n    deleteTouchEvent() {\r\n        this.canvas3d.removeEventListener(\"touchstart\", this.touchStart.bind(this), false); //触摸按下\r\n        this.canvas3d.removeEventListener(\"touchmove\", this.touchMove.bind(this), false); //触摸移动\r\n        this.canvas3d.removeEventListener(\"touchend\", this.touchEnd.bind(this), false); //触摸结束\r\n    }\r\n\r\n    /**添加手机陀螺仪事件 */\r\n    addGyroEvent() {\r\n        window.addEventListener('orientationchange', this.screenOrientationChangeEvent.bind(this), false); //浏览器横竖屏切换检测\r\n        //处理方向事件 接收设备方向变化信息\r\n        if (window.DeviceOrientationEvent) {\r\n            window.addEventListener('deviceorientation', this.deviceOrientationChangeEvent.bind(this), false); //检测手机倾斜旋转\r\n        } else {\r\n            alert('本设备不支持deviceorientation事件');\r\n        }\r\n    }\r\n\r\n    /**清除手机陀螺仪事件 */\r\n    deleteGyroEvent() {\r\n        window.removeEventListener('orientationchange', this.screenOrientationChangeEvent.bind(this), false); //浏览器横竖屏切换检测\r\n        window.removeEventListener('deviceorientation', this.deviceOrientationChangeEvent.bind(this), false); //检测手机倾斜旋转\r\n    }\r\n\r\n    /**\r\n     * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n     * @param {Number} ex 鼠标/触摸点X坐标\r\n     * @param {Number} ey 鼠标/触摸点Y坐标\r\n     */\r\n    mousePosition(ex, ey) {\r\n\r\n        this.mouseV2.x = (ex / window.innerWidth) * 2 - 1;\r\n\r\n        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\r\n    }\r\n\r\n    /**\r\n     * 朝着某个点发射线\r\n     * @param {Vector2} mouseXY 屏蔽坐标点\r\n     */\r\n    mouseRaycaster(mouseXY) {\r\n\r\n        this.raycaster.setFromCamera(mouseXY, constants.camera);\r\n\r\n        let intersects = this.raycaster.intersectObjects(constants.scene.children);\r\n\r\n        let intersect, depthlevel;\r\n\r\n        if (intersects.length > 0) {\r\n\r\n            depthlevel = intersects[0].object.userData.depthlevel;\r\n\r\n            intersect = intersects[0];\r\n\r\n            for (let i = 1; i < intersects.length; i++) {\r\n\r\n                if (depthlevel > intersects[i].object.userData.depthlevel) {\r\n\r\n                    depthlevel = intersects[i].object.userData.depthlevel;\r\n\r\n                    intersect = intersects[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return intersect;\r\n    }\r\n\r\n    /**\r\n     * 鼠标滚轮事件\r\n     * @param {Event} e \r\n     */\r\n    mouseWheel(e) {\r\n\r\n        constants.sw_cameraManage.onMouseWheel(e);\r\n\r\n    }\r\n\r\n    /**\r\n     * 鼠标弹起\r\n     * @param {Event} e \r\n     */\r\n    mouseUp(e) {\r\n\r\n        constants.sw_cameraManage.onMouseUp(e);\r\n\r\n        if (constants.c_currentState === constants.c_currentStateEnum.editorStatus &&\r\n            constants.c_editorState === constants.c_editorStateEnum.markerPoint) {\r\n\r\n            constants.sw_markPoint.addPoint(e.clientX, e.clientY, 2);\r\n\r\n        } else {\r\n            this.mousePosition(e.clientX, e.clientY);\r\n\r\n            this.intersect = this.mouseRaycaster(this.mouseV2);\r\n\r\n            if (this.intersect && this.intersect.object.mouseUp) { //模型弹起事件\r\n\r\n                this.intersect.object.mouseUp(e, this.intersect);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 鼠标移动\r\n     * @param {Event} e \r\n     */\r\n    mouseMove(e) {\r\n\r\n        constants.sw_cameraManage.onMouseMove(e);\r\n\r\n        this.mousePosition(e.clientX, e.clientY);\r\n\r\n        let rayObj = this.mouseRaycaster(this.mouseV2);\r\n\r\n        if (rayObj) {\r\n\r\n            if (this.intersect && this.intersect != rayObj) { //如果再次返回对象不是上次对象，就是离开对象了\r\n\r\n                if (this.intersect.object.mouseOut) { //离开模型事件\r\n\r\n                    this.intersect.object.mouseOut(e, this.intersect);\r\n\r\n                }\r\n            }\r\n\r\n            if (rayObj.object.mouseOver) { //进入模型事件\r\n\r\n                rayObj.object.mouseOver(e, rayObj);\r\n\r\n            }\r\n\r\n            if (rayObj.object.mouseMove) { //移动事件\r\n\r\n                rayObj.object.mouseMove(e, rayObj);\r\n\r\n            }\r\n\r\n        } else if (this.intersect) {\r\n\r\n            if (this.intersect.object.mouseOut) { //离开模型事件\r\n\r\n                this.intersect.object.mouseOut(e, this.intersect);\r\n\r\n            }\r\n        }\r\n\r\n        this.intersect = rayObj;\r\n    }\r\n\r\n    /**\r\n     * 鼠标按下\r\n     * @param {Event} e \r\n     */\r\n    mouseDown(e) {\r\n\r\n        constants.sw_cameraManage.onMouseDown(e);\r\n\r\n        if (constants.c_currentState === constants.c_currentStateEnum.editorStatus &&\r\n            constants.c_editorState === constants.c_editorStateEnum.markerPoint) {\r\n\r\n            constants.sw_markPoint.addPoint(e.clientX, e.clientY, 1);\r\n\r\n        } else {\r\n\r\n            this.mousePosition(e.clientX, e.clientY);\r\n\r\n            this.intersect = this.mouseRaycaster(this.mouseV2);\r\n\r\n            if (this.intersect && this.intersect.object.mouseDown) {\r\n\r\n                this.intersect.object.mouseDown(e, this.intersect);\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 鼠标从某元素移开\r\n     * @param {Event} e \r\n     */\r\n    mouseOut(e) {\r\n\r\n        this.ifMouseOutBoo = true;\r\n    }\r\n\r\n    /**\r\n     * 鼠标移到某元素之上\r\n     * @param {Event} e \r\n     */\r\n    mouseOver(e) {\r\n\r\n        this.ifMouseOutBoo = false;\r\n    }\r\n\r\n    /**\r\n     * 触摸开始\r\n     * @param {Event} e \r\n     */\r\n    touchStart(e) {\r\n\r\n        constants.sw_cameraManage.onTouchStart(e);\r\n    }\r\n\r\n    /**\r\n     * 触摸结束\r\n     * @param {Event} e \r\n     */\r\n    touchEnd(e) {\r\n\r\n        constants.sw_cameraManage.onTouchEnd(e);\r\n    }\r\n\r\n    /**\r\n     * 触摸移动\r\n     * @param {Event} e \r\n     */\r\n    touchMove(e) {\r\n\r\n        constants.sw_cameraManage.onTouchMove(e);\r\n    }\r\n\r\n    /**陀螺仪旋转事件-设备定位改变事件 */\r\n    deviceOrientationChangeEvent(event) {\r\n\r\n        constants.sw_cameraManage.onDeviceOrientationChangeEvent(event);\r\n\r\n    }\r\n\r\n    /**陀螺仪旋转事件-屏幕方向改变事件 */\r\n    screenOrientationChangeEvent() {\r\n\r\n        constants.sw_cameraManage.onScreenOrientationChangeEvent();\r\n\r\n    }\r\n\r\n    /**屏蔽右键 */\r\n    contextMenu(e) {\r\n        e.preventDefault();\r\n    }\r\n}\r\n\r\nexport default SWMouseModule;"]}]}