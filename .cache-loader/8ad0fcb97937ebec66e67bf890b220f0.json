{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallSurfaceModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallSurfaceModule.js","mtime":1539260254080},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538971317145},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../../tool/SWExternalConst');\n\n/**\r\n * 墙面探面\r\n */\n\nvar SWWallSurfaceModule = function () {\n        function SWWallSurfaceModule() {\n                _classCallCheck(this, SWWallSurfaceModule);\n\n                /**墙探面对象 */\n                this.wallFaceMash = undefined;\n                /**放大标识 */\n                this.plusSign = undefined;\n                /**缩小标识 */\n                this.minusSign = undefined;\n                /**地探面对象 */\n                this.groundFaceMash = undefined;\n                /**地探面距离 */\n                this.groundDisplaySize = -500;\n                /**探面距离显示框 */\n                this.textDiv = new _SWTool.TextDiv(new THREE.Vector3(0, 0, 0));\n                /**地面片是否可以跳转 */\n                this.isgroundFaceJumpBoo = false;\n                /**墙面是否可以跳转 */\n                this.isWallFaceJumpBoo = false;\n\n                this.createWallMash();\n\n                this.createGroundMash();\n        }\n\n        /**创建墙面片 */\n\n\n        _createClass(SWWallSurfaceModule, [{\n                key: 'createWallMash',\n                value: function createWallMash() {\n                        var material = new THREE.MeshLambertMaterial({\n                                color: 0xFFFFFF,\n                                depthTest: false,\n                                side: 2,\n                                transparent: true,\n                                opacity: 0.5\n                        });\n                        var geometry = new THREE.PlaneGeometry(200, 123.6);\n                        this.wallFaceMash = new THREE.Mesh(geometry, material);\n                        this.wallFaceMash.name = \"wallFaceMash\";\n                        this.wallFaceMash.userData.depthlevel = 4;\n                        _SWConstants.scene.add(this.wallFaceMash);\n\n                        var texture = new THREE.TextureLoader().load(external.plusSign_icon);\n                        texture.needsUpdate = true;\n                        material = new THREE.MeshBasicMaterial({\n                                map: texture,\n                                transparent: true,\n                                opacity: 1,\n                                depthTest: false,\n                                side: 2\n                        });\n\n                        geometry = new THREE.PlaneGeometry(32 * 0.3, 32 * 0.3, 1, 1);\n\n                        this.plusSign = new THREE.Mesh(geometry, material);\n                        this.plusSign.name = \"plusSign\";\n                        this.plusSign.userData.depthlevel = 5;\n                        this.plusSign.position.copy(new THREE.Vector3(-(200 - 32 * 0.5) * 0.5, -(123.6 - 32 * 0.5) * 0.5, 2));\n                        this.wallFaceMash.add(this.plusSign);\n\n                        texture = new THREE.TextureLoader().load(external.minusSign_icon);\n                        texture.needsUpdate = true;\n                        material = new THREE.MeshBasicMaterial({\n                                map: texture,\n                                transparent: true,\n                                opacity: 1,\n                                depthTest: false,\n                                side: 2\n                        });\n\n                        geometry = new THREE.PlaneGeometry(32 * 0.3, 32 * 0.3, 1, 1);\n\n                        this.minusSign = new THREE.Mesh(geometry, material);\n                        this.minusSign.name = \"minusSign\";\n                        this.minusSign.userData.depthlevel = 5;\n                        this.minusSign.position.copy(new THREE.Vector3(-(200 - 32 * 0.5) * 0.5, -(123.6 - 32 * 0.5) * 0.5, 2));\n                        this.wallFaceMash.add(this.minusSign);\n\n                        this.wallFaceMash.visible = false;\n                }\n\n                /**创建地面片 */\n\n        }, {\n                key: 'createGroundMash',\n                value: function createGroundMash() {\n                        var material = new THREE.MeshLambertMaterial({\n                                color: 0xFFFFFF,\n                                emissive: 0xFFFFFF,\n                                depthTest: true,\n                                side: 2,\n                                transparent: true,\n                                opacity: 0.4\n                        });\n                        var geometry = new THREE.CircleGeometry(250, 32);\n                        this.groundFaceMash = new THREE.Mesh(geometry, material);\n                        this.groundFaceMash.userData.depthlevel = 4;\n                        this.groundFaceMash.name = \"groundFace\";\n                        _SWConstants.scene.add(this.groundFaceMash);\n                        this.groundFaceMash.visible = false;\n                        this.groundFaceMash.rotation.x = THREE.Math.degToRad(90);\n                }\n\n                /**\r\n                 * 探面类型显示\r\n                 * @param {Number} wallType 0-都不显示 1-显示墙面 2-显示地面\r\n                 * @param {Number} zoomType 0-不缩放、要跳转 1-放大 2-缩小\r\n                 */\n\n        }, {\n                key: 'wallProbeSurfaceVisible',\n                value: function wallProbeSurfaceVisible(wallType, zoomType) {\n\n                        if (_SWConstants.c_isMeasureStatus) wallType = 0; //测量状态不显示探面\n                        if (!_SWConstants.c_isDisplayFace && wallType == 2) wallType = 0;\n\n                        this.wallFaceMash.visible = wallType === 1;\n\n                        this.groundFaceMash.visible = wallType === 2;\n\n                        this.textDiv.style.display = this.groundFaceMash.visible ? \"block\" : \"none\";\n\n                        this.plusSign.visible = zoomType === 1;\n\n                        this.minusSign.visible = zoomType === 2;\n                }\n\n                /**\r\n                 * 地面片上移动\r\n                 * @param {Object} obj 射线返回对象\r\n                 */\n\n        }, {\n                key: 'groundFaceMove',\n                value: function groundFaceMove(obj) {\n\n                        if (_SWConstants.c_isMeasureStatus || !_SWConstants.c_isDisplayFace) return; //测量状态不显示移动数据\n\n                        this.isgroundFaceJumpBoo = (0, _SWTool.getJudgeOrZoom)(obj, 1);\n\n                        if (this.isgroundFaceJumpBoo) {\n\n                                this.wallProbeSurfaceVisible(2);\n\n                                this.groundFaceMash.position.copy(new THREE.Vector3(obj.point.x, obj.point.y + 50, obj.point.z));\n\n                                this.textDiv.style.display = \"block\";\n\n                                var labelPos = (0, _SWTool.getWorldToScene)(obj.point);\n\n                                this.textDiv.style.left = labelPos.x - 30 + \"px\";\n\n                                this.textDiv.style.top = labelPos.y - 40 + \"px\";\n\n                                this.textDiv.innerHTML = \"前进 \" + this.xround((0, _SWTool.getProbeSurfaceDistance)(obj), 2) + \" 米\";\n                        } else {\n\n                                this.wallProbeSurfaceVisible(0);\n                        }\n                }\n\n                /**\r\n                 * 鼠标在墙面片上移动\r\n                 * @param {Object} obj 墙面片对象\r\n                 */\n\n        }, {\n                key: 'wallFaceMove',\n                value: function wallFaceMove(obj) {\n\n                        this.wallFaceMash.position.copy(obj.point);\n\n                        var angle = (0, _SWTool.getWallProbeSurfaceAngle)(obj);\n\n                        this.wallFaceMash.rotation.y = THREE.Math.degToRad(angle > 180 ? angle - 90 : angle + 90);\n\n                        this.isWallFaceJumpBoo = (0, _SWTool.getJudgeOrZoom)(obj, 2);\n\n                        if (!this.isWallFaceJumpBoo) {\n\n                                if (_SWConstants.camera.fov != _SWConstants.c_Minfov) {\n\n                                        this.wallProbeSurfaceVisible(1, 1);\n                                } else {\n\n                                        this.wallProbeSurfaceVisible(1, 2);\n                                }\n                        } else {\n                                this.wallProbeSurfaceVisible(1, 0);\n                        }\n\n                        var fov = _SWConstants.camera.fov / _SWConstants.c_Maxfov; //相机缩放比例\n\n                        var dis = (obj.distance - 14) * 0.0015; //0.008是每一米对应缩放比例\n\n                        dis = dis < 0.05 ? 0.05 : dis; //0.05是最小缩放比例\n\n                        dis = dis > 2 ? 2 : dis; //3是最大缩放比例\n\n                        this.wallFaceMash.scale.set(dis * fov, dis * fov, dis * fov); //缩放\n\n                        if (_SWConstants.camera.fov === _SWConstants.c_Minfov) {\n                                this.wallProbeSurfaceVisible(0, 0);\n                        }\n                }\n        }, {\n                key: 'xround',\n                value: function xround(x, num) {\n\n                        return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\n                }\n        }]);\n\n        return SWWallSurfaceModule;\n}();\n\nexports.default = SWWallSurfaceModule;",{"version":3,"sources":["app\\src\\module\\laser\\SWWallSurfaceModule.js"],"names":["external","require","SWWallSurfaceModule","wallFaceMash","undefined","plusSign","minusSign","groundFaceMash","groundDisplaySize","textDiv","TextDiv","THREE","Vector3","isgroundFaceJumpBoo","isWallFaceJumpBoo","createWallMash","createGroundMash","material","MeshLambertMaterial","color","depthTest","side","transparent","opacity","geometry","PlaneGeometry","Mesh","name","userData","depthlevel","scene","add","texture","TextureLoader","load","plusSign_icon","needsUpdate","MeshBasicMaterial","map","position","copy","minusSign_icon","visible","emissive","CircleGeometry","rotation","x","Math","degToRad","wallType","zoomType","c_isMeasureStatus","c_isDisplayFace","style","display","obj","wallProbeSurfaceVisible","point","y","z","labelPos","left","top","innerHTML","xround","angle","camera","fov","c_Minfov","c_Maxfov","dis","distance","scale","set","num","round","pow"],"mappings":"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","file":"SWWallSurfaceModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\n\r\nimport {\r\n    scene,\r\n    camera,\r\n    c_Minfov,\r\n    c_Maxfov,\r\n    c_isMeasureStatus,\r\n    c_isDisplayFace\r\n} from '../../tool/SWConstants';\r\nimport {\r\n    TextDiv,\r\n    getJudgeOrZoom,\r\n    getWorldToScene,\r\n    getProbeSurfaceDistance,\r\n    getWallProbeSurfaceAngle\r\n} from '../../tool/SWTool';\r\nconst external = require('../../tool/SWExternalConst');\r\n\r\n/**\r\n * 墙面探面\r\n */\r\nclass SWWallSurfaceModule {\r\n    constructor() {\r\n        /**墙探面对象 */\r\n        this.wallFaceMash = undefined;\r\n        /**放大标识 */\r\n        this.plusSign = undefined;\r\n        /**缩小标识 */\r\n        this.minusSign = undefined;\r\n        /**地探面对象 */\r\n        this.groundFaceMash = undefined;\r\n        /**地探面距离 */\r\n        this.groundDisplaySize = -500;\r\n        /**探面距离显示框 */\r\n        this.textDiv = new TextDiv(new THREE.Vector3(0, 0, 0));\r\n        /**地面片是否可以跳转 */\r\n        this.isgroundFaceJumpBoo = false;\r\n        /**墙面是否可以跳转 */\r\n        this.isWallFaceJumpBoo = false;\r\n\r\n        this.createWallMash();\r\n\r\n        this.createGroundMash();\r\n    }\r\n\r\n    /**创建墙面片 */\r\n    createWallMash() {\r\n        let material = new THREE.MeshLambertMaterial({\r\n            color: 0xFFFFFF,\r\n            depthTest: false,\r\n            side: 2,\r\n            transparent: true,\r\n            opacity: 0.5\r\n        });\r\n        let geometry = new THREE.PlaneGeometry(200, 123.6);\r\n        this.wallFaceMash = new THREE.Mesh(geometry, material);\r\n        this.wallFaceMash.name = \"wallFaceMash\";\r\n        this.wallFaceMash.userData.depthlevel = 4;\r\n        scene.add(this.wallFaceMash);\r\n\r\n        let texture = new THREE.TextureLoader().load(external.plusSign_icon);\r\n        texture.needsUpdate = true;\r\n        material = new THREE.MeshBasicMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n            opacity: 1,\r\n            depthTest: false,\r\n            side: 2\r\n        });\r\n\r\n        geometry = new THREE.PlaneGeometry(32 * 0.3, 32 * 0.3, 1, 1);\r\n\r\n        this.plusSign = new THREE.Mesh(geometry, material);\r\n        this.plusSign.name = \"plusSign\";\r\n        this.plusSign.userData.depthlevel = 5;\r\n        this.plusSign.position.copy(new THREE.Vector3(-(200 - 32 * 0.5) * 0.5, -(123.6 - 32 * 0.5) * 0.5, 2));\r\n        this.wallFaceMash.add(this.plusSign);\r\n\r\n        texture = new THREE.TextureLoader().load(external.minusSign_icon);\r\n        texture.needsUpdate = true;\r\n        material = new THREE.MeshBasicMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n            opacity: 1,\r\n            depthTest: false,\r\n            side: 2\r\n        });\r\n\r\n        geometry = new THREE.PlaneGeometry(32 * 0.3, 32 * 0.3, 1, 1);\r\n\r\n        this.minusSign = new THREE.Mesh(geometry, material);\r\n        this.minusSign.name = \"minusSign\";\r\n        this.minusSign.userData.depthlevel = 5;\r\n        this.minusSign.position.copy(new THREE.Vector3(-(200 - 32 * 0.5) * 0.5, -(123.6 - 32 * 0.5) * 0.5, 2));\r\n        this.wallFaceMash.add(this.minusSign);\r\n\r\n        this.wallFaceMash.visible = false;\r\n    }\r\n\r\n    /**创建地面片 */\r\n    createGroundMash() {\r\n        let material = new THREE.MeshLambertMaterial({\r\n            color: 0xFFFFFF,\r\n            emissive: 0xFFFFFF,\r\n            depthTest: true,\r\n            side: 2,\r\n            transparent: true,\r\n            opacity: 0.4\r\n        });\r\n        let geometry = new THREE.CircleGeometry(250, 32);\r\n        this.groundFaceMash = new THREE.Mesh(geometry, material);\r\n        this.groundFaceMash.userData.depthlevel = 4;\r\n        this.groundFaceMash.name = \"groundFace\";\r\n        scene.add(this.groundFaceMash);\r\n        this.groundFaceMash.visible = false;\r\n        this.groundFaceMash.rotation.x = THREE.Math.degToRad(90);\r\n    }\r\n\r\n    /**\r\n     * 探面类型显示\r\n     * @param {Number} wallType 0-都不显示 1-显示墙面 2-显示地面\r\n     * @param {Number} zoomType 0-不缩放、要跳转 1-放大 2-缩小\r\n     */\r\n    wallProbeSurfaceVisible(wallType, zoomType) {\r\n\r\n        if (c_isMeasureStatus) wallType = 0; //测量状态不显示探面\r\n        if (!c_isDisplayFace && wallType == 2) wallType = 0;\r\n\r\n        this.wallFaceMash.visible = (wallType === 1);\r\n\r\n        this.groundFaceMash.visible = (wallType === 2);\r\n\r\n        this.textDiv.style.display = this.groundFaceMash.visible ? \"block\" : \"none\";\r\n\r\n        this.plusSign.visible = (zoomType === 1);\r\n\r\n        this.minusSign.visible = (zoomType === 2);\r\n    }\r\n\r\n    /**\r\n     * 地面片上移动\r\n     * @param {Object} obj 射线返回对象\r\n     */\r\n    groundFaceMove(obj) {\r\n\r\n        if (c_isMeasureStatus || !c_isDisplayFace) return; //测量状态不显示移动数据\r\n\r\n        this.isgroundFaceJumpBoo = getJudgeOrZoom(obj, 1);\r\n\r\n        if (this.isgroundFaceJumpBoo) {\r\n\r\n            this.wallProbeSurfaceVisible(2);\r\n\r\n            this.groundFaceMash.position.copy(new THREE.Vector3(obj.point.x, obj.point.y + 50, obj.point.z));\r\n\r\n            this.textDiv.style.display = \"block\";\r\n\r\n            var labelPos = getWorldToScene(obj.point);\r\n\r\n            this.textDiv.style.left = (labelPos.x - 30) + \"px\";\r\n\r\n            this.textDiv.style.top = (labelPos.y - 40) + \"px\";\r\n\r\n            this.textDiv.innerHTML = \"前进 \" + this.xround(getProbeSurfaceDistance(obj), 2) + \" 米\";\r\n\r\n        } else {\r\n\r\n            this.wallProbeSurfaceVisible(0);\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 鼠标在墙面片上移动\r\n     * @param {Object} obj 墙面片对象\r\n     */\r\n    wallFaceMove(obj) {\r\n\r\n        this.wallFaceMash.position.copy(obj.point);\r\n\r\n        let angle = getWallProbeSurfaceAngle(obj);\r\n\r\n        this.wallFaceMash.rotation.y = THREE.Math.degToRad(angle > 180 ? angle - 90 : angle + 90);\r\n\r\n        this.isWallFaceJumpBoo = getJudgeOrZoom(obj, 2);\r\n\r\n        if (!this.isWallFaceJumpBoo) {\r\n\r\n            if (camera.fov != c_Minfov) {\r\n\r\n                this.wallProbeSurfaceVisible(1, 1);\r\n\r\n            } else {\r\n\r\n                this.wallProbeSurfaceVisible(1, 2);\r\n\r\n            }\r\n\r\n        } else {\r\n            this.wallProbeSurfaceVisible(1, 0);\r\n        }\r\n\r\n        let fov = camera.fov / c_Maxfov; //相机缩放比例\r\n\r\n        let dis = (obj.distance - 14) * 0.0015; //0.008是每一米对应缩放比例\r\n\r\n        dis = dis < 0.05 ? 0.05 : dis; //0.05是最小缩放比例\r\n\r\n        dis = dis > 2 ? 2 : dis; //3是最大缩放比例\r\n\r\n        this.wallFaceMash.scale.set(dis * fov, dis * fov, dis * fov); //缩放\r\n\r\n        if (camera.fov === c_Minfov) {\r\n            this.wallProbeSurfaceVisible(0, 0);\r\n        }\r\n    }\r\n\r\n\r\n    xround(x, num) {\r\n\r\n        return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default SWWallSurfaceModule;"]}]}