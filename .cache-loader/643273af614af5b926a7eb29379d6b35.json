{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxJumpModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxJumpModule.js","mtime":1536828953637},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE */\n\nvar _SWBoxModule = require('./SWBoxModule');\n\nvar _SWBoxModule2 = _interopRequireDefault(_SWBoxModule);\n\nvar _SWHashTable = require('../../tool/SWHashTable');\n\nvar _SWHashTable2 = _interopRequireDefault(_SWHashTable);\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TWEEN = require('@tweenjs/tween.js');\n\n/**\r\n * 全景盒子互相跳转动画\r\n */\n\nvar SWBoxJumpModule = function () {\n        function SWBoxJumpModule() {\n                var _this = this;\n\n                _classCallCheck(this, SWBoxJumpModule);\n\n                this.previousPano = \"\"; //上一个站点ID\n\n                this.panoBox = undefined;\n\n                /**缩略图集合 */\n                this.thumbnailsTable = new _SWHashTable2.default();\n\n                /**图片路径 */\n                this.imageUrl = \"\";\n\n                //初始化10秒后开始在后台慢慢下载所有缩略图\n                var time = setInterval(function () {\n\n                        clearInterval(time);\n\n                        _this.preloadThumbnails();\n                }, 10000);\n        }\n\n        /**\r\n         * 加载缩略图并跳转\r\n         */\n\n\n        _createClass(SWBoxJumpModule, [{\n                key: 'addThumbnail',\n                value: function addThumbnail() {\n                        var _this2 = this;\n\n                        if (this.imageUrl == \"\") {\n                                //由于加载数据需要时间，这个第一次加载缩略图时记录路径\n\n                                this.imageUrl = constants.sw_getService.getmusServerURL().split('/S')[0] + '/panoImages/';\n                        }\n\n                        if (constants.c_StationInfo.panoID != this.previousPano.panoID) {\n                                //同站点跳转忽略\n\n                                var url = '' + this.imageUrl + constants.c_StationInfo.panoID;\n\n                                if (this.thumbnailsTable.containsKey(constants.c_StationInfo.panoID)) {\n                                        //缩略图集合中是否有此站点的图\n\n                                        constants.c_isPreviewImageLoadEnd = true;\n\n                                        var textures = this.thumbnailsTable.getValue(constants.c_StationInfo.panoID); //获取当前站点的缩略图对象\n\n                                        this.createPanoBox(constants.c_StationInfo, url, textures);\n                                } else {\n                                        //集合中没有\n\n                                        this.loadThumbnail(constants.c_StationInfo.panoID, function (texture) {\n\n                                                constants.c_isPreviewImageLoadEnd = true;\n\n                                                _this2.createPanoBox(constants.c_StationInfo, url, texture);\n                                        });\n                                }\n                        }\n\n                        constants.sw_getService.getOldArrow();\n                        constants.sw_getService.getFacadeByPanoID();\n                        constants.sw_getService.getMarkerByPanoID();\n                }\n\n                /**\r\n                 * 创建全景盒子并动画跳转\r\n                 * @param {String} pano 全景站点编号\r\n                 * @param {String} url 路径地址\r\n                 * @param {THREE.Texture} texture 缩略图对象\r\n                 */\n\n        }, {\n                key: 'createPanoBox',\n                value: function createPanoBox(pano, url, texture) {\n                        var _this3 = this;\n\n                        if (!this.panoBox) {\n\n                                this.panoBox = new _SWBoxModule2.default(url, texture);\n                        } else {\n                                this.createSphere(function () {\n\n                                        _this3.panoBox = new _SWBoxModule2.default(url, texture);\n                                });\n                        }\n                        this.previousPano = pano;\n                }\n\n                /**\r\n                 * 将全景盒子映射到球体上并且清除天空盒子产生新的全景天空盒子\r\n                 * @param {Function} callFun 回调函数\r\n                 */\n\n        }, {\n                key: 'createSphere',\n                value: function createSphere(callFun) {\n\n                        constants.cubeCamera.update(constants.renderer, constants.scene);\n\n                        var cubetexture = constants.cubeCamera.renderTarget.texture;\n\n                        var shader = THREE.ShaderLib['cube']; // 来自内置库的init立方体着色器\n                        shader.uniforms['tFlip'].value = 1; //默认值是-1 进行翻转\n                        shader.uniforms['tCube'].value = cubetexture; // 将纹理应用于着色器\n\n                        // 创建着色器材质\n                        var skyBoxMaterial = new THREE.ShaderMaterial({\n                                fragmentShader: shader.fragmentShader,\n                                vertexShader: shader.vertexShader,\n                                uniforms: shader.uniforms,\n                                depthWrite: false,\n                                transparent: true,\n                                side: THREE.DoubleSide\n                        });\n\n                        var geometry = new THREE.SphereGeometry(2048, 32, 32);\n\n                        constants.c_jumpSphere = new THREE.Mesh(geometry, skyBoxMaterial);\n\n                        constants.scene.add(constants.c_jumpSphere);\n\n                        this.panoBox.clearBox();\n\n                        this.panoBox = null;\n\n                        constants.cubeCamera.children.length = 0;\n\n                        this.jumpAnimations(callFun);\n                }\n\n                /**\r\n                 * 跳转拉伸动画\r\n                 * @param {Function} callFun 动画完成之后的回调函数\r\n                 */\n\n        }, {\n                key: 'jumpAnimations',\n                value: function jumpAnimations(callFun) {\n                        var pos1 = this.previousPano.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\n                        var pos2 = constants.c_StationInfo.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\n                        var pos3 = pos1.sub(pos2);\n\n                        var from = { x: 0, y: 0, z: 0, a: 1 };\n                        var to = {\n                                x: (pos3.x * 80 > 1500 ? 1500 : pos3.x * 80 < -1500 ? -1500 : pos3.x * 80) * 1,\n                                y: 0,\n                                z: (pos3.z * 80 > 1500 ? 1500 : pos3.z * 80 < -1500 ? -1500 : pos3.z * 80) * 1,\n                                a: 0\n                        };\n                        new TWEEN.Tween(from).to(to, 800).easing(TWEEN.Easing.Quadratic.Out).onUpdate(function () {\n\n                                constants.c_jumpSphere.position.x = this._object.z;\n\n                                constants.c_jumpSphere.position.z = this._object.x;\n\n                                constants.c_jumpSphere.material.opacity = this._object.a;\n                        }).onComplete(function () {\n\n                                (0, _SWTool.disposeNode)(constants.c_jumpSphere);\n\n                                constants.c_jumpSphere = null;\n\n                                callFun();\n                        }).start();\n                }\n\n                /**\r\n                 * 加载缩略图\r\n                 * @param {String} panoID 站点ID\r\n                 * @param {Function} callfun 回调函数\r\n                 */\n\n        }, {\n                key: 'loadThumbnail',\n                value: function loadThumbnail(panoID, callfun) {\n                        var _this4 = this;\n\n                        var path = '' + this.imageUrl + panoID + '/0/sw_0.jpg';\n\n                        var loader = new THREE.TextureLoader();\n\n                        loader.load(path, function (texture) {\n                                _this4.thumbnailsTable.add(panoID, texture);\n\n                                if (callfun) {\n\n                                        callfun(texture);\n                                }\n                        }, function (xhr) {}, function (xhr) {\n                                console.log('\\u56FE\\u7247\\u52A0\\u8F7D\\u5931\\u8D25\\uFF1A' + path);\n                        });\n                }\n\n                /**\r\n                 * 预加载所有站点的缩略图\r\n                 */\n\n        }, {\n                key: 'preloadThumbnails',\n                value: function preloadThumbnails() {\n                        var _this5 = this;\n\n                        var itemArr = [];\n\n                        var fmt = constants.c_FloorsMapTable.getValues();\n\n                        fmt.forEach(function (element) {\n\n                                var fmi = element.rasterMapMarkers.getValues();\n\n                                fmi.forEach(function (item) {\n\n                                        itemArr.push(item.panoID);\n                                });\n                        });\n\n                        // 生成一个Promise对象的数组\n                        var promises = itemArr.map(function (panoID) {\n\n                                return _this5.loadThumbnail(panoID);\n                        });\n\n                        Promise.all(promises).then(function (result) {\n                                return console.log(result);\n                        }).catch(function (e) {\n                                return console.log(e);\n                        });\n                }\n        }]);\n\n        return SWBoxJumpModule;\n}();\n\nexports.default = SWBoxJumpModule;",{"version":3,"sources":["app\\src\\module\\panoBox\\SWBoxJumpModule.js"],"names":["constants","TWEEN","require","SWBoxJumpModule","previousPano","panoBox","undefined","thumbnailsTable","HashTable","imageUrl","time","setInterval","clearInterval","preloadThumbnails","sw_getService","getmusServerURL","split","c_StationInfo","panoID","url","containsKey","c_isPreviewImageLoadEnd","textures","getValue","createPanoBox","loadThumbnail","texture","getOldArrow","getFacadeByPanoID","getMarkerByPanoID","pano","SWBox","createSphere","callFun","cubeCamera","update","renderer","scene","cubetexture","renderTarget","shader","THREE","ShaderLib","uniforms","value","skyBoxMaterial","ShaderMaterial","fragmentShader","vertexShader","depthWrite","transparent","side","DoubleSide","geometry","SphereGeometry","c_jumpSphere","Mesh","add","clearBox","children","length","jumpAnimations","pos1","point","clone","applyMatrix4","c_DS3ToOpenGLMx4","pos2","pos3","sub","from","x","y","z","a","to","Tween","easing","Easing","Quadratic","Out","onUpdate","position","_object","material","opacity","onComplete","start","callfun","path","loader","TextureLoader","load","xhr","console","log","itemArr","fmt","c_FloorsMapTable","getValues","forEach","fmi","element","rasterMapMarkers","push","item","promises","map","Promise","all","then","result","catch","e"],"mappings":";;;;;;qjBAAA;;AAEA;;;;AACA;;;;AACA;;IAAYA,S;;AACZ;;;;;;;;AACA,IAAMC,QAAQC,QAAQ,mBAAR,CAAd;;AAEA;;;;IAGMC,e;AACF,mCAAc;AAAA;;AAAA;;AACV,qBAAKC,YAAL,GAAoB,EAApB,CADU,CACc;;AAExB,qBAAKC,OAAL,GAAeC,SAAf;;AAEA;AACA,qBAAKC,eAAL,GAAuB,IAAIC,qBAAJ,EAAvB;;AAEA;AACA,qBAAKC,QAAL,GAAgB,EAAhB;;AAEA;AACA,oBAAIC,OAAOC,YAAY,YAAM;;AAEzBC,sCAAcF,IAAd;;AAEA,8BAAKG,iBAAL;AAEH,iBANU,EAMR,KANQ,CAAX;AAQH;;AAED;;;;;;;+CAGe;AAAA;;AAEX,4BAAI,KAAKJ,QAAL,IAAiB,EAArB,EAAyB;AAAE;;AAEvB,qCAAKA,QAAL,GAAmBT,UAAUc,aAAV,CAAwBC,eAAxB,GAA0CC,KAA1C,CAAgD,IAAhD,EAAsD,CAAtD,CAAnB;AACH;;AAED,4BAAIhB,UAAUiB,aAAV,CAAwBC,MAAxB,IAAkC,KAAKd,YAAL,CAAkBc,MAAxD,EAAgE;AAAE;;AAE9D,oCAAIC,WAAS,KAAKV,QAAd,GAAyBT,UAAUiB,aAAV,CAAwBC,MAArD;;AAEA,oCAAI,KAAKX,eAAL,CAAqBa,WAArB,CAAiCpB,UAAUiB,aAAV,CAAwBC,MAAzD,CAAJ,EAAsE;AAAE;;AAEpElB,kDAAUqB,uBAAV,GAAoC,IAApC;;AAEA,4CAAIC,WAAW,KAAKf,eAAL,CAAqBgB,QAArB,CAA8BvB,UAAUiB,aAAV,CAAwBC,MAAtD,CAAf,CAJkE,CAIY;;AAE9E,6CAAKM,aAAL,CAAmBxB,UAAUiB,aAA7B,EAA4CE,GAA5C,EAAiDG,QAAjD;AAEH,iCARD,MAQO;AAAE;;AAEL,6CAAKG,aAAL,CAAmBzB,UAAUiB,aAAV,CAAwBC,MAA3C,EAAmD,UAACQ,OAAD,EAAa;;AAE5D1B,0DAAUqB,uBAAV,GAAoC,IAApC;;AAEA,uDAAKG,aAAL,CAAmBxB,UAAUiB,aAA7B,EAA4CE,GAA5C,EAAiDO,OAAjD;AACH,yCALD;AAMH;AACJ;;AAED1B,kCAAUc,aAAV,CAAwBa,WAAxB;AACA3B,kCAAUc,aAAV,CAAwBc,iBAAxB;AACA5B,kCAAUc,aAAV,CAAwBe,iBAAxB;AACH;;AAED;;;;;;;;;8CAMcC,I,EAAMX,G,EAAKO,O,EAAS;AAAA;;AAC9B,4BAAI,CAAC,KAAKrB,OAAV,EAAmB;;AAEf,qCAAKA,OAAL,GAAe,IAAI0B,qBAAJ,CAAUZ,GAAV,EAAeO,OAAf,CAAf;AAEH,yBAJD,MAIO;AACH,qCAAKM,YAAL,CAAkB,YAAM;;AAEpB,+CAAK3B,OAAL,GAAe,IAAI0B,qBAAJ,CAAUZ,GAAV,EAAeO,OAAf,CAAf;AACH,iCAHD;AAIH;AACD,6BAAKtB,YAAL,GAAoB0B,IAApB;AACH;;AAED;;;;;;;6CAIaG,O,EAAS;;AAElBjC,kCAAUkC,UAAV,CAAqBC,MAArB,CAA4BnC,UAAUoC,QAAtC,EAAgDpC,UAAUqC,KAA1D;;AAEA,4BAAIC,cAActC,UAAUkC,UAAV,CAAqBK,YAArB,CAAkCb,OAApD;;AAEA,4BAAIc,SAASC,MAAMC,SAAN,CAAgB,MAAhB,CAAb,CANkB,CAMoB;AACtCF,+BAAOG,QAAP,CAAgB,OAAhB,EAAyBC,KAAzB,GAAiC,CAAjC,CAPkB,CAOkB;AACpCJ,+BAAOG,QAAP,CAAgB,OAAhB,EAAyBC,KAAzB,GAAiCN,WAAjC,CARkB,CAQ4B;;AAE9C;AACA,4BAAIO,iBAAiB,IAAIJ,MAAMK,cAAV,CAAyB;AAC1CC,gDAAgBP,OAAOO,cADmB;AAE1CC,8CAAcR,OAAOQ,YAFqB;AAG1CL,0CAAUH,OAAOG,QAHyB;AAI1CM,4CAAY,KAJ8B;AAK1CC,6CAAa,IAL6B;AAM1CC,sCAAMV,MAAMW;AAN8B,yBAAzB,CAArB;;AASA,4BAAIC,WAAW,IAAIZ,MAAMa,cAAV,CAAyB,IAAzB,EAA+B,EAA/B,EAAmC,EAAnC,CAAf;;AAEAtD,kCAAUuD,YAAV,GAAyB,IAAId,MAAMe,IAAV,CAAeH,QAAf,EAAyBR,cAAzB,CAAzB;;AAEA7C,kCAAUqC,KAAV,CAAgBoB,GAAhB,CAAoBzD,UAAUuD,YAA9B;;AAEA,6BAAKlD,OAAL,CAAaqD,QAAb;;AAEA,6BAAKrD,OAAL,GAAe,IAAf;;AAEAL,kCAAUkC,UAAV,CAAqByB,QAArB,CAA8BC,MAA9B,GAAuC,CAAvC;;AAEA,6BAAKC,cAAL,CAAoB5B,OAApB;AAEH;;AAGD;;;;;;;+CAIeA,O,EAAS;AACpB,4BAAI6B,OAAO,KAAK1D,YAAL,CAAkB2D,KAAlB,CAAwBC,KAAxB,GAAgCC,YAAhC,CAA6CjE,UAAUkE,gBAAvD,CAAX;AACA,4BAAIC,OAAOnE,UAAUiB,aAAV,CAAwB8C,KAAxB,CAA8BC,KAA9B,GAAsCC,YAAtC,CAAmDjE,UAAUkE,gBAA7D,CAAX;AACA,4BAAIE,OAAON,KAAKO,GAAL,CAASF,IAAT,CAAX;;AAEA,4BAAIG,OAAO,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcC,GAAG,CAAjB,EAAoBC,GAAG,CAAvB,EAAX;AACA,4BAAIC,KAAK;AACLJ,mCAAG,CAACH,KAAKG,CAAL,GAAS,EAAT,GAAc,IAAd,GAAqB,IAArB,GAA6BH,KAAKG,CAAL,GAAS,EAAT,GAAc,CAAC,IAAf,GAAsB,CAAC,IAAvB,GAA8BH,KAAKG,CAAL,GAAS,EAArE,IAA4E,CAD1E;AAELC,mCAAG,CAFE;AAGLC,mCAAG,CAACL,KAAKK,CAAL,GAAS,EAAT,GAAc,IAAd,GAAqB,IAArB,GAA6BL,KAAKK,CAAL,GAAS,EAAT,GAAc,CAAC,IAAf,GAAsB,CAAC,IAAvB,GAA8BL,KAAKK,CAAL,GAAS,EAArE,IAA4E,CAH1E;AAILC,mCAAG;AAJE,yBAAT;AAMA,4BAAIzE,MAAM2E,KAAV,CAAgBN,IAAhB,EACKK,EADL,CACQA,EADR,EACY,GADZ,EAEKE,MAFL,CAEY5E,MAAM6E,MAAN,CAAaC,SAAb,CAAuBC,GAFnC,EAGKC,QAHL,CAGc,YAAW;;AAEjBjF,0CAAUuD,YAAV,CAAuB2B,QAAvB,CAAgCX,CAAhC,GAAoC,KAAKY,OAAL,CAAaV,CAAjD;;AAEAzE,0CAAUuD,YAAV,CAAuB2B,QAAvB,CAAgCT,CAAhC,GAAoC,KAAKU,OAAL,CAAaZ,CAAjD;;AAEAvE,0CAAUuD,YAAV,CAAuB6B,QAAvB,CAAgCC,OAAhC,GAA0C,KAAKF,OAAL,CAAaT,CAAvD;AAEH,yBAXL,EAYKY,UAZL,CAYgB,YAAM;;AAEd,yDAAYtF,UAAUuD,YAAtB;;AAEAvD,0CAAUuD,YAAV,GAAyB,IAAzB;;AAEAtB;AACH,yBAnBL,EAoBKsD,KApBL;AAqBH;;AAED;;;;;;;;8CAKcrE,M,EAAQsE,O,EAAS;AAAA;;AAE3B,4BAAIC,YAAU,KAAKhF,QAAf,GAA0BS,MAA1B,gBAAJ;;AAEA,4BAAIwE,SAAS,IAAIjD,MAAMkD,aAAV,EAAb;;AAEAD,+BAAOE,IAAP,CAAYH,IAAZ,EACI,UAAC/D,OAAD,EAAa;AACT,uCAAKnB,eAAL,CAAqBkD,GAArB,CAAyBvC,MAAzB,EAAiCQ,OAAjC;;AAEA,oCAAI8D,OAAJ,EAAa;;AAETA,gDAAQ9D,OAAR;AAEH;AACJ,yBATL,EAUI,UAACmE,GAAD,EAAS,CAAE,CAVf,EAWI,UAACA,GAAD,EAAS;AACLC,wCAAQC,GAAR,gDAAsBN,IAAtB;AACH,yBAbL;AAeH;;AAED;;;;;;oDAGoB;AAAA;;AAEhB,4BAAIO,UAAU,EAAd;;AAEA,4BAAIC,MAAMjG,UAAUkG,gBAAV,CAA2BC,SAA3B,EAAV;;AAEAF,4BAAIG,OAAJ,CAAY,mBAAW;;AAEnB,oCAAIC,MAAMC,QAAQC,gBAAR,CAAyBJ,SAAzB,EAAV;;AAEAE,oCAAID,OAAJ,CAAY,gBAAQ;;AAEhBJ,gDAAQQ,IAAR,CAAaC,KAAKvF,MAAlB;AAEH,iCAJD;AAMH,yBAVD;;AAYA;AACA,4BAAMwF,WAAWV,QAAQW,GAAR,CAAY,UAACzF,MAAD,EAAY;;AAErC,uCAAO,OAAKO,aAAL,CAAmBP,MAAnB,CAAP;AAEH,yBAJgB,CAAjB;;AAMA0F,gCAAQC,GAAR,CAAYH,QAAZ,EAAsBI,IAAtB,CAA2B;AAAA,uCAAUhB,QAAQC,GAAR,CAAYgB,MAAZ,CAAV;AAAA,yBAA3B,EAA0DC,KAA1D,CAAgE;AAAA,uCAAKlB,QAAQC,GAAR,CAAYkB,CAAZ,CAAL;AAAA,yBAAhE;AACH;;;;;;kBAGU9G,e","file":"SWBoxJumpModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE */\r\n\r\nimport SWBox from './SWBoxModule';\r\nimport HashTable from '../../tool/SWHashTable';\r\nimport * as constants from '../../tool/SWConstants';\r\nimport { disposeNode } from '../../tool/SWTool';\r\nconst TWEEN = require('@tweenjs/tween.js');\r\n\r\n/**\r\n * 全景盒子互相跳转动画\r\n */\r\nclass SWBoxJumpModule {\r\n    constructor() {\r\n        this.previousPano = \"\"; //上一个站点ID\r\n\r\n        this.panoBox = undefined;\r\n\r\n        /**缩略图集合 */\r\n        this.thumbnailsTable = new HashTable();\r\n\r\n        /**图片路径 */\r\n        this.imageUrl = \"\";\r\n\r\n        //初始化10秒后开始在后台慢慢下载所有缩略图\r\n        let time = setInterval(() => {\r\n\r\n            clearInterval(time);\r\n\r\n            this.preloadThumbnails();\r\n\r\n        }, 10000);\r\n\r\n    }\r\n\r\n    /**\r\n     * 加载缩略图并跳转\r\n     */\r\n    addThumbnail() {\r\n\r\n        if (this.imageUrl == \"\") { //由于加载数据需要时间，这个第一次加载缩略图时记录路径\r\n\r\n            this.imageUrl = `${constants.sw_getService.getmusServerURL().split('/S')[0]}/panoImages/`;\r\n        }\r\n\r\n        if (constants.c_StationInfo.panoID != this.previousPano.panoID) { //同站点跳转忽略\r\n\r\n            let url = `${this.imageUrl}${constants.c_StationInfo.panoID}`;\r\n\r\n            if (this.thumbnailsTable.containsKey(constants.c_StationInfo.panoID)) { //缩略图集合中是否有此站点的图\r\n\r\n                constants.c_isPreviewImageLoadEnd = true;\r\n\r\n                let textures = this.thumbnailsTable.getValue(constants.c_StationInfo.panoID); //获取当前站点的缩略图对象\r\n\r\n                this.createPanoBox(constants.c_StationInfo, url, textures);\r\n\r\n            } else { //集合中没有\r\n\r\n                this.loadThumbnail(constants.c_StationInfo.panoID, (texture) => {\r\n\r\n                    constants.c_isPreviewImageLoadEnd = true;\r\n\r\n                    this.createPanoBox(constants.c_StationInfo, url, texture);\r\n                });\r\n            }\r\n        }\r\n\r\n        constants.sw_getService.getOldArrow();\r\n        constants.sw_getService.getFacadeByPanoID();\r\n        constants.sw_getService.getMarkerByPanoID();\r\n    }\r\n\r\n    /**\r\n     * 创建全景盒子并动画跳转\r\n     * @param {String} pano 全景站点编号\r\n     * @param {String} url 路径地址\r\n     * @param {THREE.Texture} texture 缩略图对象\r\n     */\r\n    createPanoBox(pano, url, texture) {\r\n        if (!this.panoBox) {\r\n\r\n            this.panoBox = new SWBox(url, texture);\r\n\r\n        } else {\r\n            this.createSphere(() => {\r\n\r\n                this.panoBox = new SWBox(url, texture);\r\n            });\r\n        }\r\n        this.previousPano = pano;\r\n    }\r\n\r\n    /**\r\n     * 将全景盒子映射到球体上并且清除天空盒子产生新的全景天空盒子\r\n     * @param {Function} callFun 回调函数\r\n     */\r\n    createSphere(callFun) {\r\n\r\n        constants.cubeCamera.update(constants.renderer, constants.scene);\r\n\r\n        let cubetexture = constants.cubeCamera.renderTarget.texture;\r\n\r\n        let shader = THREE.ShaderLib['cube']; // 来自内置库的init立方体着色器\r\n        shader.uniforms['tFlip'].value = 1; //默认值是-1 进行翻转\r\n        shader.uniforms['tCube'].value = cubetexture; // 将纹理应用于着色器\r\n\r\n        // 创建着色器材质\r\n        let skyBoxMaterial = new THREE.ShaderMaterial({\r\n            fragmentShader: shader.fragmentShader,\r\n            vertexShader: shader.vertexShader,\r\n            uniforms: shader.uniforms,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        let geometry = new THREE.SphereGeometry(2048, 32, 32);\r\n\r\n        constants.c_jumpSphere = new THREE.Mesh(geometry, skyBoxMaterial);\r\n\r\n        constants.scene.add(constants.c_jumpSphere);\r\n\r\n        this.panoBox.clearBox();\r\n\r\n        this.panoBox = null;\r\n\r\n        constants.cubeCamera.children.length = 0;\r\n\r\n        this.jumpAnimations(callFun);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 跳转拉伸动画\r\n     * @param {Function} callFun 动画完成之后的回调函数\r\n     */\r\n    jumpAnimations(callFun) {\r\n        let pos1 = this.previousPano.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\r\n        let pos2 = constants.c_StationInfo.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\r\n        let pos3 = pos1.sub(pos2);\r\n\r\n        let from = { x: 0, y: 0, z: 0, a: 1 };\r\n        let to = {\r\n            x: (pos3.x * 80 > 1500 ? 1500 : (pos3.x * 80 < -1500 ? -1500 : pos3.x * 80)) * 1,\r\n            y: 0,\r\n            z: (pos3.z * 80 > 1500 ? 1500 : (pos3.z * 80 < -1500 ? -1500 : pos3.z * 80)) * 1,\r\n            a: 0\r\n        };\r\n        new TWEEN.Tween(from)\r\n            .to(to, 800)\r\n            .easing(TWEEN.Easing.Quadratic.Out)\r\n            .onUpdate(function() {\r\n\r\n                constants.c_jumpSphere.position.x = this._object.z;\r\n\r\n                constants.c_jumpSphere.position.z = this._object.x;\r\n\r\n                constants.c_jumpSphere.material.opacity = this._object.a;\r\n\r\n            })\r\n            .onComplete(() => {\r\n\r\n                disposeNode(constants.c_jumpSphere);\r\n\r\n                constants.c_jumpSphere = null;\r\n\r\n                callFun();\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 加载缩略图\r\n     * @param {String} panoID 站点ID\r\n     * @param {Function} callfun 回调函数\r\n     */\r\n    loadThumbnail(panoID, callfun) {\r\n\r\n        let path = `${this.imageUrl}${panoID}/0/sw_0.jpg`;\r\n\r\n        let loader = new THREE.TextureLoader();\r\n\r\n        loader.load(path,\r\n            (texture) => {\r\n                this.thumbnailsTable.add(panoID, texture);\r\n\r\n                if (callfun) {\r\n\r\n                    callfun(texture);\r\n\r\n                }\r\n            },\r\n            (xhr) => {},\r\n            (xhr) => {\r\n                console.log(`图片加载失败：${path}`);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 预加载所有站点的缩略图\r\n     */\r\n    preloadThumbnails() {\r\n\r\n        let itemArr = [];\r\n\r\n        let fmt = constants.c_FloorsMapTable.getValues();\r\n\r\n        fmt.forEach(element => {\r\n\r\n            let fmi = element.rasterMapMarkers.getValues();\r\n\r\n            fmi.forEach(item => {\r\n\r\n                itemArr.push(item.panoID);\r\n\r\n            });\r\n\r\n        });\r\n\r\n        // 生成一个Promise对象的数组\r\n        const promises = itemArr.map((panoID) => {\r\n\r\n            return this.loadThumbnail(panoID);\r\n\r\n        });\r\n\r\n        Promise.all(promises).then(result => console.log(result)).catch(e => console.log(e));\r\n    }\r\n}\r\n\r\nexport default SWBoxJumpModule;"]}]}