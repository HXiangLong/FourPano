{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxJumpModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxJumpModule.js","mtime":1547013363757},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE */\n\nvar _SWBoxModule = require('./SWBoxModule');\n\nvar _SWBoxModule2 = _interopRequireDefault(_SWBoxModule);\n\nvar _SWHashTable = require('../../tool/SWHashTable');\n\nvar _SWHashTable2 = _interopRequireDefault(_SWHashTable);\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWBoxPreloadingImage = require('./SWBoxPreloadingImage');\n\nvar _SWBoxPreloadingImage2 = _interopRequireDefault(_SWBoxPreloadingImage);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TWEEN = require('@tweenjs/tween.js');\n\n// import SWLittlePlanetModel from './SWLittlePlanetModel';\n\n/**\r\n * 全景盒子互相跳转动画\r\n */\nvar SWBoxJumpModule = function () {\n    function SWBoxJumpModule() {\n        _classCallCheck(this, SWBoxJumpModule);\n\n        this.previousPano = \"\"; //上一个站点ID\n\n        this.phoneType = true;\n\n        this.panoBox = undefined;\n\n        /**缩略图集合 */\n        this.thumbnailsTable = new _SWHashTable2.default();\n\n        /**图片路径 */\n        this.imageUrl = \"\";\n    }\n\n    /**\r\n     * 加载缩略图并跳转\r\n     */\n\n\n    _createClass(SWBoxJumpModule, [{\n        key: 'addThumbnail',\n        value: function addThumbnail() {\n            var _this = this;\n\n            if (this.imageUrl == \"\") {\n                //由于加载数据需要时间，这个第一次加载缩略图时记录路径\n\n                this.imageUrl = constants.sw_getService.resourcesUrl + '/panoImages/';\n            }\n\n            if (constants.c_StationInfo.panoID != this.previousPano.panoID) {\n                //同站点跳转忽略\n\n                var url = '' + this.imageUrl + constants.c_StationInfo.panoID;\n\n                if (this.thumbnailsTable.containsKey(constants.c_StationInfo.panoID)) {\n                    //缩略图集合中是否有此站点的图\n\n                    var textures = this.thumbnailsTable.getValue(constants.c_StationInfo.panoID); //获取当前站点的缩略图对象\n\n                    this.createPanoBox(constants.c_StationInfo, url, textures);\n                } else {\n                    //集合中没有\n\n                    this.loadThumbnail(constants.c_StationInfo.panoID, function (texture) {\n\n                        _this.createPanoBox(constants.c_StationInfo, url, texture);\n                    });\n                }\n            }\n\n            //小行星\n            // new SWLittlePlanetModel();\n        }\n\n        /**\r\n         * 创建全景盒子并动画跳转\r\n         * @param {String} pano 全景站点编号\r\n         * @param {String} url 路径地址\r\n         * @param {THREE.Texture} texture 缩略图对象\r\n         */\n\n    }, {\n        key: 'createPanoBox',\n        value: function createPanoBox(pano, url, texture) {\n            var _this2 = this;\n\n            constants.sw_getService.getOldArrow();\n\n            constants.sw_getService.getFacadeByPanoID();\n\n            constants.sw_getService.getMarkerByPanoID();\n\n            if (!this.panoBox) {\n\n                this.panoBox = new _SWBoxModule2.default(url, texture);\n\n                //初始化10秒后开始在后台慢慢下载所有缩略图\n                var time = setInterval(function () {\n\n                    clearInterval(time);\n\n                    _this2.preloadThumbnails();\n                }, 10000);\n            } else {\n                this.createSphere(function () {\n\n                    _this2.panoBox = new _SWBoxModule2.default(url, texture);\n                });\n            }\n            this.previousPano = pano;\n        }\n\n        /**\r\n         * 将全景盒子映射到球体上并且清除天空盒子产生新的全景天空盒子\r\n         * @param {Function} callFun 回调函数\r\n         */\n\n    }, {\n        key: 'createSphere',\n        value: function createSphere(callFun) {\n\n            if (constants.c_LowendMachine) {\n                //性能差的手机调用这里\n\n                constants.c_jumpSphere = this.panoBox;\n\n                this.phoneType = false;\n            } else {\n\n                this.phoneType = true;\n\n                constants.cubeCamera.update(constants.renderer, constants.scene);\n\n                var cubetexture = constants.cubeCamera.renderTarget.texture;\n\n                var shader = THREE.ShaderLib['cube']; // 来自内置库的init立方体着色器\n                shader.uniforms['tFlip'].value = 1; //默认值是-1 进行翻转\n                shader.uniforms['tCube'].value = cubetexture; // 将纹理应用于着色器\n\n                //创建着色器材质\n                var skyBoxMaterial = new THREE.ShaderMaterial({\n                    fragmentShader: shader.fragmentShader,\n                    vertexShader: shader.vertexShader,\n                    uniforms: shader.uniforms,\n                    depthWrite: false,\n                    transparent: true,\n                    side: THREE.DoubleSide\n                });\n\n                var geometry = new THREE.SphereGeometry(2048, 32, 32);\n\n                constants.c_jumpSphere = new THREE.Mesh(geometry, skyBoxMaterial);\n\n                constants.scene.add(constants.c_jumpSphere);\n\n                this.panoBox.clearBox();\n\n                this.panoBox = null;\n\n                constants.cubeCamera.children.length = 0;\n            }\n            this.jumpAnimations(callFun);\n        }\n\n        /**\r\n         * 跳转拉伸动画\r\n         * @param {Function} callFun 动画完成之后的回调函数\r\n         */\n\n    }, {\n        key: 'jumpAnimations',\n        value: function jumpAnimations(callFun) {\n            var _this3 = this;\n\n            var pt = this.phoneType;\n            var pos1 = this.previousPano.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\n            var pos2 = constants.c_StationInfo.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\n            var pos3 = pos1.sub(pos2);\n            var juli = 1000;\n\n            var from = {\n                x: 0,\n                y: 0,\n                z: 0,\n                a: 1\n            };\n            var to = {\n                x: (pos3.x * 80 > juli ? juli : pos3.x * 80 < -juli ? -juli : pos3.x * 80) * 1,\n                y: 0,\n                z: (pos3.z * 80 > juli ? juli : pos3.z * 80 < -juli ? -juli : pos3.z * 80) * 1,\n                a: 0\n            };\n            new TWEEN.Tween(from).to(to, 800).easing(TWEEN.Easing.Quadratic.Out).onUpdate(function () {\n\n                if (pt) {\n                    constants.c_jumpSphere.position.x = this._object.z;\n\n                    constants.c_jumpSphere.position.z = this._object.x;\n\n                    constants.c_jumpSphere.material.opacity = this._object.a;\n                } else {\n                    constants.c_jumpSphere.box.position.x = this._object.z;\n\n                    constants.c_jumpSphere.box.position.z = this._object.x;\n                }\n            }).onComplete(function () {\n\n                if (pt) {\n\n                    (0, _SWTool.disposeNode)(constants.c_jumpSphere);\n\n                    constants.c_jumpSphere = null;\n                } else {\n\n                    _this3.panoBox.clearBox();\n\n                    _this3.panoBox = null;\n                }\n                callFun();\n            }).start();\n        }\n\n        /**\r\n         * 加载缩略图\r\n         * @param {String} panoID 站点ID\r\n         * @param {Function} callfun 回调函数\r\n         */\n\n    }, {\n        key: 'loadThumbnail',\n        value: function loadThumbnail(panoID, callfun) {\n            var _this4 = this;\n\n            var path = '' + this.imageUrl + panoID + '/0/sw_0.jpg';\n\n            var loader = new THREE.TextureLoader();\n\n            loader.load(path, function (texture) {\n                _this4.thumbnailsTable.add(panoID, texture);\n\n                if (callfun) {\n\n                    callfun(texture);\n                }\n            }, function (xhr) {}, function (xhr) {\n                console.log('\\u56FE\\u7247\\u52A0\\u8F7D\\u5931\\u8D25\\uFF1A' + path);\n            });\n        }\n\n        /**\r\n         * 预加载所有站点的缩略图\r\n         */\n\n    }, {\n        key: 'preloadThumbnails',\n        value: function preloadThumbnails() {\n            var _this5 = this;\n\n            var itemArr = constants.c_panoIDTable.getKeys();\n\n            // 生成一个Promise对象的数组\n            var promises = itemArr.map(function (panoID) {\n\n                return _this5.loadThumbnail(panoID);\n            });\n\n            Promise.all(promises).then(function (result) {\n                return console.log(result);\n            }).catch(function (e) {\n                return console.log(e);\n            });\n        }\n\n        /**根据箭头关系加载全景 */\n\n    }, {\n        key: 'AccordingArrowLoadPano',\n        value: function AccordingArrowLoadPano() {\n\n            constants.c_AdjacentPanoInfoArr.forEach(function (obj) {\n\n                for (var i = 0; i < 6; i++) {\n\n                    var imageName = 'sw_' + i + '.jpg';\n\n                    new _SWBoxPreloadingImage2.default(obj.dstPanoID, 2, imageName);\n                }\n            });\n        }\n    }]);\n\n    return SWBoxJumpModule;\n}();\n\nexports.default = SWBoxJumpModule;",{"version":3,"sources":["app\\src\\module\\panoBox\\SWBoxJumpModule.js"],"names":["constants","TWEEN","require","SWBoxJumpModule","previousPano","phoneType","panoBox","undefined","thumbnailsTable","HashTable","imageUrl","sw_getService","resourcesUrl","c_StationInfo","panoID","url","containsKey","textures","getValue","createPanoBox","loadThumbnail","texture","pano","getOldArrow","getFacadeByPanoID","getMarkerByPanoID","SWBox","time","setInterval","clearInterval","preloadThumbnails","createSphere","callFun","c_LowendMachine","c_jumpSphere","cubeCamera","update","renderer","scene","cubetexture","renderTarget","shader","THREE","ShaderLib","uniforms","value","skyBoxMaterial","ShaderMaterial","fragmentShader","vertexShader","depthWrite","transparent","side","DoubleSide","geometry","SphereGeometry","Mesh","add","clearBox","children","length","jumpAnimations","pt","pos1","point","clone","applyMatrix4","c_DS3ToOpenGLMx4","pos2","pos3","sub","juli","from","x","y","z","a","to","Tween","easing","Easing","Quadratic","Out","onUpdate","position","_object","material","opacity","box","onComplete","start","callfun","path","loader","TextureLoader","load","xhr","console","log","itemArr","c_panoIDTable","getKeys","promises","map","Promise","all","then","result","catch","e","c_AdjacentPanoInfoArr","forEach","obj","i","imageName","SWBoxPreloadingImage","dstPanoID"],"mappings":"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","file":"SWBoxJumpModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE */\r\n\r\nimport SWBox from './SWBoxModule';\r\nimport HashTable from '../../tool/SWHashTable';\r\nimport * as constants from '../../tool/SWConstants';\r\nimport {\r\n    disposeNode\r\n} from '../../tool/SWTool';\r\nconst TWEEN = require('@tweenjs/tween.js');\r\nimport SWBoxPreloadingImage from './SWBoxPreloadingImage';\r\n// import SWLittlePlanetModel from './SWLittlePlanetModel';\r\n\r\n/**\r\n * 全景盒子互相跳转动画\r\n */\r\nclass SWBoxJumpModule {\r\n    constructor() {\r\n        this.previousPano = \"\"; //上一个站点ID\r\n\r\n        this.phoneType = true;\r\n\r\n        this.panoBox = undefined;\r\n\r\n        /**缩略图集合 */\r\n        this.thumbnailsTable = new HashTable();\r\n\r\n        /**图片路径 */\r\n        this.imageUrl = \"\";\r\n    }\r\n\r\n    /**\r\n     * 加载缩略图并跳转\r\n     */\r\n    addThumbnail() {\r\n\r\n        if (this.imageUrl == \"\") { //由于加载数据需要时间，这个第一次加载缩略图时记录路径\r\n\r\n            this.imageUrl = `${constants.sw_getService.resourcesUrl}/panoImages/`;\r\n        }\r\n\r\n        if (constants.c_StationInfo.panoID != this.previousPano.panoID) { //同站点跳转忽略\r\n\r\n            let url = `${this.imageUrl}${constants.c_StationInfo.panoID}`;\r\n\r\n            if (this.thumbnailsTable.containsKey(constants.c_StationInfo.panoID)) { //缩略图集合中是否有此站点的图\r\n\r\n                let textures = this.thumbnailsTable.getValue(constants.c_StationInfo.panoID); //获取当前站点的缩略图对象\r\n\r\n                this.createPanoBox(constants.c_StationInfo, url, textures);\r\n\r\n            } else { //集合中没有\r\n\r\n                this.loadThumbnail(constants.c_StationInfo.panoID, (texture) => {\r\n\r\n                    this.createPanoBox(constants.c_StationInfo, url, texture);\r\n                });\r\n            }\r\n        }\r\n\r\n        //小行星\r\n        // new SWLittlePlanetModel();\r\n    }\r\n\r\n    /**\r\n     * 创建全景盒子并动画跳转\r\n     * @param {String} pano 全景站点编号\r\n     * @param {String} url 路径地址\r\n     * @param {THREE.Texture} texture 缩略图对象\r\n     */\r\n    createPanoBox(pano, url, texture) {\r\n\r\n        constants.sw_getService.getOldArrow();\r\n\r\n        constants.sw_getService.getFacadeByPanoID();\r\n\r\n        constants.sw_getService.getMarkerByPanoID();\r\n\r\n        if (!this.panoBox) {\r\n\r\n            this.panoBox = new SWBox(url, texture);\r\n\r\n            //初始化10秒后开始在后台慢慢下载所有缩略图\r\n            let time = setInterval(() => {\r\n\r\n                clearInterval(time);\r\n\r\n                this.preloadThumbnails();\r\n\r\n            }, 10000);\r\n\r\n        } else {\r\n            this.createSphere(() => {\r\n\r\n                this.panoBox = new SWBox(url, texture);\r\n            });\r\n        }\r\n        this.previousPano = pano;\r\n    }\r\n\r\n    /**\r\n     * 将全景盒子映射到球体上并且清除天空盒子产生新的全景天空盒子\r\n     * @param {Function} callFun 回调函数\r\n     */\r\n    createSphere(callFun) {\r\n\r\n        if (constants.c_LowendMachine) {//性能差的手机调用这里\r\n\r\n            constants.c_jumpSphere = this.panoBox;\r\n\r\n            this.phoneType = false;\r\n\r\n        } else {\r\n\r\n            this.phoneType = true;\r\n\r\n            constants.cubeCamera.update(constants.renderer, constants.scene);\r\n\r\n            let cubetexture = constants.cubeCamera.renderTarget.texture;\r\n\r\n            let shader = THREE.ShaderLib['cube']; // 来自内置库的init立方体着色器\r\n            shader.uniforms['tFlip'].value = 1; //默认值是-1 进行翻转\r\n            shader.uniforms['tCube'].value = cubetexture; // 将纹理应用于着色器\r\n\r\n            //创建着色器材质\r\n            let skyBoxMaterial = new THREE.ShaderMaterial({\r\n                fragmentShader: shader.fragmentShader,\r\n                vertexShader: shader.vertexShader,\r\n                uniforms: shader.uniforms,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                side: THREE.DoubleSide\r\n            });\r\n\r\n            let geometry = new THREE.SphereGeometry(2048, 32, 32);\r\n\r\n            constants.c_jumpSphere = new THREE.Mesh(geometry, skyBoxMaterial);\r\n\r\n            constants.scene.add(constants.c_jumpSphere);\r\n\r\n            this.panoBox.clearBox();\r\n\r\n            this.panoBox = null;\r\n\r\n            constants.cubeCamera.children.length = 0;\r\n        }\r\n        this.jumpAnimations(callFun);\r\n    }\r\n\r\n\r\n    /**\r\n     * 跳转拉伸动画\r\n     * @param {Function} callFun 动画完成之后的回调函数\r\n     */\r\n    jumpAnimations(callFun) {\r\n        let pt = this.phoneType;\r\n        let pos1 = this.previousPano.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\r\n        let pos2 = constants.c_StationInfo.point.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\r\n        let pos3 = pos1.sub(pos2);\r\n\t\tlet juli = 1000;\r\n\r\n        let from = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0,\r\n            a: 1\r\n        };\r\n        let to = {\r\n            x: (pos3.x * 80 > juli ? juli : (pos3.x * 80 < -juli ? -juli : pos3.x * 80)) * 1,\r\n            y: 0,\r\n            z: (pos3.z * 80 > juli ? juli : (pos3.z * 80 < -juli ? -juli : pos3.z * 80)) * 1,\r\n            a: 0\r\n        };\r\n        new TWEEN.Tween(from)\r\n            .to(to, 800)\r\n            .easing(TWEEN.Easing.Quadratic.Out)\r\n            .onUpdate(function () {\r\n\r\n                if(pt){\r\n                    constants.c_jumpSphere.position.x = this._object.z;\r\n\r\n                    constants.c_jumpSphere.position.z = this._object.x;\r\n    \r\n                    constants.c_jumpSphere.material.opacity = this._object.a;\r\n                }else{\r\n                    constants.c_jumpSphere.box.position.x = this._object.z;\r\n\r\n                    constants.c_jumpSphere.box.position.z = this._object.x;\r\n                }\r\n            })\r\n            .onComplete(() => {\r\n\r\n                if(pt){\r\n\r\n                    disposeNode(constants.c_jumpSphere);\r\n\r\n                    constants.c_jumpSphere = null;\r\n\r\n                }else{\r\n\r\n                    this.panoBox.clearBox();\r\n\r\n                    this.panoBox = null;\r\n                }\r\n                callFun();\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 加载缩略图\r\n     * @param {String} panoID 站点ID\r\n     * @param {Function} callfun 回调函数\r\n     */\r\n    loadThumbnail(panoID, callfun) {\r\n\r\n        let path = `${this.imageUrl}${panoID}/0/sw_0.jpg`;\r\n\r\n        let loader = new THREE.TextureLoader();\r\n\r\n        loader.load(path,\r\n            (texture) => {\r\n                this.thumbnailsTable.add(panoID, texture);\r\n\r\n                if (callfun) {\r\n\r\n                    callfun(texture);\r\n                }\r\n            },\r\n            (xhr) => {},\r\n            (xhr) => {\r\n                console.log(`图片加载失败：${path}`);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 预加载所有站点的缩略图\r\n     */\r\n    preloadThumbnails() {\r\n\r\n        let itemArr = constants.c_panoIDTable.getKeys();\r\n\r\n        // 生成一个Promise对象的数组\r\n        const promises = itemArr.map((panoID) => {\r\n\r\n            return this.loadThumbnail(panoID);\r\n\r\n        });\r\n\r\n        Promise.all(promises).then(result => console.log(result)).catch(e => console.log(e));\r\n    }\r\n\r\n    /**根据箭头关系加载全景 */\r\n    AccordingArrowLoadPano() {\r\n\r\n        constants.c_AdjacentPanoInfoArr.forEach((obj) => {\r\n\r\n            for (let i = 0; i < 6; i++) {\r\n\r\n                let imageName = `sw_${i}.jpg`;\r\n\r\n                new SWBoxPreloadingImage(obj.dstPanoID, 2, imageName);\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default SWBoxJumpModule;"]}]}