{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawLine.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawLine.js","mtime":1537409782294},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1537425210134},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWDrawString = require('./SWDrawString');\n\nvar _SWDrawString2 = _interopRequireDefault(_SWDrawString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 绘制线\r\n */\nvar SWDrawLine = function () {\n        function SWDrawLine() {\n                _classCallCheck(this, SWDrawLine);\n\n                /**起点坐标 */\n                this.startPoint = new THREE.Vector3(0, 0, 0);\n                /**终点坐标*/\n                this.endPoint = new THREE.Vector3(0, 0, 0);\n                /**划分段数 */\n                this.lineAllNum = 10;\n                /**画线整体时间 */\n                this.lineOverTime = 300 / this.lineAllNum;\n                /**计时 */\n                this.lineTimeNum = 0;\n                /**计数 */\n                this.lineNum = 0;\n                /**线宽度 */\n                this.lineWidth = 2;\n                /**线颜色 */\n                this.lineColors = 0xff0000;\n                /**线的线段点 */\n                this.linePointArr = [];\n                /**所有线段集合 */\n                this.lineAllArr = [];\n                /**画线中，请勿打扰 */\n                this.lineTimeBoo = false;\n                /**文本显示 */\n                this.swDrawString = new _SWDrawString2.default();\n                /**文字标记大小 */\n                this.fontSize = 1;\n        }\n\n        /**\r\n         * 新增点击点\r\n         * @param {Vector3} points 点击点坐标\r\n         * @param {Boolean} textBoo 是否显示距离\r\n         */\n\n\n        _createClass(SWDrawLine, [{\n                key: 'addPoint',\n                value: function addPoint(points) {\n                        var _this = this;\n\n                        var textBoo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\n                        this.endPoint.copy(points);\n\n                        var dis = this.startPoint.distanceTo(this.endPoint);\n\n                        if (dis > 0 && this.startPoint.distanceTo(new THREE.Vector3(0, 0, 0)) > 0) {\n\n                                var v1 = this.endPoint.clone().sub(this.startPoint.clone());\n\n                                for (var i = 1; i <= this.lineAllNum; i++) {\n\n                                        var v2 = v1.clone().divideScalar(this.lineAllNum / i);\n\n                                        var segment = this.endPoint.clone().sub(v2);\n\n                                        this.linePointArr.push(segment);\n                                }\n\n                                this.linePointArr.reverse();\n\n                                this.lineTimeBoo = true;\n\n                                if (textBoo) {\n\n                                        var dis1 = Math.ceil(this.endPoint.distanceTo(this.startPoint) * 10) / 100 + \"m\";\n\n                                        this.fontSize = _SWConstants.sw_measure.swDrawPoint.dotRadius * 3;\n\n                                        this.swDrawString.drawString(new THREE.Vector3(this.endPoint.x + _SWConstants.sw_measure.swDrawPoint.dotRadius, this.endPoint.y + _SWConstants.sw_measure.swDrawPoint.dotRadius, this.endPoint.z + _SWConstants.sw_measure.swDrawPoint.dotRadius), dis1, this.fontSize);\n                                }\n                        }\n\n                        this.startPoint.copy(this.endPoint);\n\n                        if (this.linePointArr.length > 0) {\n                                //开始自我计时\n                                this.lineTimeNum = setInterval(function () {\n\n                                        if (_this.lineNum == _this.lineAllNum) {\n\n                                                _this.lineNum = 0;\n\n                                                clearInterval(_this.lineTimeNum);\n\n                                                _this.lineTimeBoo = false;\n\n                                                _this.linePointArr.length = 0;\n\n                                                return;\n                                        }\n\n                                        _this.drawLine(_this.linePointArr[_this.lineNum], _this.lineNum + 1 >= _this.lineAllNum ? _this.endPoint : _this.linePointArr[_this.lineNum + 1]);\n\n                                        _this.lineNum++;\n                                }, this.lineOverTime);\n                        }\n                }\n\n                /**\r\n                 * 绘制线段\r\n                 * @param {Vector3} p1 第一个点坐标\r\n                 * @param {Vector3} p2 第二个点坐标\r\n                 */\n\n        }, {\n                key: 'drawLine',\n                value: function drawLine(p1, p2) {\n\n                        var geometry = new THREE.Geometry();\n\n                        var material = new THREE.LineBasicMaterial({ color: this.lineColors, linewidth: this.lineWidth });\n\n                        geometry.vertices.push(p1);\n\n                        geometry.vertices.push(p2);\n\n                        var line = new THREE.Line(geometry, material);\n\n                        line.position.set(0, 0, 0);\n\n                        _SWConstants.scene.add(line);\n\n                        this.lineAllArr.push(line);\n                }\n\n                /**\r\n                 * 清除点\r\n                 * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n                 */\n\n        }, {\n                key: 'clear',\n                value: function clear() {\n                        var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\n                        var dArr = num == 0 ? this.lineAllArr.splice(0, this.lineAllArr.length) : num < 0 ? this.lineAllArr.splice(num * this.lineAllNum, Math.abs(num * this.lineAllNum)) : this.lineAllArr.splice(0, num * this.lineAllNum);\n\n                        dArr.forEach(function (item) {\n\n                                (0, _SWTool.disposeNode)(item);\n                        });\n\n                        this.startPoint = new THREE.Vector3(0, 0, 0);\n\n                        this.endPoint = new THREE.Vector3(0, 0, 0);\n\n                        this.lineNum = 0;\n\n                        if (this.swDrawString) {\n\n                                this.swDrawString.clear(num);\n                        }\n                }\n        }]);\n\n        return SWDrawLine;\n}();\n\nexports.default = SWDrawLine;",null]}