{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallFaceModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallFaceModule.js","mtime":1545186605247},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWInitializeInstance = require('../../tool/SWInitializeInstance');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 激光点云墙面片\r\n */\nvar SWWallFaceModule = function () {\n    function SWWallFaceModule(obj) {\n        _classCallCheck(this, SWWallFaceModule);\n\n        this.info = obj; //面片数据\n        this.points = [];\n        this.startPoint = new THREE.Vector2();\n        this.wallmesh = undefined;\n\n        this.drawWallFace();\n    }\n\n    /**\r\n     * 绘制墙面片\r\n     */\n\n\n    _createClass(SWWallFaceModule, [{\n        key: 'drawWallFace',\n        value: function drawWallFace() {\n\n            var sif = _SWConstants.c_StationInfo.point.clone();\n\n            this.points.p1 = new THREE.Vector3(this.info.points.p1.x - sif.x, this.info.points.p1.y - sif.y, this.info.points.p1.z - sif.z);\n            this.points.p2 = new THREE.Vector3(this.info.points.p2.x - sif.x, this.info.points.p2.y - sif.y, this.info.points.p2.z - sif.z);\n            this.points.p3 = new THREE.Vector3(this.info.points.p3.x - sif.x, this.info.points.p3.y - sif.y, this.info.points.p3.z - sif.z);\n            this.points.p4 = new THREE.Vector3(this.info.points.p4.x - sif.x, this.info.points.p4.y - sif.y, this.info.points.p4.z - sif.z);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: (0, _SWTool.getRandomColor)(),\n                depthTest: true,\n                side: 2,\n                transparent: true,\n                opacity: 0\n            });\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices.push(new THREE.Vector3(this.points.p1.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p1.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p1.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p2.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p2.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p2.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p3.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p3.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p3.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p4.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p4.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p4.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n\n            var face = new THREE.Face3(0, 1, 2);\n            var face1 = new THREE.Face3(2, 3, 0);\n            geometry.faces.push(face);\n            geometry.faces.push(face1);\n            geometry.computeFaceNormals();\n\n            this.wallmesh = new THREE.Mesh(geometry, material);\n            this.wallmesh.rotation.y = THREE.Math.degToRad(90);\n            this.wallmesh.rotation.z = THREE.Math.degToRad(180);\n            this.wallmesh.userData.depthlevel = 2;\n            this.wallmesh.name = this.info.facadeID;\n            _SWConstants.scene.add(this.wallmesh);\n\n            this.wallMouseEvent();\n        }\n\n        /**墙面面片鼠标事件 */\n\n    }, {\n        key: 'wallMouseEvent',\n        value: function wallMouseEvent() {\n            var _this = this;\n\n            //鼠标进入\n            this.wallmesh.mouseOver = function (e, obj) {\n\n                _SWConstants.sw_wallProbeSurface.wallProbeSurfaceVisible(1);\n            };\n\n            //出去\n            this.wallmesh.mouseOut = function (e, obj) {\n\n                _SWConstants.sw_wallProbeSurface.wallProbeSurfaceVisible(0);\n            };\n\n            //移动\n            this.wallmesh.mouseMove = function (e, obj) {\n\n                _SWConstants.sw_wallProbeSurface.wallFaceMove(obj);\n            };\n\n            //鼠标弹起\n            this.wallmesh.mouseUp = function (e, obj) {\n\n                var event = e || window.event;\n\n                var v3 = new THREE.Vector2(event.clientX, event.clientY);\n\n                var boo = v3.equals(_this.startPoint);\n\n                if (boo) {\n                    //测量状态开启\n                    if (_SWConstants.c_isMeasureStatus) {\n                        _SWConstants.sw_measure.addPoint(obj, 1);\n                        return;\n                    }\n\n                    if (_SWConstants.sw_wallProbeSurface.isWallFaceJumpBoo) {\n\n                        var realPoint1 = obj.point.clone().applyMatrix4(obj.object.matrix).applyMatrix4(_SWConstants.c_OpenGLToDS3Mx4);\n\n                        var realPoint = new THREE.Vector3(_SWConstants.c_StationInfo.nx + realPoint1.x / 10, _SWConstants.c_StationInfo.ny + realPoint1.y / 10, _SWConstants.c_StationInfo.nz + realPoint1.z / 10);\n\n                        _SWConstants.c_wallClickRotateV3.copy(realPoint);\n\n                        if (!_SWConstants.c_isPreviewImageLoadEnd) {\n                            //缩略图加载完毕\n\n                            (0, _SWInitializeInstance.deleteAll)(); //清除所有\n\n                            if (_SWConstants.c_currentState != _SWConstants.c_currentStateEnum.editorStatus && _SWConstants.sw_GetSQLData.facadeIDTable.containsKey(obj.object.name)) {\n                                //读取本地版本\n\n                                var pointV3 = new THREE.Vector3(realPoint.x, realPoint.y, realPoint.z);\n\n                                var panoidArr = _SWConstants.sw_GetSQLData.facadeIDTable.getValue(obj.object.name); //获取关联此面片所有站点\n\n                                var shortestNum = 1000000;\n\n                                var panoID = \"\";\n\n                                panoidArr.forEach(function (ids, idx) {\n\n                                    var panoObj = _SWConstants.sw_GetSQLData.GetPanoByIDTable.getValue(ids);\n\n                                    var short = pointV3.clone().distanceTo(new THREE.Vector3(parseFloat(panoObj.X), parseFloat(panoObj.Y), parseFloat(panoObj.Z)));\n\n                                    if (short < shortestNum) {\n\n                                        shortestNum = short;\n\n                                        panoID = panoObj.ImageID;\n                                    }\n                                });\n\n                                _SWConstants.sw_getService.getOtherPanoByFacadeID({\n                                    \"type\": 1,\n                                    \"panoID\": panoID\n                                });\n\n                                return;\n                            }\n\n                            _SWConstants.sw_getService.getOtherPanoByFacadeID({ //网络版本\n                                \"type\": 2,\n                                \"x\": realPoint.x,\n                                \"y\": realPoint.y,\n                                \"z\": realPoint.z,\n                                \"facadeid\": obj.object.name\n                            });\n                        }\n                    } else {\n\n                        var vp = (0, _SWTool.Vector3ToVP)(obj.point.clone());\n\n                        // setCameraAngle(vp.Yaw, vp.Pitch, true);//看向点击点\n\n                        _SWConstants.sw_cameraManage.setWallWheel();\n                    }\n                }\n            };\n\n            //鼠标按下\n            this.wallmesh.mouseDown = function (e) {\n\n                var event = e || window.event;\n\n                _this.startPoint.x = event.clientX;\n\n                _this.startPoint.y = event.clientY;\n            };\n        }\n\n        /**清除墙面片 */\n\n    }, {\n        key: 'clearWallMesh',\n        value: function clearWallMesh() {\n            (0, _SWTool.disposeNode)(this.wallmesh);\n        }\n    }]);\n\n    return SWWallFaceModule;\n}();\n\nexports.default = SWWallFaceModule;",null]}