{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxJumpModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxJumpModule.js","mtime":1529025782960},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE */\n\nvar _SWBoxModule = require('./SWBoxModule');\n\nvar _SWBoxModule2 = _interopRequireDefault(_SWBoxModule);\n\nvar _SWHashTable = require('../../tool/SWHashTable');\n\nvar _SWHashTable2 = _interopRequireDefault(_SWHashTable);\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TWEEN = require('@tweenjs/tween.js');\n\n/**\r\n * 全景盒子互相跳转动画\r\n */\n\nvar SWBoxJumpModule = function () {\n        function SWBoxJumpModule() {\n                var _this = this;\n\n                _classCallCheck(this, SWBoxJumpModule);\n\n                this.previousPano = \"\"; //上一个站点ID\n\n                this.panoBox = undefined;\n\n                this.sphere = undefined;\n\n                /**缩略图集合 */\n                this.thumbnailsTable = new _SWHashTable2.default();\n\n                /**图片路径 */\n                this.imageUrl = \"\";\n\n                //初始化10秒后开始在后台慢慢下载所有缩略图\n                var time = setInterval(function () {\n\n                        clearInterval(time);\n\n                        _this.preloadThumbnails();\n\n                        _this.createSphere();\n                }, 10000);\n        }\n\n        /**\r\n         * 加载缩略图并跳转\r\n         */\n\n\n        _createClass(SWBoxJumpModule, [{\n                key: 'addThumbnail',\n                value: function addThumbnail() {\n                        var _this2 = this;\n\n                        if (this.imageUrl == \"\") {\n                                //由于加载数据需要时间，这个第一次加载缩略图时记录路径\n\n                                this.imageUrl = _SWConstants.sw_getService.getmusServerURL().split('/S')[0] + '/panoImages/';\n                        }\n\n                        if (_SWConstants.c_StationInfo.panoID != this.previousPano) {\n                                //同站点跳转忽略\n\n                                // c_isPreviewImageLoadEnd = true;\n\n                                var url = '' + this.imageUrl + _SWConstants.c_StationInfo.panoID;\n\n                                if (this.thumbnailsTable.containsKey(_SWConstants.c_StationInfo.panoID)) {\n                                        //缩略图集合中是否有此站点的图\n\n                                        var textures = this.thumbnailsTable.getValue(_SWConstants.c_StationInfo.panoID); //获取当前站点的缩略图对象\n\n                                        this.createPanoBox(_SWConstants.c_StationInfo, url, textures);\n                                } else {\n                                        //集合中没有\n\n                                        this.loadThumbnail(_SWConstants.c_StationInfo.panoID, function (texture) {\n\n                                                _this2.createPanoBox(_SWConstants.c_StationInfo, url, texture);\n                                        });\n                                }\n                        }\n                }\n\n                /**\r\n                 * 创建全景盒子并动画跳转\r\n                 * @param {String} pano 全景站点编号\r\n                 * @param {String} url 路径地址\r\n                 * @param {THREE.Texture} texture 缩略图对象\r\n                 */\n\n        }, {\n                key: 'createPanoBox',\n                value: function createPanoBox(pano, url, texture) {\n                        this.previousPano = pano;\n\n                        if (!this.panoBox) {\n\n                                this.panoBox = new _SWBoxModule2.default(url, texture);\n                        } else {\n                                this.createSphere();\n                        }\n                }\n\n                /**\r\n                 * 将全景盒子映射到球体上并且清除天空盒子产生新的全景天空盒子\r\n                 */\n\n        }, {\n                key: 'createSphere',\n                value: function createSphere() {\n\n                        _SWConstants.cubeCamera.update(_SWConstants.renderer, _SWConstants.scene);\n\n                        var cubetexture = _SWConstants.cubeCamera.renderTarget.texture;\n\n                        var material = new THREE.MeshBasicMaterial({\n                                envMap: cubetexture,\n                                side: THREE.BackSide\n                        });\n\n                        material.envMap.mapping = THREE.CubeRefractionMapping;\n\n                        this.sphere = new THREE.Mesh(new THREE.IcosahedronBufferGeometry(_SWConstants.c_FaceDistance * 0.5, 3), material);\n\n                        _SWConstants.scene.add(this.sphere);\n\n                        this.panoBox.clearBox();\n\n                        // this.jumpAnimations();\n                }\n\n                /**\r\n                 * 跳转拉伸动画\r\n                 */\n\n        }, {\n                key: 'jumpAnimations',\n                value: function jumpAnimations() {\n                        var pos1 = this.previousPano.point.clone().applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4);\n                        var pos2 = _SWConstants.c_StationInfo.point.clone().applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4);\n                        var pos3 = pos1.sub(pos2);\n\n                        var from = { x: 0, y: 0, z: 0, a: 1 };\n                        var to = {\n                                x: pos3.x * 100 > 1000 ? 1000 : pos3.x * 100 < -1000 ? -1000 : pos3.x * 100,\n                                y: 0,\n                                z: pos3.z * 100 > 1000 ? 1000 : pos3.z * 100 < -1000 ? -1000 : pos3.z * 100,\n                                a: 0\n                        };\n                        new TWEEN.Tween(from).to(to, 800).easing(TWEEN.Easing.Quadratic.Out).onUpdate(function () {\n                                this.sphere.position.copy(new THREE.Vector3(this.z, this.y, this.x));\n                        }).onComplete(function () {}).start();\n                }\n\n                /**\r\n                 * 加载缩略图\r\n                 * @param {String} panoID 站点ID\r\n                 * @param {Function} callfun 回调函数\r\n                 */\n\n        }, {\n                key: 'loadThumbnail',\n                value: function loadThumbnail(panoID, callfun) {\n                        var _this3 = this;\n\n                        var path = '' + this.imageUrl + panoID + '/0/sw_0.jpg';\n\n                        var loader = new THREE.TextureLoader();\n\n                        loader.load(path, function (texture) {\n                                _this3.thumbnailsTable.add(panoID, texture);\n\n                                if (callfun) {\n\n                                        callfun(texture);\n                                }\n                        }, function (xhr) {}, function (xhr) {\n                                console.log('\\u56FE\\u7247\\u52A0\\u8F7D\\u5931\\u8D25\\uFF1A' + path);\n                        });\n                }\n\n                /**\r\n                 * 预加载所有站点的缩略图\r\n                 */\n\n        }, {\n                key: 'preloadThumbnails',\n                value: function preloadThumbnails() {\n                        var _this4 = this;\n\n                        var itemArr = [];\n\n                        var fmt = _SWConstants.c_FloorsMapTable.getValues();\n\n                        fmt.forEach(function (element) {\n\n                                var fmi = element.rasterMapMarkers.getValues();\n\n                                fmi.forEach(function (item) {\n\n                                        itemArr.push(item.panoID);\n                                });\n                        });\n\n                        // 生成一个Promise对象的数组\n                        var promises = itemArr.map(function (panoID) {\n\n                                return _this4.loadThumbnail(panoID);\n                        });\n\n                        Promise.all(promises).then(function (result) {\n                                return console.log(result);\n                        }).catch(function (e) {\n                                return console.log(e);\n                        });\n                }\n        }]);\n\n        return SWBoxJumpModule;\n}();\n\nexports.default = SWBoxJumpModule;",null]}