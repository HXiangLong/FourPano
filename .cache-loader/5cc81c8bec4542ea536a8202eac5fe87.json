{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","mtime":1541411762047},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global $*/\n\nvar _SWConstants = require('../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWArrowInfo = require('../data/SWArrowInfo');\n\nvar _SWArrowInfo2 = _interopRequireDefault(_SWArrowInfo);\n\nvar _SWFacadeByPanoIDInfo = require('../data/SWFacadeByPanoIDInfo');\n\nvar _SWFacadeByPanoIDInfo2 = _interopRequireDefault(_SWFacadeByPanoIDInfo);\n\nvar _SWFloorsInfo = require('../data/SWFloorsInfo');\n\nvar _SWFloorsInfo2 = _interopRequireDefault(_SWFloorsInfo);\n\nvar _SWMarkerInfo = require('../data/SWMarkerInfo');\n\nvar _SWMarkerInfo2 = _interopRequireDefault(_SWMarkerInfo);\n\nvar _SWMultiDataByParentIDInfo = require('../data/SWMultiDataByParentIDInfo');\n\nvar _SWMultiDataByParentIDInfo2 = _interopRequireDefault(_SWMultiDataByParentIDInfo);\n\nvar _SWThumbnailsInfo = require('../data/SWThumbnailsInfo');\n\nvar _SWThumbnailsInfo2 = _interopRequireDefault(_SWThumbnailsInfo);\n\nvar _SWStationInfo = require('../data/SWStationInfo');\n\nvar _SWStationInfo2 = _interopRequireDefault(_SWStationInfo);\n\nvar _SWAllExhibitsForBuilding = require('../data/SWAllExhibitsForBuilding');\n\nvar _SWAllExhibitsForBuilding2 = _interopRequireDefault(_SWAllExhibitsForBuilding);\n\nvar _SWVideosData = require('../data/SWVideosData');\n\nvar _SWVideosData2 = _interopRequireDefault(_SWVideosData);\n\nvar _SWExhibitComment = require('../data/SWExhibitComment');\n\nvar _SWExhibitComment2 = _interopRequireDefault(_SWExhibitComment);\n\nvar _SWInitializeInstance = require('../tool/SWInitializeInstance');\n\nvar _store2 = require('../../views/redux/store/store');\n\nvar _store3 = _interopRequireDefault(_store2);\n\nvar _action = require('../../views/redux/action');\n\nvar _SWHashTable = require('../tool/SWHashTable');\n\nvar _SWHashTable2 = _interopRequireDefault(_SWHashTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../tool/SWExternalConst.js');\nvar axios = require('axios');\n\n/**\r\n * 获取服务器数据\r\n */\n\nvar ServerData = function () {\n    function ServerData() {\n        _classCallCheck(this, ServerData);\n\n        /**博物馆ID*/\n        this.museumID = \"\";\n        /**建筑ID*/\n        this.displayID = \"\";\n        /**底层数据库链接*/\n        this.serverURL = \"\";\n        /**业务数据库链接*/\n        this.musServerURL = \"\";\n        /**默认第一站全景ID*/\n        this.firstPanoID = \"\";\n        /**数据存放处*/\n        this.resourcesUrl = \"\";\n        /**功能对象*/\n        this.featuresObj = {};\n        /**只加载一次 */\n        this.floorsForBuilding = true;\n    }\n\n    _createClass(ServerData, [{\n        key: 'getmusServerURL',\n        value: function getmusServerURL() {\n            return this.musServerURL;\n        }\n\n        /**\r\n         * 获取配置文件数据\r\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n\n            this.museumID = external.server_json.museumID;\n\n            this.displayID = external.server_json.displayID;\n\n            this.serverURL = external.server_json.serverUrl;\n\n            this.musServerURL = external.server_json.musServerUrl;\n\n            this.firstPanoID = external.server_json.firstPanoID;\n\n            this.resourcesUrl = external.server_json.resourcesUrl;\n\n            this.featuresObj = external.server_json.data;\n\n            this.getPanoByID(this.firstPanoID);\n        }\n\n        /**\r\n         * 获得所有楼层站点信息\r\n         */\n\n    }, {\n        key: 'getAllFloorsForBuilding',\n        value: function getAllFloorsForBuilding() {\n            var _this = this;\n\n            var urls = this.musServerURL + '?method=GetAllFloorsForBuilding&buildingID=' + this.displayID + '&random=' + Math.random() * 10;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.Floors) {\n\n                    json.data.Floors.forEach(function (obj) {\n\n                        new _SWFloorsInfo2.default(obj);\n                    });\n\n                    //数据来之后可以显示小地图\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_PanoMap_fun)({\n                        off: true\n                    }));\n                }\n\n                _this.getAllThumbnailsForMuseum();\n                _this.getAllExhibitsForBuilding();\n                _this.getAllVideos();\n            });\n        }\n\n        /**\r\n         * 获得当前站点信息\r\n         * @param {String} panoid 站点ID\r\n         */\n\n    }, {\n        key: 'getPanoByID',\n        value: function getPanoByID(panoid) {\n            var _this2 = this;\n\n            var urls = this.serverURL + '/GetPanoByID?ImageID=' + panoid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.GetPanoByIDResult) {\n\n                    if (!constants.c_StationInfo || constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetPanoByIDResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetPanoByIDResult);\n\n                        constants.sw_skyBox.addThumbnail();\n\n                        if (_this2.floorsForBuilding) {\n\n                            _this2.floorsForBuilding = false;\n\n                            _this2.getAllFloorsForBuilding();\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 激光点云面片数据\r\n         * */\n\n    }, {\n        key: 'getFacadeByPanoID',\n        value: function getFacadeByPanoID() {\n\n            var urls = this.serverURL + '/GetFacadeByPanoID/?Z=' + constants.c_StationInfo.nz + '&PanoID=' + constants.c_StationInfo.panoID + '&TolerateZ=5';\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetFacadeByPanoIDResult) {\n\n                    constants.c_facadeByPanoIDInfoArr.length = 0;\n\n                    json.data.GetFacadeByPanoIDResult.forEach(function (obj) {\n\n                        constants.c_facadeByPanoIDInfoArr.push(new _SWFacadeByPanoIDInfo2.default(obj));\n                    });\n\n                    constants.sw_wallMesh.createWallFace();\n                }\n            });\n        }\n\n        /**\r\n         * 获取老箭头方法\r\n         * */\n\n    }, {\n        key: 'getOldArrow',\n        value: function getOldArrow() {\n            var _this3 = this;\n\n            var urls = this.serverURL + '/GetAdjacentPano/?date=' + Math.random() * 100 + '&ImageID=' + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.GetAdjacentPanoResult) {\n\n                    constants.c_AdjacentPanoInfoArr.length = 0;\n\n                    json.data.GetAdjacentPanoResult.forEach(function (obj) {\n\n                        constants.c_AdjacentPanoInfoArr.push(new _SWArrowInfo2.default(obj, 1));\n                    });\n\n                    (0, _SWInitializeInstance.AddOldArrow)();\n                } else {\n\n                    _this3.getNewArrow();\n                }\n            });\n        }\n\n        //获得新箭头\n\n    }, {\n        key: 'getNewArrow',\n        value: function getNewArrow() {\n\n            var urls = this.musServerURL + '?method=getLinkByPanoID&panoID=' + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                constants.c_ArrowPanoInfoArr.length = 0;\n\n                if (json.data.Link) {\n\n                    json.data.Link.forEach(function (obj) {\n\n                        constants.c_ArrowPanoInfoArr.push(new _SWArrowInfo2.default(obj, 2));\n                    });\n\n                    (0, _SWInitializeInstance.AddNewArrow)();\n                }\n            });\n        }\n\n        /**\r\n         * 地面跳转\r\n         * */\n\n    }, {\n        key: 'getOtherPanoByPosition',\n        value: function getOtherPanoByPosition(x, y, z, panoid) {\n\n            var urls = this.serverURL + '/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=' + z + '&Y=' + y + '&ImageID=' + panoid + '&X=' + x;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetOtherPanoByPositionResult) {\n\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByPositionResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetOtherPanoByPositionResult);\n\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 墙面跳转\r\n         * @param {Number} x 3DS坐标X\r\n         * @param {Number} y 3DS坐标Y\r\n         * @param {Number} z 3DS坐标Z\r\n         * @param {Number} facadeid 点击跳转的墙面片ID\r\n         */\n\n    }, {\n        key: 'getOtherPanoByFacadeID',\n        value: function getOtherPanoByFacadeID(x, y, z, facadeid) {\n\n            var urls = this.serverURL + '/GetOtherPanoByFacadeID?facadeID=' + facadeid + '&Z=' + z + '&Y=' + y + '&X=' + x;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetOtherPanoByFacadeIDResult) {\n\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByFacadeIDResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_isWallClickRotateBoo = true;\n\n                        constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetOtherPanoByFacadeIDResult);\n\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取标注\r\n         * */\n\n    }, {\n        key: 'getMarkerByPanoID',\n        value: function getMarkerByPanoID() {\n\n            constants.c_markerInfoArr.length = 0;\n\n            var urls = this.musServerURL + '?method=getMarkerByPanoID&panoID=' + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.MarkerInfo) {\n\n                    json.data.MarkerInfo.forEach(function (obj) {\n\n                        constants.c_markerInfoArr.push(new _SWMarkerInfo2.default(obj));\n                    });\n                }\n            });\n        }\n\n        /**\r\n         * 获取推荐展厅数据\r\n         * */\n\n    }, {\n        key: 'getAllThumbnailsForMuseum',\n        value: function getAllThumbnailsForMuseum() {\n            if (constants.c_isEditorStatus || constants.c_thumbnailsForMuseum.length > 0) {\n                return;\n            }\n            var urls = this.musServerURL + '?method=GetAllThumbnailsForBuilding&buildingID=' + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.thumbnails) {\n\n                    json.data.thumbnails.forEach(function (obj) {\n\n                        constants.c_thumbnailsForMuseum.push(new _SWThumbnailsInfo2.default(obj));\n                    });\n\n                    if (constants.c_thumbnailsShow) {\n                        //数据来之后可以弹出展厅列表\n                        var store = (0, _store3.default)();\n\n                        store.dispatch((0, _action.show_Thumbnails_fun)(true));\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取所有文物信息列表\r\n         * */\n\n    }, {\n        key: 'getAllExhibitsForBuilding',\n        value: function getAllExhibitsForBuilding() {\n            var urls = this.musServerURL + '?method=GetAllExhibitsForBuilding&buildingID=' + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Exhibits) {\n\n                    json.data.Exhibits.forEach(function (obj) {\n\n                        var allExhibits = new _SWAllExhibitsForBuilding2.default(obj);\n\n                        var markerIDArr = allExhibits.markerID[0];\n\n                        constants.c_allExhibitsForBuildingTable.add(markerIDArr, allExhibits);\n                    });\n                }\n            });\n        }\n\n        /**\r\n         * 获取单个文物信息\r\n         * */\n\n    }, {\n        key: 'getMultiDataByParentID',\n        value: function getMultiDataByParentID(eid, type) {\n            var _this4 = this;\n\n            var urls = this.musServerURL + '?method=GetMultiDataByParentID&parentID=' + eid;\n            var muType = type;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.MultiDatas) {\n\n                    var arr = [];\n\n                    json.data.MultiDatas.forEach(function (obj) {\n\n                        var multiData = new _SWMultiDataByParentIDInfo2.default(obj);\n\n                        arr.push(multiData);\n                    });\n\n                    constants.c_multiDataByParentIDTable.add(eid, arr);\n\n                    if (muType == 1) {\n                        //图文\n\n                        var store = (0, _store3.default)();\n\n                        store.dispatch((0, _action.show_MarkerInterface_fun)({\n                            imglist: arr\n                        }));\n                    } else {\n                        //图片\n                        var markerImgList = [],\n                            markerthumbs = [];\n\n                        arr.forEach(function (item) {\n                            var imgUrl = _this4.resourcesUrl + '/' + item.filePath;\n\n                            var arr1 = item.filePath.split('/');\n\n                            var pp = _this4.resourcesUrl + '/' + arr1[0] + '/' + arr1[1] + '/' + arr1[2] + '/phone/' + arr1[3];\n\n                            markerImgList.push(imgUrl);\n\n                            markerthumbs.push(pp);\n                        });\n\n                        var _store = (0, _store3.default)();\n\n                        _store.dispatch((0, _action.show_ViewPicture_fun)({\n                            off: true,\n                            idx: 0,\n                            imageList: markerImgList,\n                            thumbs: markerthumbs\n                        }));\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取所有视频列表\r\n         * */\n\n    }, {\n        key: 'getAllVideos',\n        value: function getAllVideos() {\n            var urls = this.musServerURL + '?method=getAllVideos';\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.videoInfo) {\n\n                    json.data.videoInfo.forEach(function (obj) {\n\n                        var vd = new _SWVideosData2.default(obj);\n\n                        constants.c_allVideoTable.add(vd.videoName, vd);\n                    });\n                }\n            });\n        }\n\n        /**获取喜欢数 */\n\n    }, {\n        key: 'GetLikesForExhibitID',\n        value: function GetLikesForExhibitID(exhibitid) {\n            var urls = this.musServerURL + '?method=GetLikesForExhibitID&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Likes) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.Likes = json.data.Likes;\n                        }\n                    });\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        likeNum: json.data.Likes\n                    }));\n                }\n            });\n        }\n\n        /**新增喜欢数 */\n\n    }, {\n        key: 'SetLikesForExhibitID',\n        value: function SetLikesForExhibitID(exhibitid) {\n            var urls = this.musServerURL + '?method=SetLikesForExhibitID&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Likes) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.likes = json.data.Likes;\n                        }\n                    });\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        likeNum: json.data.Likes\n                    }));\n                }\n            });\n        }\n\n        /**新增评论 按照文物列表exhibitid*/\n\n    }, {\n        key: 'AddComment',\n        value: function AddComment(exhibitid, contents) {\n\n            var urls = this.musServerURL + '?method=AddComment&panoid=&uid=&exhibitid=' + exhibitid + '&contents=' + contents;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Message) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.commentNum = parseInt(json.data.Message);\n                        }\n                    });\n                }\n            });\n        }\n\n        /**查询总数 */\n\n    }, {\n        key: 'SelectCommentNum',\n        value: function SelectCommentNum(exhibitid) {\n            var urls = this.musServerURL + '?method=SelectCommentNum&panoid=&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Message) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.commentNum = parseInt(json.data.Message);\n                        }\n                    });\n                }\n            });\n        }\n\n        /**查询最新评论20条 */\n\n    }, {\n        key: 'GetNewestComment',\n        value: function GetNewestComment(exhibitid) {\n            var urls = this.musServerURL + '?method=GetNewestComment&panoid=&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Message) {\n\n                    // let commentTable = new HashTable();\n\n                    // let exhibitID = \"\";\n\n                    // json.data.Message.forEach((obj, idx) => {\n\n                    //     let swComment = new SWExhibitComment(obj);\n\n                    //     exhibitID = swComment.exhibitID;\n\n                    //     commentTable.add(swComment.gUID, swComment);\n                    // });\n\n                    // let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    // allExhibits.forEach((item) => {\n\n                    //     if (item.exhibitID == exhibitID) {\n\n                    //         item.commentTable = commentTable;\n                    //     }\n                    // });\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        commentList: json.data.Message\n                    }));\n                }\n            });\n        }\n\n        /**分页查询，每次50条 */\n\n    }, {\n        key: 'GetAllComment',\n        value: function GetAllComment() {}\n    }]);\n\n    return ServerData;\n}();\n\nexports.default = ServerData;",{"version":3,"sources":["app\\src\\server\\SWServerData.js"],"names":["constants","external","require","axios","ServerData","museumID","displayID","serverURL","musServerURL","firstPanoID","resourcesUrl","featuresObj","floorsForBuilding","server_json","serverUrl","musServerUrl","data","getPanoByID","urls","Math","random","get","responseType","then","json","Floors","forEach","obj","FloorsInfo","store","dispatch","off","getAllThumbnailsForMuseum","getAllExhibitsForBuilding","getAllVideos","panoid","GetPanoByIDResult","c_StationInfo","c_isPreviewImageLoadEnd","panoID","ImageID","c_LastStopPanoID","StationInfo","sw_skyBox","addThumbnail","getAllFloorsForBuilding","nz","GetFacadeByPanoIDResult","c_facadeByPanoIDInfoArr","length","push","FacadeByPanoIDInfo","sw_wallMesh","createWallFace","GetAdjacentPanoResult","c_AdjacentPanoInfoArr","ArrowInfo","getNewArrow","c_ArrowPanoInfoArr","Link","x","y","z","GetOtherPanoByPositionResult","facadeid","GetOtherPanoByFacadeIDResult","c_isWallClickRotateBoo","c_markerInfoArr","MarkerInfo","SWMarkerInfo","c_isEditorStatus","c_thumbnailsForMuseum","thumbnails","ThumbnailsInfo","c_thumbnailsShow","Exhibits","allExhibits","AllExhibitsForBuilding","markerIDArr","markerID","c_allExhibitsForBuildingTable","add","eid","type","muType","MultiDatas","arr","multiData","MultiDataByParentID","c_multiDataByParentIDTable","imglist","markerImgList","markerthumbs","item","imgUrl","filePath","arr1","split","pp","idx","imageList","thumbs","videoInfo","vd","VideosData","c_allVideoTable","videoName","exhibitid","Likes","getValues","exhibitID","c_likeToExhibitID","likeNum","likes","contents","Message","commentNum","parseInt","commentList"],"mappings":"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","file":"SWServerData.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global $*/\r\n\r\nimport * as constants from '../tool/SWConstants';\r\nimport ArrowInfo from '../data/SWArrowInfo';\r\nimport FacadeByPanoIDInfo from '../data/SWFacadeByPanoIDInfo';\r\nimport FloorsInfo from '../data/SWFloorsInfo';\r\nimport SWMarkerInfo from '../data/SWMarkerInfo';\r\nimport MultiDataByParentID from '../data/SWMultiDataByParentIDInfo';\r\nimport ThumbnailsInfo from '../data/SWThumbnailsInfo';\r\nimport StationInfo from '../data/SWStationInfo';\r\nimport AllExhibitsForBuilding from '../data/SWAllExhibitsForBuilding';\r\nimport VideosData from '../data/SWVideosData';\r\nimport SWExhibitComment from '../data/SWExhibitComment';\r\nimport {\r\n    AddNewArrow,\r\n    AddOldArrow\r\n} from '../tool/SWInitializeInstance';\r\nimport initStore from '../../views/redux/store/store';\r\nimport {\r\n    show_Thumbnails_fun,\r\n    show_PanoMap_fun,\r\n    show_MarkerInterface_fun,\r\n    show_ViewPicture_fun\r\n} from '../../views/redux/action';\r\nimport HashTable from '../tool/SWHashTable';\r\nconst external = require('../tool/SWExternalConst.js');\r\nconst axios = require('axios');\r\n\r\n/**\r\n * 获取服务器数据\r\n */\r\nclass ServerData {\r\n    constructor() {\r\n        /**博物馆ID*/\r\n        this.museumID = \"\";\r\n        /**建筑ID*/\r\n        this.displayID = \"\";\r\n        /**底层数据库链接*/\r\n        this.serverURL = \"\";\r\n        /**业务数据库链接*/\r\n        this.musServerURL = \"\";\r\n        /**默认第一站全景ID*/\r\n        this.firstPanoID = \"\";\r\n        /**数据存放处*/\r\n        this.resourcesUrl = \"\";\r\n        /**功能对象*/\r\n        this.featuresObj = {};\r\n        /**只加载一次 */\r\n        this.floorsForBuilding = true;\r\n    }\r\n\r\n    getmusServerURL() {\r\n        return this.musServerURL;\r\n    }\r\n\r\n    /**\r\n     * 获取配置文件数据\r\n     */\r\n    getConfig() {\r\n\r\n        this.museumID = external.server_json.museumID;\r\n\r\n        this.displayID = external.server_json.displayID;\r\n\r\n        this.serverURL = external.server_json.serverUrl;\r\n\r\n        this.musServerURL = external.server_json.musServerUrl;\r\n\r\n        this.firstPanoID = external.server_json.firstPanoID;\r\n\r\n        this.resourcesUrl = external.server_json.resourcesUrl;\r\n\r\n        this.featuresObj = external.server_json.data;\r\n\r\n        this.getPanoByID(this.firstPanoID);\r\n    }\r\n\r\n    /**\r\n     * 获得所有楼层站点信息\r\n     */\r\n    getAllFloorsForBuilding() {\r\n\r\n        let urls = `${this.musServerURL}?method=GetAllFloorsForBuilding&buildingID=${this.displayID }&random=${Math.random() * 10}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n                if (json.data.Floors) {\r\n\r\n                    json.data.Floors.forEach((obj) => {\r\n\r\n                        new FloorsInfo(obj);\r\n\r\n                    });\r\n\r\n                    //数据来之后可以显示小地图\r\n                    let store = initStore();\r\n\r\n                    store.dispatch(show_PanoMap_fun({\r\n                        off: true\r\n                    }));\r\n                }\r\n\r\n                this.getAllThumbnailsForMuseum();\r\n                this.getAllExhibitsForBuilding();\r\n                this.getAllVideos();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获得当前站点信息\r\n     * @param {String} panoid 站点ID\r\n     */\r\n    getPanoByID(panoid) {\r\n\r\n        let urls = `${this.serverURL}/GetPanoByID?ImageID=${panoid}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n                if (json.data.GetPanoByIDResult) {\r\n\r\n                    if (!constants.c_StationInfo || (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetPanoByIDResult.ImageID)) {\r\n\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n\r\n                        constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\r\n\r\n                        constants.c_StationInfo = new StationInfo(json.data.GetPanoByIDResult);\r\n\r\n                        constants.sw_skyBox.addThumbnail();\r\n\r\n                        if (this.floorsForBuilding) {\r\n\r\n                            this.floorsForBuilding = false;\r\n\r\n                            this.getAllFloorsForBuilding();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 激光点云面片数据\r\n     * */\r\n    getFacadeByPanoID() {\r\n\r\n        let urls = `${this.serverURL}/GetFacadeByPanoID/?Z=${constants.c_StationInfo.nz}&PanoID=${constants.c_StationInfo.panoID}&TolerateZ=5`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.GetFacadeByPanoIDResult) {\r\n\r\n                    constants.c_facadeByPanoIDInfoArr.length = 0;\r\n\r\n                    json.data.GetFacadeByPanoIDResult.forEach((obj) => {\r\n\r\n                        constants.c_facadeByPanoIDInfoArr.push(new FacadeByPanoIDInfo(obj));\r\n\r\n                    });\r\n\r\n                    constants.sw_wallMesh.createWallFace();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取老箭头方法\r\n     * */\r\n    getOldArrow() {\r\n\r\n        let urls = `${this.serverURL}/GetAdjacentPano/?date=${Math.random() * 100}&ImageID=${constants.c_StationInfo.panoID}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n                if (json.data.GetAdjacentPanoResult) {\r\n\r\n                    constants.c_AdjacentPanoInfoArr.length = 0;\r\n\r\n                    json.data.GetAdjacentPanoResult.forEach((obj) => {\r\n\r\n                        constants.c_AdjacentPanoInfoArr.push(new ArrowInfo(obj, 1));\r\n\r\n                    });\r\n\r\n                    AddOldArrow();\r\n\r\n                } else {\r\n\r\n                    this.getNewArrow();\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    //获得新箭头\r\n    getNewArrow() {\r\n\r\n        let urls = `${this.musServerURL}?method=getLinkByPanoID&panoID=${constants.c_StationInfo.panoID}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                constants.c_ArrowPanoInfoArr.length = 0;\r\n\r\n                if (json.data.Link) {\r\n\r\n                    json.data.Link.forEach((obj) => {\r\n\r\n                        constants.c_ArrowPanoInfoArr.push(new ArrowInfo(obj, 2));\r\n\r\n                    });\r\n\r\n                    AddNewArrow();\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 地面跳转\r\n     * */\r\n    getOtherPanoByPosition(x, y, z, panoid) {\r\n\r\n        let urls = `${this.serverURL}/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=${z}&Y=${y}&ImageID=${panoid}&X=${x}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.GetOtherPanoByPositionResult) {\r\n\r\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByPositionResult.ImageID) {\r\n\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n\r\n                        constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\r\n\r\n                        constants.c_StationInfo = new StationInfo(json.data.GetOtherPanoByPositionResult);\r\n\r\n                        constants.sw_skyBox.addThumbnail();\r\n\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 墙面跳转\r\n     * @param {Number} x 3DS坐标X\r\n     * @param {Number} y 3DS坐标Y\r\n     * @param {Number} z 3DS坐标Z\r\n     * @param {Number} facadeid 点击跳转的墙面片ID\r\n     */\r\n    getOtherPanoByFacadeID(x, y, z, facadeid) {\r\n\r\n        let urls = `${this.serverURL}/GetOtherPanoByFacadeID?facadeID=${facadeid}&Z=${z}&Y=${y}&X=${x}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.GetOtherPanoByFacadeIDResult) {\r\n\r\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByFacadeIDResult.ImageID) {\r\n\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n\r\n                        constants.c_isWallClickRotateBoo = true;\r\n\r\n                        constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\r\n\r\n                        constants.c_StationInfo = new StationInfo(json.data.GetOtherPanoByFacadeIDResult);\r\n\r\n                        constants.sw_skyBox.addThumbnail();\r\n\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取标注\r\n     * */\r\n    getMarkerByPanoID() {\r\n\r\n        constants.c_markerInfoArr.length = 0;\r\n\r\n        let urls = `${this.musServerURL}?method=getMarkerByPanoID&panoID=${constants.c_StationInfo.panoID}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.MarkerInfo) {\r\n\r\n                    json.data.MarkerInfo.forEach((obj) => {\r\n\r\n                        constants.c_markerInfoArr.push(new SWMarkerInfo(obj));\r\n\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取推荐展厅数据\r\n     * */\r\n    getAllThumbnailsForMuseum() {\r\n        if (constants.c_isEditorStatus || constants.c_thumbnailsForMuseum.length > 0) {\r\n            return;\r\n        }\r\n        let urls = `${this.musServerURL}?method=GetAllThumbnailsForBuilding&buildingID=${this.displayID}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.thumbnails) {\r\n\r\n                    json.data.thumbnails.forEach((obj) => {\r\n\r\n                        constants.c_thumbnailsForMuseum.push(new ThumbnailsInfo(obj));\r\n\r\n                    });\r\n\r\n                    if (constants.c_thumbnailsShow) {\r\n                        //数据来之后可以弹出展厅列表\r\n                        let store = initStore();\r\n\r\n                        store.dispatch(show_Thumbnails_fun(true));\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取所有文物信息列表\r\n     * */\r\n    getAllExhibitsForBuilding() {\r\n        let urls = `${this.musServerURL}?method=GetAllExhibitsForBuilding&buildingID=${this.displayID}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Exhibits) {\r\n\r\n                    json.data.Exhibits.forEach((obj) => {\r\n\r\n                        let allExhibits = new AllExhibitsForBuilding(obj);\r\n\r\n                        let markerIDArr = allExhibits.markerID[0];\r\n\r\n                        constants.c_allExhibitsForBuildingTable.add(markerIDArr, allExhibits);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取单个文物信息\r\n     * */\r\n    getMultiDataByParentID(eid, type) {\r\n        let urls = `${this.musServerURL}?method=GetMultiDataByParentID&parentID=${eid}`;\r\n        let muType = type;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.MultiDatas) {\r\n\r\n                    let arr = [];\r\n\r\n                    json.data.MultiDatas.forEach((obj) => {\r\n\r\n                        let multiData = new MultiDataByParentID(obj);\r\n\r\n                        arr.push(multiData);\r\n                    });\r\n\r\n                    constants.c_multiDataByParentIDTable.add(eid, arr);\r\n\r\n                    if (muType == 1) { //图文\r\n\r\n                        let store = initStore();\r\n\r\n                        store.dispatch(show_MarkerInterface_fun({\r\n                            imglist: arr\r\n                        }));\r\n\r\n                    } else { //图片\r\n                        let markerImgList = [],\r\n                            markerthumbs = [];\r\n\r\n                        arr.forEach((item) => {\r\n                            let imgUrl = `${this.resourcesUrl}/${item.filePath}`;\r\n\r\n                            let arr1 = item.filePath.split('/');\r\n\r\n                            let pp = `${this.resourcesUrl}/${arr1[0]}/${arr1[1]}/${arr1[2]}/phone/${arr1[3]}`;\r\n\r\n                            markerImgList.push(imgUrl);\r\n\r\n                            markerthumbs.push(pp);\r\n                        });\r\n\r\n                        let store = initStore();\r\n\r\n                        store.dispatch(show_ViewPicture_fun({\r\n                            off: true,\r\n                            idx: 0,\r\n                            imageList: markerImgList,\r\n                            thumbs: markerthumbs\r\n                        }));\r\n\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取所有视频列表\r\n     * */\r\n    getAllVideos() {\r\n        let urls = `${this.musServerURL}?method=getAllVideos`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.videoInfo) {\r\n\r\n                    json.data.videoInfo.forEach((obj) => {\r\n\r\n                        let vd = new VideosData(obj);\r\n\r\n                        constants.c_allVideoTable.add(vd.videoName, vd);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**获取喜欢数 */\r\n    GetLikesForExhibitID(exhibitid) {\r\n        let urls = `${this.musServerURL}?method=GetLikesForExhibitID&exhibitid=${exhibitid}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Likes) {\r\n\r\n                    let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\r\n\r\n                    allExhibits.forEach((item) => {\r\n\r\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\r\n\r\n                            item.Likes = json.data.Likes;\r\n\r\n                        }\r\n                    });\r\n\r\n                    let store = initStore();\r\n\r\n                    store.dispatch(show_MarkerInterface_fun({\r\n                        likeNum: json.data.Likes\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n\r\n    /**新增喜欢数 */\r\n    SetLikesForExhibitID(exhibitid) {\r\n        let urls = `${this.musServerURL}?method=SetLikesForExhibitID&exhibitid=${exhibitid}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Likes) {\r\n\r\n                    let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\r\n\r\n                    allExhibits.forEach((item) => {\r\n\r\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\r\n\r\n                            item.likes = json.data.Likes;\r\n\r\n                        }\r\n                    });\r\n\r\n                    let store = initStore();\r\n\r\n                    store.dispatch(show_MarkerInterface_fun({\r\n                        likeNum: json.data.Likes\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n\r\n    /**新增评论 按照文物列表exhibitid*/\r\n    AddComment(exhibitid, contents) {\r\n\r\n        let urls = `${this.musServerURL}?method=AddComment&panoid=&uid=&exhibitid=${exhibitid}&contents=${contents}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Message) {\r\n\r\n                    let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\r\n\r\n                    allExhibits.forEach((item) => {\r\n\r\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\r\n\r\n                            item.commentNum = parseInt(json.data.Message);\r\n\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**查询总数 */\r\n    SelectCommentNum(exhibitid) {\r\n        let urls = `${this.musServerURL}?method=SelectCommentNum&panoid=&exhibitid=${exhibitid}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Message) {\r\n\r\n                    let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\r\n\r\n                    allExhibits.forEach((item) => {\r\n\r\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\r\n\r\n                            item.commentNum = parseInt(json.data.Message);\r\n\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**查询最新评论20条 */\r\n    GetNewestComment(exhibitid) {\r\n        let urls = `${this.musServerURL}?method=GetNewestComment&panoid=&exhibitid=${exhibitid}`;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Message) {\r\n\r\n                    // let commentTable = new HashTable();\r\n\r\n                    // let exhibitID = \"\";\r\n\r\n                    // json.data.Message.forEach((obj, idx) => {\r\n\r\n                    //     let swComment = new SWExhibitComment(obj);\r\n\r\n                    //     exhibitID = swComment.exhibitID;\r\n\r\n                    //     commentTable.add(swComment.gUID, swComment);\r\n                    // });\r\n\r\n                    // let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\r\n\r\n                    // allExhibits.forEach((item) => {\r\n\r\n                    //     if (item.exhibitID == exhibitID) {\r\n\r\n                    //         item.commentTable = commentTable;\r\n                    //     }\r\n                    // });\r\n\r\n                    let store = initStore();\r\n\r\n                    store.dispatch(show_MarkerInterface_fun({\r\n                        commentList: json.data.Message\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n\r\n    /**分页查询，每次50条 */\r\n    GetAllComment() {\r\n\r\n    }\r\n\r\n}\r\nexport default ServerData;"]}]}