{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","mtime":1539658565589},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538971317145},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global $*/\n\nvar _SWConstants = require('../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWArrowInfo = require('../data/SWArrowInfo');\n\nvar _SWArrowInfo2 = _interopRequireDefault(_SWArrowInfo);\n\nvar _SWFacadeByPanoIDInfo = require('../data/SWFacadeByPanoIDInfo');\n\nvar _SWFacadeByPanoIDInfo2 = _interopRequireDefault(_SWFacadeByPanoIDInfo);\n\nvar _SWFloorsInfo = require('../data/SWFloorsInfo');\n\nvar _SWFloorsInfo2 = _interopRequireDefault(_SWFloorsInfo);\n\nvar _SWMarkerInfo = require('../data/SWMarkerInfo');\n\nvar _SWMarkerInfo2 = _interopRequireDefault(_SWMarkerInfo);\n\nvar _SWMultiDataByParentIDInfo = require('../data/SWMultiDataByParentIDInfo');\n\nvar _SWMultiDataByParentIDInfo2 = _interopRequireDefault(_SWMultiDataByParentIDInfo);\n\nvar _SWThumbnailsInfo = require('../data/SWThumbnailsInfo');\n\nvar _SWThumbnailsInfo2 = _interopRequireDefault(_SWThumbnailsInfo);\n\nvar _SWStationInfo = require('../data/SWStationInfo');\n\nvar _SWStationInfo2 = _interopRequireDefault(_SWStationInfo);\n\nvar _SWAllExhibitsForBuilding = require('../data/SWAllExhibitsForBuilding');\n\nvar _SWAllExhibitsForBuilding2 = _interopRequireDefault(_SWAllExhibitsForBuilding);\n\nvar _SWVideosData = require('../data/SWVideosData');\n\nvar _SWVideosData2 = _interopRequireDefault(_SWVideosData);\n\nvar _SWInitializeInstance = require('../tool/SWInitializeInstance');\n\nvar _store2 = require('../../views/redux/store/store');\n\nvar _store3 = _interopRequireDefault(_store2);\n\nvar _action = require('../../views/redux/action');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../tool/SWExternalConst.js');\nvar axios = require('axios');\n\n/**\r\n * 获取服务器数据\r\n */\n\nvar ServerData = function () {\n    function ServerData() {\n        _classCallCheck(this, ServerData);\n\n        this.getAllVideos = function () {\n            var urls = this.musServerURL + \"?method=getAllVideos\";\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.videoInfo) {\n\n                    json.data.videoInfo.forEach(function (obj) {\n\n                        var vd = new _SWVideosData2.default(obj);\n\n                        constants.c_allVideoTable.add(vd.videoName, vd);\n                    });\n                }\n            });\n        };\n\n        /**博物馆ID*/\n        this.museumID = \"\";\n        /**建筑ID*/\n        this.displayID = \"\";\n        /**底层数据库链接*/\n        this.serverURL = \"\";\n        /**业务数据库链接*/\n        this.musServerURL = \"\";\n        /**默认第一站全景ID*/\n        this.firstPanoID = \"\";\n        /**数据存放处*/\n        this.resourcesUrl = \"\";\n        /**功能对象*/\n        this.featuresObj = {};\n        /**只加载一次 */\n        this.floorsForBuilding = true;\n    }\n\n    _createClass(ServerData, [{\n        key: 'getmusServerURL',\n        value: function getmusServerURL() {\n            return this.musServerURL;\n        }\n\n        /**\r\n         * 获取配置文件数据\r\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n\n            this.museumID = external.server_json.museumID;\n\n            this.displayID = external.server_json.displayID;\n\n            this.serverURL = external.server_json.serverUrl;\n\n            this.musServerURL = external.server_json.musServerUrl;\n\n            this.firstPanoID = external.server_json.firstPanoID;\n\n            this.resourcesUrl = external.server_json.resourcesUrl;\n\n            this.featuresObj = external.server_json.data;\n\n            this.getPanoByID(this.firstPanoID);\n        }\n\n        /**\r\n         * 获得所有楼层站点信息\r\n         */\n\n    }, {\n        key: 'getAllFloorsForBuilding',\n        value: function getAllFloorsForBuilding() {\n            var _this = this;\n\n            var urls = this.musServerURL + \"?method=GetAllFloorsForBuilding&buildingID=\" + this.displayID + \"&random=\" + Math.random() * 10;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.Floors) {\n\n                    json.data.Floors.forEach(function (obj) {\n\n                        new _SWFloorsInfo2.default(obj);\n                    });\n\n                    //数据来之后可以弹出展厅列表\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_PanoMap_fun)({ off: true }));\n                }\n\n                _this.getAllThumbnailsForMuseum();\n                _this.getAllExhibitsForBuilding();\n                _this.getAllVideos();\n            });\n        }\n\n        /**\r\n         * 获得当前站点信息\r\n         * @param {String} panoid 站点ID\r\n         */\n\n    }, {\n        key: 'getPanoByID',\n        value: function getPanoByID(panoid) {\n            var _this2 = this;\n\n            var urls = this.serverURL + \"/GetPanoByID?ImageID=\" + panoid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.GetPanoByIDResult) {\n\n                    if (!constants.c_StationInfo || constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetPanoByIDResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetPanoByIDResult);\n\n                        constants.sw_skyBox.addThumbnail();\n\n                        if (_this2.floorsForBuilding) {\n\n                            _this2.floorsForBuilding = false;\n\n                            _this2.getAllFloorsForBuilding();\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 激光点云面片数据\r\n         * */\n\n    }, {\n        key: 'getFacadeByPanoID',\n        value: function getFacadeByPanoID() {\n\n            var urls = this.serverURL + \"/GetFacadeByPanoID/?Z=\" + constants.c_StationInfo.nz + \"&PanoID=\" + constants.c_StationInfo.panoID + \"&TolerateZ=\" + 5;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetFacadeByPanoIDResult) {\n\n                    constants.c_facadeByPanoIDInfoArr.length = 0;\n\n                    json.data.GetFacadeByPanoIDResult.forEach(function (obj) {\n\n                        constants.c_facadeByPanoIDInfoArr.push(new _SWFacadeByPanoIDInfo2.default(obj));\n                    });\n\n                    constants.sw_wallMesh.createWallFace();\n                }\n            });\n        }\n\n        /**\r\n         * 获取老箭头方法\r\n         * */\n\n    }, {\n        key: 'getOldArrow',\n        value: function getOldArrow() {\n            var _this3 = this;\n\n            var urls = this.serverURL + \"/GetAdjacentPano/?date=\" + Math.random() * 100 + \"&ImageID=\" + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.GetAdjacentPanoResult) {\n\n                    constants.c_AdjacentPanoInfoArr.length = 0;\n\n                    json.data.GetAdjacentPanoResult.forEach(function (obj) {\n\n                        constants.c_AdjacentPanoInfoArr.push(new _SWArrowInfo2.default(obj, 1));\n                    });\n\n                    (0, _SWInitializeInstance.AddOldArrow)();\n                } else {\n\n                    _this3.getNewArrow();\n                }\n            });\n        }\n\n        //获得新箭头\n\n    }, {\n        key: 'getNewArrow',\n        value: function getNewArrow() {\n\n            var urls = this.musServerURL + \"?method=getLinkByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                constants.c_ArrowPanoInfoArr.length = 0;\n\n                if (json.data.Link) {\n\n                    json.data.Link.forEach(function (obj) {\n\n                        constants.c_ArrowPanoInfoArr.push(new _SWArrowInfo2.default(obj, 2));\n                    });\n\n                    (0, _SWInitializeInstance.AddNewArrow)();\n                }\n            });\n        }\n\n        /**\r\n         * 地面跳转\r\n         * */\n\n    }, {\n        key: 'getOtherPanoByPosition',\n        value: function getOtherPanoByPosition(x, y, z, panoid) {\n\n            var urls = this.serverURL + \"/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=\" + z + \"&Y=\" + y + \"&ImageID=\" + panoid + \"&X=\" + x;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetOtherPanoByPositionResult) {\n\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByPositionResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetOtherPanoByPositionResult);\n\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 墙面跳转\r\n         * @param {Number} x 3DS坐标X\r\n         * @param {Number} y 3DS坐标Y\r\n         * @param {Number} z 3DS坐标Z\r\n         * @param {Number} facadeid 点击跳转的墙面片ID\r\n         */\n\n    }, {\n        key: 'getOtherPanoByFacadeID',\n        value: function getOtherPanoByFacadeID(x, y, z, facadeid) {\n\n            var urls = this.serverURL + \"/GetOtherPanoByFacadeID?facadeID=\" + facadeid + \"&Z=\" + z + \"&Y=\" + y + \"&X=\" + x;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetOtherPanoByFacadeIDResult) {\n\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByFacadeIDResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_isWallClickRotateBoo = true;\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetOtherPanoByFacadeIDResult);\n\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取标注\r\n         * */\n\n    }, {\n        key: 'getMarkerByPanoID',\n        value: function getMarkerByPanoID() {\n\n            constants.c_markerInfoArr.length = 0;\n\n            var urls = this.musServerURL + \"?method=getMarkerByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.MarkerInfo) {\n\n                    json.data.MarkerInfo.forEach(function (obj) {\n\n                        constants.c_markerInfoArr.push(new _SWMarkerInfo2.default(obj));\n                    });\n                }\n            });\n        }\n\n        /**\r\n         * 获取推荐展厅数据\r\n         * */\n\n    }, {\n        key: 'getAllThumbnailsForMuseum',\n        value: function getAllThumbnailsForMuseum() {\n            if (constants.c_isEditorStatus || constants.c_thumbnailsForMuseum.length > 0) {\n                return;\n            }\n            var urls = this.musServerURL + \"?method=GetAllThumbnailsForBuilding&buildingID=\" + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.thumbnails) {\n\n                    json.data.thumbnails.forEach(function (obj) {\n\n                        constants.c_thumbnailsForMuseum.push(new _SWThumbnailsInfo2.default(obj));\n                    });\n\n                    //数据来之后可以弹出展厅列表\n                    // let store = initStore();\n\n                    // store.dispatch(show_Thumbnails_fun(true));\n                }\n            });\n        }\n\n        /**\r\n         * 获取所有文物信息列表\r\n         * */\n\n    }, {\n        key: 'getAllExhibitsForBuilding',\n        value: function getAllExhibitsForBuilding() {\n            var urls = this.musServerURL + \"?method=GetAllExhibitsForBuilding&buildingID=\" + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Exhibits) {\n\n                    json.data.Exhibits.forEach(function (obj) {\n\n                        var allExhibits = new _SWAllExhibitsForBuilding2.default(obj);\n\n                        var markerIDArr = allExhibits.markerID[0];\n\n                        constants.c_allExhibitsForBuildingTable.add(markerIDArr, allExhibits);\n                    });\n                }\n            });\n        }\n\n        /**\r\n         * 获取单个文物信息\r\n         * */\n\n    }, {\n        key: 'getMultiDataByParentID',\n        value: function getMultiDataByParentID(eid, type) {\n            var _this4 = this;\n\n            var urls = this.musServerURL + \"?method=GetMultiDataByParentID&parentID=\" + eid;\n            var muType = type;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.MultiDatas) {\n\n                    var arr = [];\n\n                    json.data.MultiDatas.forEach(function (obj) {\n\n                        var multiData = new _SWMultiDataByParentIDInfo2.default(obj);\n\n                        arr.push(multiData);\n                    });\n\n                    constants.c_multiDataByParentIDTable.add(eid, arr);\n\n                    if (muType == 1) {\n                        //图文\n\n                        var store = (0, _store3.default)();\n\n                        store.dispatch((0, _action.show_MarkerInterface_fun)({\n                            imglist: arr\n                        }));\n                    } else {\n                        //图片\n                        var markerImgList = [],\n                            markerthumbs = [];\n\n                        arr.forEach(function (item) {\n                            var imgUrl = _this4.resourcesUrl + '/' + item.filePath;\n\n                            var arr1 = item.filePath.split('/');\n\n                            var pp = _this4.resourcesUrl + '/' + arr1[0] + '/' + arr1[1] + '/' + arr1[2] + '/phone/' + arr1[3];\n\n                            markerImgList.push(imgUrl);\n\n                            markerthumbs.push(pp);\n                        });\n\n                        var _store = (0, _store3.default)();\n\n                        _store.dispatch((0, _action.show_ViewPicture_fun)({\n                            off: true,\n                            idx: 0,\n                            imageList: markerImgList,\n                            thumbs: markerthumbs\n                        }));\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取所有视频列表\r\n         * */\n\n    }]);\n\n    return ServerData;\n}();\n\nexports.default = ServerData;",{"version":3,"sources":["app\\src\\server\\SWServerData.js"],"names":["constants","external","require","axios","ServerData","getAllVideos","urls","musServerURL","get","responseType","then","json","data","videoInfo","forEach","obj","vd","VideosData","c_allVideoTable","add","videoName","museumID","displayID","serverURL","firstPanoID","resourcesUrl","featuresObj","floorsForBuilding","server_json","serverUrl","musServerUrl","getPanoByID","Math","random","Floors","FloorsInfo","store","dispatch","off","getAllThumbnailsForMuseum","getAllExhibitsForBuilding","panoid","GetPanoByIDResult","c_StationInfo","c_isPreviewImageLoadEnd","panoID","ImageID","StationInfo","sw_skyBox","addThumbnail","getAllFloorsForBuilding","nz","GetFacadeByPanoIDResult","c_facadeByPanoIDInfoArr","length","push","FacadeByPanoIDInfo","sw_wallMesh","createWallFace","GetAdjacentPanoResult","c_AdjacentPanoInfoArr","ArrowInfo","getNewArrow","c_ArrowPanoInfoArr","Link","x","y","z","GetOtherPanoByPositionResult","facadeid","GetOtherPanoByFacadeIDResult","c_isWallClickRotateBoo","c_markerInfoArr","MarkerInfo","SWMarkerInfo","c_isEditorStatus","c_thumbnailsForMuseum","thumbnails","ThumbnailsInfo","Exhibits","allExhibits","AllExhibitsForBuilding","markerIDArr","markerID","c_allExhibitsForBuildingTable","eid","type","muType","MultiDatas","arr","multiData","MultiDataByParentID","c_multiDataByParentIDTable","imglist","markerImgList","markerthumbs","item","imgUrl","filePath","arr1","split","pp","idx","imageList","thumbs"],"mappings":"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","file":"SWServerData.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global $*/\r\n\r\nimport * as constants from '../tool/SWConstants';\r\nimport ArrowInfo from '../data/SWArrowInfo';\r\nimport FacadeByPanoIDInfo from '../data/SWFacadeByPanoIDInfo';\r\nimport FloorsInfo from '../data/SWFloorsInfo';\r\nimport SWMarkerInfo from '../data/SWMarkerInfo';\r\nimport MultiDataByParentID from '../data/SWMultiDataByParentIDInfo';\r\nimport ThumbnailsInfo from '../data/SWThumbnailsInfo';\r\nimport StationInfo from '../data/SWStationInfo';\r\nimport AllExhibitsForBuilding from '../data/SWAllExhibitsForBuilding';\r\nimport VideosData from '../data/SWVideosData';\r\nimport {\r\n    AddNewArrow,\r\n    AddOldArrow\r\n} from '../tool/SWInitializeInstance';\r\nimport initStore from '../../views/redux/store/store';\r\nimport {\r\n    show_Thumbnails_fun,\r\n    show_PanoMap_fun,\r\n    show_MarkerInterface_fun,\r\n    show_ViewPicture_fun\r\n} from '../../views/redux/action';\r\nconst external = require('../tool/SWExternalConst.js');\r\nconst axios = require('axios');\r\n\r\n/**\r\n * 获取服务器数据\r\n */\r\nclass ServerData {\r\n    constructor() {\r\n        /**博物馆ID*/\r\n        this.museumID = \"\";\r\n        /**建筑ID*/\r\n        this.displayID = \"\";\r\n        /**底层数据库链接*/\r\n        this.serverURL = \"\";\r\n        /**业务数据库链接*/\r\n        this.musServerURL = \"\";\r\n        /**默认第一站全景ID*/\r\n        this.firstPanoID = \"\";\r\n        /**数据存放处*/\r\n        this.resourcesUrl = \"\";\r\n        /**功能对象*/\r\n        this.featuresObj = {};\r\n        /**只加载一次 */\r\n        this.floorsForBuilding = true;\r\n    }\r\n\r\n    getmusServerURL() {\r\n        return this.musServerURL;\r\n    }\r\n\r\n    /**\r\n     * 获取配置文件数据\r\n     */\r\n    getConfig() {\r\n\r\n        this.museumID = external.server_json.museumID;\r\n\r\n        this.displayID = external.server_json.displayID;\r\n\r\n        this.serverURL = external.server_json.serverUrl;\r\n\r\n        this.musServerURL = external.server_json.musServerUrl;\r\n\r\n        this.firstPanoID = external.server_json.firstPanoID;\r\n\r\n        this.resourcesUrl = external.server_json.resourcesUrl;\r\n\r\n        this.featuresObj = external.server_json.data;\r\n\r\n        this.getPanoByID(this.firstPanoID);\r\n    }\r\n\r\n    /**\r\n     * 获得所有楼层站点信息\r\n     */\r\n    getAllFloorsForBuilding() {\r\n\r\n        let urls = this.musServerURL + \"?method=GetAllFloorsForBuilding&buildingID=\" + this.displayID + \"&random=\" + Math.random() * 10;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n                if (json.data.Floors) {\r\n\r\n                    json.data.Floors.forEach((obj) => {\r\n\r\n                        new FloorsInfo(obj);\r\n\r\n                    });\r\n\r\n                    //数据来之后可以弹出展厅列表\r\n                    let store = initStore();\r\n\r\n                    store.dispatch(show_PanoMap_fun({off:true}));\r\n                }\r\n\r\n                this.getAllThumbnailsForMuseum();\r\n                this.getAllExhibitsForBuilding();\r\n                this.getAllVideos();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获得当前站点信息\r\n     * @param {String} panoid 站点ID\r\n     */\r\n    getPanoByID(panoid) {\r\n\r\n        let urls = this.serverURL + \"/GetPanoByID?ImageID=\" + panoid;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n                if (json.data.GetPanoByIDResult) {\r\n\r\n                    if (!constants.c_StationInfo || (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetPanoByIDResult.ImageID)) {\r\n\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n\r\n                        constants.c_StationInfo = new StationInfo(json.data.GetPanoByIDResult);\r\n\r\n                        constants.sw_skyBox.addThumbnail();\r\n\r\n                        if (this.floorsForBuilding) {\r\n\r\n                            this.floorsForBuilding = false;\r\n\r\n                            this.getAllFloorsForBuilding();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 激光点云面片数据\r\n     * */\r\n    getFacadeByPanoID() {\r\n\r\n        let urls = this.serverURL + \"/GetFacadeByPanoID/?Z=\" + constants.c_StationInfo.nz + \"&PanoID=\" + constants.c_StationInfo.panoID + \"&TolerateZ=\" + 5;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.GetFacadeByPanoIDResult) {\r\n\r\n                    constants.c_facadeByPanoIDInfoArr.length = 0;\r\n\r\n                    json.data.GetFacadeByPanoIDResult.forEach((obj) => {\r\n\r\n                        constants.c_facadeByPanoIDInfoArr.push(new FacadeByPanoIDInfo(obj));\r\n\r\n                    });\r\n\r\n                    constants.sw_wallMesh.createWallFace();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取老箭头方法\r\n     * */\r\n    getOldArrow() {\r\n\r\n        let urls = this.serverURL + \"/GetAdjacentPano/?date=\" + Math.random() * 100 + \"&ImageID=\" + constants.c_StationInfo.panoID;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n                if (json.data.GetAdjacentPanoResult) {\r\n\r\n                    constants.c_AdjacentPanoInfoArr.length = 0;\r\n\r\n                    json.data.GetAdjacentPanoResult.forEach((obj) => {\r\n\r\n                        constants.c_AdjacentPanoInfoArr.push(new ArrowInfo(obj, 1));\r\n\r\n                    });\r\n\r\n                    AddOldArrow();\r\n\r\n                } else {\r\n\r\n                    this.getNewArrow();\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    //获得新箭头\r\n    getNewArrow() {\r\n\r\n        let urls = this.musServerURL + \"?method=getLinkByPanoID&panoID=\" + constants.c_StationInfo.panoID;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                constants.c_ArrowPanoInfoArr.length = 0;\r\n\r\n                if (json.data.Link) {\r\n\r\n                    json.data.Link.forEach((obj) => {\r\n\r\n                        constants.c_ArrowPanoInfoArr.push(new ArrowInfo(obj, 2));\r\n\r\n                    });\r\n\r\n                    AddNewArrow();\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 地面跳转\r\n     * */\r\n    getOtherPanoByPosition(x, y, z, panoid) {\r\n\r\n        let urls = this.serverURL + \"/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=\" + z + \"&Y=\" + y + \"&ImageID=\" + panoid + \"&X=\" + x;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.GetOtherPanoByPositionResult) {\r\n\r\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByPositionResult.ImageID) {\r\n\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n\r\n                        constants.c_StationInfo = new StationInfo(json.data.GetOtherPanoByPositionResult);\r\n\r\n                        constants.sw_skyBox.addThumbnail();\r\n\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 墙面跳转\r\n     * @param {Number} x 3DS坐标X\r\n     * @param {Number} y 3DS坐标Y\r\n     * @param {Number} z 3DS坐标Z\r\n     * @param {Number} facadeid 点击跳转的墙面片ID\r\n     */\r\n    getOtherPanoByFacadeID(x, y, z, facadeid) {\r\n\r\n        let urls = this.serverURL + \"/GetOtherPanoByFacadeID?facadeID=\" + facadeid + \"&Z=\" + z + \"&Y=\" + y + \"&X=\" + x;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.GetOtherPanoByFacadeIDResult) {\r\n\r\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByFacadeIDResult.ImageID) {\r\n\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n\r\n                        constants.c_isWallClickRotateBoo = true;\r\n\r\n                        constants.c_StationInfo = new StationInfo(json.data.GetOtherPanoByFacadeIDResult);\r\n\r\n                        constants.sw_skyBox.addThumbnail();\r\n\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取标注\r\n     * */\r\n    getMarkerByPanoID() {\r\n\r\n        constants.c_markerInfoArr.length = 0;\r\n\r\n        let urls = this.musServerURL + \"?method=getMarkerByPanoID&panoID=\" + constants.c_StationInfo.panoID;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.MarkerInfo) {\r\n\r\n                    json.data.MarkerInfo.forEach((obj) => {\r\n\r\n                        constants.c_markerInfoArr.push(new SWMarkerInfo(obj));\r\n\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取推荐展厅数据\r\n     * */\r\n    getAllThumbnailsForMuseum() {\r\n        if (constants.c_isEditorStatus || constants.c_thumbnailsForMuseum.length > 0) {\r\n            return;\r\n        }\r\n        let urls = this.musServerURL + \"?method=GetAllThumbnailsForBuilding&buildingID=\" + this.displayID;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.thumbnails) {\r\n\r\n                    json.data.thumbnails.forEach((obj) => {\r\n\r\n                        constants.c_thumbnailsForMuseum.push(new ThumbnailsInfo(obj));\r\n\r\n                    });\r\n\r\n                    //数据来之后可以弹出展厅列表\r\n                    // let store = initStore();\r\n\r\n                    // store.dispatch(show_Thumbnails_fun(true));\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取所有文物信息列表\r\n     * */\r\n    getAllExhibitsForBuilding() {\r\n        let urls = this.musServerURL + \"?method=GetAllExhibitsForBuilding&buildingID=\" + this.displayID;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.Exhibits) {\r\n\r\n                    json.data.Exhibits.forEach((obj) => {\r\n\r\n                        let allExhibits = new AllExhibitsForBuilding(obj);\r\n\r\n                        let markerIDArr = allExhibits.markerID[0];\r\n\r\n                        constants.c_allExhibitsForBuildingTable.add(markerIDArr, allExhibits);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取单个文物信息\r\n     * */\r\n    getMultiDataByParentID(eid, type) {\r\n        let urls = this.musServerURL + \"?method=GetMultiDataByParentID&parentID=\" + eid;\r\n        let muType = type;\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.MultiDatas) {\r\n\r\n                    let arr = [];\r\n\r\n                    json.data.MultiDatas.forEach((obj) => {\r\n\r\n                        let multiData = new MultiDataByParentID(obj);\r\n\r\n                        arr.push(multiData);\r\n                    });\r\n\r\n                    constants.c_multiDataByParentIDTable.add(eid, arr);\r\n\r\n                    if (muType == 1) { //图文\r\n\r\n                        let store = initStore();\r\n\r\n                        store.dispatch(show_MarkerInterface_fun({\r\n                            imglist: arr\r\n                        }));\r\n\r\n                    } else { //图片\r\n                        let markerImgList = [],\r\n                            markerthumbs = [];\r\n\r\n                        arr.forEach((item) => {\r\n                            let imgUrl = `${this.resourcesUrl}/${item.filePath}`;\r\n\r\n                            let arr1 = item.filePath.split('/');\r\n\r\n                            let pp = `${this.resourcesUrl}/${arr1[0]}/${arr1[1]}/${arr1[2]}/phone/${arr1[3]}`;\r\n\r\n                            markerImgList.push(imgUrl);\r\n\r\n                            markerthumbs.push(pp);\r\n                        });\r\n\r\n                        let store = initStore();\r\n\r\n                        store.dispatch(show_ViewPicture_fun({\r\n                            off: true,\r\n                            idx: 0,\r\n                            imageList: markerImgList,\r\n                            thumbs: markerthumbs\r\n                        }));\r\n\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * 获取所有视频列表\r\n     * */\r\n    getAllVideos = function () {\r\n        let urls = this.musServerURL + \"?method=getAllVideos\";\r\n\r\n        axios.get(urls, {\r\n                responseType: \"json\"\r\n            })\r\n            .then(json => {\r\n\r\n                if (json.data.videoInfo) {\r\n\r\n                    json.data.videoInfo.forEach((obj) => {\r\n\r\n                        let vd = new VideosData(obj);\r\n\r\n                        constants.c_allVideoTable.add(vd.videoName, vd);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n}\r\nexport default ServerData;"]}]}