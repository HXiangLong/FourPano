{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","mtime":1534908635659},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global $*/\n\nvar _SWConstants = require('../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWArrowInfo = require('../data/SWArrowInfo');\n\nvar _SWArrowInfo2 = _interopRequireDefault(_SWArrowInfo);\n\nvar _SWExhibitsInfo = require('../data/SWExhibitsInfo');\n\nvar _SWExhibitsInfo2 = _interopRequireDefault(_SWExhibitsInfo);\n\nvar _SWFacadeByPanoIDInfo = require('../data/SWFacadeByPanoIDInfo');\n\nvar _SWFacadeByPanoIDInfo2 = _interopRequireDefault(_SWFacadeByPanoIDInfo);\n\nvar _SWFloorsInfo = require('../data/SWFloorsInfo');\n\nvar _SWFloorsInfo2 = _interopRequireDefault(_SWFloorsInfo);\n\nvar _SWMarkerInfo = require('../data/SWMarkerInfo');\n\nvar _SWMarkerInfo2 = _interopRequireDefault(_SWMarkerInfo);\n\nvar _SWMultiDataByParentIDInfo = require('../data/SWMultiDataByParentIDInfo');\n\nvar _SWMultiDataByParentIDInfo2 = _interopRequireDefault(_SWMultiDataByParentIDInfo);\n\nvar _SWThumbnailsInfo = require('../data/SWThumbnailsInfo');\n\nvar _SWThumbnailsInfo2 = _interopRequireDefault(_SWThumbnailsInfo);\n\nvar _SWStationInfo = require('../data/SWStationInfo');\n\nvar _SWStationInfo2 = _interopRequireDefault(_SWStationInfo);\n\nvar _SWInitializeInstance = require('../tool/SWInitializeInstance');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../tool/SWExternalConst.js');\n\n/**\r\n * 获取服务器数据\r\n */\n\nvar ServerData = function () {\n    function ServerData() {\n        _classCallCheck(this, ServerData);\n\n        /**博物馆ID*/\n        this.museumID = \"\";\n        /**建筑ID*/\n        this.displayID = \"\";\n        /**底层数据库链接*/\n        this.serverURL = \"\";\n        /**业务数据库链接*/\n        this.musServerURL = \"\";\n        /**默认第一站全景ID*/\n        this.firstPanoID = \"\";\n        /**数据存放处*/\n        this.resourcesUrl = \"\";\n        /**功能对象*/\n        this.featuresObj = {};\n    }\n\n    _createClass(ServerData, [{\n        key: 'getmusServerURL',\n        value: function getmusServerURL() {\n            return this.musServerURL;\n        }\n\n        /**\r\n         * 获取配置文件数据\r\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n            this.museumID = external.server_json.museumID;\n            this.displayID = external.server_json.displayID;\n            this.serverURL = external.server_json.serverUrl;\n            this.musServerURL = external.server_json.musServerUrl;\n            this.firstPanoID = external.server_json.firstPanoID;\n            this.resourcesUrl = external.server_json.resourcesUrl;\n            this.featuresObj = external.server_json.data;\n            this.getPanoByID(this.firstPanoID);\n            this.getAllFloorsForBuilding();\n        }\n\n        /**\r\n         * 获得所有楼层站点信息\r\n         */\n\n    }, {\n        key: 'getAllFloorsForBuilding',\n        value: function getAllFloorsForBuilding() {\n            var urls = \"?method=GetAllFloorsForBuilding&buildingID=\" + this.displayID + \"&random=\" + Math.random() * 10;\n            $.ajax({\n                url: this.musServerURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.Floors) {\n                        data.Floors.map(function (obj) {\n                            new _SWFloorsInfo2.default(obj);\n                        });\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获得当前站点信息\r\n         * @param {String} panoid 站点ID\r\n         */\n\n    }, {\n        key: 'getPanoByID',\n        value: function getPanoByID(panoid) {\n            var url = \"/GetPanoByID?ImageID=\" + panoid;\n            $.ajax({\n                url: this.serverURL + url,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.GetPanoByIDResult) {\n                        if (!constants.c_StationInfo || constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetPanoByIDResult.ImageID) {\n                            constants.c_isPreviewImageLoadEnd = false;\n                            constants.c_StationInfo = new _SWStationInfo2.default(data.GetPanoByIDResult);\n                            constants.sw_skyBox.addThumbnail();\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 激光点云面片数据\r\n         * */\n\n    }, {\n        key: 'getFacadeByPanoID',\n        value: function getFacadeByPanoID() {\n            var url = \"/GetFacadeByPanoID/?Z=\" + constants.c_StationInfo.nz + \"&PanoID=\" + constants.c_StationInfo.panoID + \"&TolerateZ=\" + 5;\n            $.ajax({\n                url: this.serverURL + url,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n\n                    if (data.GetFacadeByPanoIDResult) {\n\n                        constants.c_facadeByPanoIDInfoArr.length = 0;\n\n                        data.GetFacadeByPanoIDResult.map(function (obj) {\n\n                            constants.c_facadeByPanoIDInfoArr.push(new _SWFacadeByPanoIDInfo2.default(obj));\n                        });\n\n                        constants.sw_wallMesh.createWallFace();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取老箭头方法\r\n         * */\n\n    }, {\n        key: 'getOldArrow',\n        value: function getOldArrow() {\n            var _this = this;\n\n            var url = \"/GetAdjacentPano/?date=\" + Math.random() * 100 + \"&ImageID=\" + constants.c_StationInfo.panoID;\n            $.ajax({\n                url: this.serverURL + url,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.GetAdjacentPanoResult) {\n                        constants.c_AdjacentPanoInfoArr.length = 0;\n                        data.GetAdjacentPanoResult.map(function (obj) {\n                            constants.c_AdjacentPanoInfoArr.push(new _SWArrowInfo2.default(obj, 1));\n                        });\n                        (0, _SWInitializeInstance.AddOldArrow)();\n                    } else {\n                        _this.getNewArrow();\n                    }\n                }\n            });\n        }\n\n        //获得新箭头\n\n    }, {\n        key: 'getNewArrow',\n        value: function getNewArrow() {\n            var urls = \"?method=getLinkByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n            $.ajax({\n                url: this.musServerURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    constants.c_ArrowPanoInfoArr.length = 0;\n                    if (data.Link) {\n                        data.Link.map(function (obj) {\n                            constants.c_ArrowPanoInfoArr.push(new _SWArrowInfo2.default(obj, 2));\n                        });\n                        (0, _SWInitializeInstance.AddNewArrow)();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 地面跳转\r\n         * */\n\n    }, {\n        key: 'getOtherPanoByPosition',\n        value: function getOtherPanoByPosition(x, y, z, panoid) {\n            var urls = \"/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=\" + z + \"&Y=\" + y + \"&ImageID=\" + panoid + \"&X=\" + x;\n            $.ajax({\n                url: this.serverURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetOtherPanoByPositionResult.ImageID) {\n                        constants.c_isPreviewImageLoadEnd = false;\n                        constants.c_StationInfo = new _SWStationInfo2.default(data.GetOtherPanoByPositionResult);\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 墙面跳转\r\n         * @param {Number} x 3DS坐标X\r\n         * @param {Number} y 3DS坐标Y\r\n         * @param {Number} z 3DS坐标Z\r\n         * @param {Number} facadeid 点击跳转的墙面片ID\r\n         */\n\n    }, {\n        key: 'getOtherPanoByFacadeID',\n        value: function getOtherPanoByFacadeID(x, y, z, facadeid) {\n            var urls = \"/GetOtherPanoByFacadeID?facadeID=\" + facadeid + \"&Z=\" + z + \"&Y=\" + y + \"&X=\" + x;\n            $.ajax({\n                url: this.serverURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络链接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetOtherPanoByFacadeIDResult.ImageID) {\n                        constants.c_isPreviewImageLoadEnd = false;\n                        constants.c_StationInfo = new _SWStationInfo2.default(data.GetOtherPanoByFacadeIDResult);\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取标注\r\n         * */\n\n    }, {\n        key: 'getMarkerByPanoID',\n        value: function getMarkerByPanoID() {\n            constants.c_markerInfoArr.length = 0;\n            var urls = \"?method=getMarkerByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n            $.ajax({\n                url: this.musServerURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.MarkerInfo) {\n                        data.MarkerInfo.map(function (obj) {\n                            constants.c_markerInfoArr.push(new _SWMarkerInfo2.default(obj));\n                        });\n                        (0, _SWInitializeInstance.AddMarkerMesh)();\n                    }\n                }\n            });\n        }\n    }]);\n\n    return ServerData;\n}();\n\nexports.default = ServerData;",{"version":3,"sources":["app\\src\\server\\SWServerData.js"],"names":["constants","external","require","ServerData","museumID","displayID","serverURL","musServerURL","firstPanoID","resourcesUrl","featuresObj","server_json","serverUrl","musServerUrl","data","getPanoByID","getAllFloorsForBuilding","urls","Math","random","$","ajax","url","type","cache","dataType","error","console","log","success","Floors","map","obj","FloorsInfo","panoid","GetPanoByIDResult","c_StationInfo","c_isPreviewImageLoadEnd","panoID","ImageID","StationInfo","sw_skyBox","addThumbnail","nz","GetFacadeByPanoIDResult","c_facadeByPanoIDInfoArr","length","push","FacadeByPanoIDInfo","sw_wallMesh","createWallFace","GetAdjacentPanoResult","c_AdjacentPanoInfoArr","ArrowInfo","getNewArrow","c_ArrowPanoInfoArr","Link","x","y","z","GetOtherPanoByPositionResult","facadeid","GetOtherPanoByFacadeIDResult","c_markerInfoArr","MarkerInfo","SWMarkerInfo"],"mappings":"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","file":"SWServerData.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global $*/\r\n\r\nimport * as constants from '../tool/SWConstants';\r\nimport ArrowInfo from '../data/SWArrowInfo';\r\nimport ExhibitsInfo from '../data/SWExhibitsInfo';\r\nimport FacadeByPanoIDInfo from '../data/SWFacadeByPanoIDInfo';\r\nimport FloorsInfo from '../data/SWFloorsInfo';\r\nimport SWMarkerInfo from '../data/SWMarkerInfo';\r\nimport MultiDataByParentIDInfo from '../data/SWMultiDataByParentIDInfo';\r\nimport ThumbnailsInfo from '../data/SWThumbnailsInfo';\r\nimport StationInfo from '../data/SWStationInfo';\r\nimport { AddNewArrow, AddOldArrow, AddMarkerMesh } from '../tool/SWInitializeInstance';\r\nconst external = require('../tool/SWExternalConst.js');\r\n\r\n/**\r\n * 获取服务器数据\r\n */\r\nclass ServerData {\r\n    constructor() {\r\n        /**博物馆ID*/\r\n        this.museumID = \"\";\r\n        /**建筑ID*/\r\n        this.displayID = \"\";\r\n        /**底层数据库链接*/\r\n        this.serverURL = \"\";\r\n        /**业务数据库链接*/\r\n        this.musServerURL = \"\";\r\n        /**默认第一站全景ID*/\r\n        this.firstPanoID = \"\";\r\n        /**数据存放处*/\r\n        this.resourcesUrl = \"\";\r\n        /**功能对象*/\r\n        this.featuresObj = {};\r\n    }\r\n\r\n    getmusServerURL() {\r\n        return this.musServerURL;\r\n    }\r\n\r\n    /**\r\n     * 获取配置文件数据\r\n     */\r\n    getConfig() {\r\n        this.museumID = external.server_json.museumID;\r\n        this.displayID = external.server_json.displayID;\r\n        this.serverURL = external.server_json.serverUrl;\r\n        this.musServerURL = external.server_json.musServerUrl;\r\n        this.firstPanoID = external.server_json.firstPanoID;\r\n        this.resourcesUrl = external.server_json.resourcesUrl;\r\n        this.featuresObj = external.server_json.data;\r\n        this.getPanoByID(this.firstPanoID);\r\n        this.getAllFloorsForBuilding();\r\n    }\r\n\r\n    /**\r\n     * 获得所有楼层站点信息\r\n     */\r\n    getAllFloorsForBuilding() {\r\n        let urls = \"?method=GetAllFloorsForBuilding&buildingID=\" + this.displayID + \"&random=\" + Math.random() * 10;\r\n        $.ajax({\r\n            url: this.musServerURL + urls,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                if (data.Floors) {\r\n                    data.Floors.map((obj) => {\r\n                        new FloorsInfo(obj);\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 获得当前站点信息\r\n     * @param {String} panoid 站点ID\r\n     */\r\n    getPanoByID(panoid) {\r\n        let url = \"/GetPanoByID?ImageID=\" + panoid;\r\n        $.ajax({\r\n            url: this.serverURL + url,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                if (data.GetPanoByIDResult) {\r\n                    if (!constants.c_StationInfo || (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetPanoByIDResult.ImageID)) {\r\n                        constants.c_isPreviewImageLoadEnd = false;\r\n                        constants.c_StationInfo = new StationInfo(data.GetPanoByIDResult);\r\n                        constants.sw_skyBox.addThumbnail();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 激光点云面片数据\r\n     * */\r\n    getFacadeByPanoID() {\r\n        let url = \"/GetFacadeByPanoID/?Z=\" + constants.c_StationInfo.nz + \"&PanoID=\" + constants.c_StationInfo.panoID + \"&TolerateZ=\" + 5;\r\n        $.ajax({\r\n            url: this.serverURL + url,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n\r\n                if (data.GetFacadeByPanoIDResult) {\r\n\r\n                    constants.c_facadeByPanoIDInfoArr.length = 0;\r\n\r\n                    data.GetFacadeByPanoIDResult.map((obj) => {\r\n\r\n                        constants.c_facadeByPanoIDInfoArr.push(new FacadeByPanoIDInfo(obj));\r\n\r\n                    });\r\n\r\n                    constants.sw_wallMesh.createWallFace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取老箭头方法\r\n     * */\r\n    getOldArrow() {\r\n        let url = \"/GetAdjacentPano/?date=\" + Math.random() * 100 + \"&ImageID=\" + constants.c_StationInfo.panoID;\r\n        $.ajax({\r\n            url: this.serverURL + url,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                if (data.GetAdjacentPanoResult) {\r\n                    constants.c_AdjacentPanoInfoArr.length = 0;\r\n                    data.GetAdjacentPanoResult.map((obj) => {\r\n                        constants.c_AdjacentPanoInfoArr.push(new ArrowInfo(obj, 1));\r\n                    });\r\n                    AddOldArrow();\r\n                } else {\r\n                    this.getNewArrow();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //获得新箭头\r\n    getNewArrow() {\r\n        let urls = \"?method=getLinkByPanoID&panoID=\" + constants.c_StationInfo.panoID;\r\n        $.ajax({\r\n            url: this.musServerURL + urls,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                constants.c_ArrowPanoInfoArr.length = 0;\r\n                if (data.Link) {\r\n                    data.Link.map((obj) => {\r\n                        constants.c_ArrowPanoInfoArr.push(new ArrowInfo(obj, 2));\r\n                    });\r\n                    AddNewArrow();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 地面跳转\r\n     * */\r\n    getOtherPanoByPosition(x, y, z, panoid) {\r\n        let urls = \"/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=\" + z + \"&Y=\" + y + \"&ImageID=\" + panoid + \"&X=\" + x;\r\n        $.ajax({\r\n            url: this.serverURL + urls,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetOtherPanoByPositionResult.ImageID) {\r\n                    constants.c_isPreviewImageLoadEnd = false;\r\n                    constants.c_StationInfo = new StationInfo(data.GetOtherPanoByPositionResult);\r\n                    constants.sw_skyBox.addThumbnail();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 墙面跳转\r\n     * @param {Number} x 3DS坐标X\r\n     * @param {Number} y 3DS坐标Y\r\n     * @param {Number} z 3DS坐标Z\r\n     * @param {Number} facadeid 点击跳转的墙面片ID\r\n     */\r\n    getOtherPanoByFacadeID(x, y, z, facadeid) {\r\n        let urls = \"/GetOtherPanoByFacadeID?facadeID=\" + facadeid + \"&Z=\" + z + \"&Y=\" + y + \"&X=\" + x;\r\n        $.ajax({\r\n            url: this.serverURL + urls,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络链接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetOtherPanoByFacadeIDResult.ImageID) {\r\n                    constants.c_isPreviewImageLoadEnd = false;\r\n                    constants.c_StationInfo = new StationInfo(data.GetOtherPanoByFacadeIDResult);\r\n                    constants.sw_skyBox.addThumbnail();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取标注\r\n     * */\r\n    getMarkerByPanoID() {\r\n        constants.c_markerInfoArr.length = 0;\r\n        let urls = \"?method=getMarkerByPanoID&panoID=\" + constants.c_StationInfo.panoID;\r\n        $.ajax({\r\n            url: this.musServerURL + urls,\r\n            type: 'GET',\r\n            cache: true,\r\n            dataType: 'json',\r\n            error: (data) => {\r\n                console.log(\"网络连接错误，请刷新重试！\");\r\n            },\r\n            success: (data) => {\r\n                if (data.MarkerInfo) {\r\n                    data.MarkerInfo.map((obj) => {\r\n                        constants.c_markerInfoArr.push(new SWMarkerInfo(obj));\r\n                    });\r\n                    AddMarkerMesh();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\nexport default ServerData;"]}]}