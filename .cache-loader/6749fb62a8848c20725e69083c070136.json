{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\libs\\Stats.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\libs\\Stats.js","mtime":1508999906337},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/**\n * @module Stats\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function Stats() {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement('div');\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener('click', function (event) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel(++mode % container.children.length);\n\t}, false);\n\n\t//\n\n\tfunction addPanel(panel) {\n\n\t\tcontainer.appendChild(panel.dom);\n\t\treturn panel;\n\t}\n\n\tfunction showPanel(id) {\n\n\t\tfor (var i = 0; i < container.children.length; i++) {\n\n\t\t\tcontainer.children[i].style.display = i === id ? 'block' : 'none';\n\t\t}\n\n\t\tmode = id;\n\t}\n\n\t//\n\n\tvar beginTime = (performance || Date).now(),\n\t    prevTime = beginTime,\n\t    frames = 0;\n\n\tvar fpsPanel = addPanel(new Stats.Panel('FPS', '#0ff', '#002'));\n\tvar msPanel = addPanel(new Stats.Panel('MS', '#0f0', '#020'));\n\n\tif (self.performance && self.performance.memory) {\n\n\t\tvar memPanel = addPanel(new Stats.Panel('MB', '#f08', '#201'));\n\t}\n\n\tshowPanel(0);\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function begin() {\n\n\t\t\tbeginTime = (performance || Date).now();\n\t\t},\n\n\t\tend: function end() {\n\n\t\t\tframes++;\n\n\t\t\tvar time = (performance || Date).now();\n\n\t\t\tmsPanel.update(time - beginTime, 200);\n\n\t\t\tif (time >= prevTime + 1000) {\n\n\t\t\t\tfpsPanel.update(frames * 1000 / (time - prevTime), 100);\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif (memPanel) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t},\n\n\t\tupdate: function update() {\n\n\t\t\tbeginTime = this.end();\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n};\n\nStats.Panel = function (name, fg, bg) {\n\n\tvar min = Infinity,\n\t    max = 0,\n\t    round = Math.round;\n\tvar PR = round(window.devicePixelRatio || 1);\n\n\tvar WIDTH = 80 * PR,\n\t    HEIGHT = 48 * PR,\n\t    TEXT_X = 3 * PR,\n\t    TEXT_Y = 2 * PR,\n\t    GRAPH_X = 3 * PR,\n\t    GRAPH_Y = 15 * PR,\n\t    GRAPH_WIDTH = 74 * PR,\n\t    GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement('canvas');\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext('2d');\n\tcontext.font = 'bold ' + 9 * PR + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect(0, 0, WIDTH, HEIGHT);\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText(name, TEXT_X, TEXT_Y);\n\tcontext.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function update(value, maxValue) {\n\n\t\t\tmin = Math.min(min, value);\n\t\t\tmax = Math.max(max, value);\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect(0, 0, WIDTH, GRAPH_Y);\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText(round(value) + ' ' + name + ' (' + round(min) + '-' + round(max) + ')', TEXT_X, TEXT_Y);\n\n\t\t\tcontext.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);\n\n\t\t\tcontext.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));\n\t\t}\n\n\t};\n};\n\nexports.default = Stats;",null]}