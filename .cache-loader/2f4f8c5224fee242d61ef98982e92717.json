{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\SWCameraModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\SWCameraModule.js","mtime":1527844484974},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SWConstants = require(\"../tool/SWConstants\");\n\nvar _SWTool = require(\"../tool/SWTool\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 相机控制类只有旋转和缩放，没有平移\r\n */\nvar SWCameraModule = function () {\n        function SWCameraModule() {\n                _classCallCheck(this, SWCameraModule);\n\n                /**相机状态枚举 */\n                this.STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY_PAN: 4 };\n\n                /**相机目前状态 */\n                this.state = this.STATE.NONE;\n\n                /**更新条件 */\n                this.EPS = 0.000001;\n\n                /**鼠标按钮 */\n                this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n                /**查看球的坐标*/\n                this.spherical = new THREE.Spherical();\n                /**操作球的坐标*/\n                this.sphericalDelta = new THREE.Spherical();\n\n                //这个选项实际上可以使进出进入; 为了向后兼容，保留为“缩放”。\n                /**设置为false以禁用缩放 */\n                this.enableZoom = true;\n                /**缩放速度 */\n                this.zoomSpeed = 2.0;\n\n                /**设置为false以禁用旋转 */\n                this.enableRotate = true;\n                /**旋转速度 */\n                this.rotateSpeed = 1.5;\n\n                /**自动旋转 */\n                this.autoRotate = true;\n                /**自动旋转速度，当fps为60时，每轮30秒 */\n                this.autoRotateSpeed = 2.0;\n\n                //缩放距离（仅适用于PerspectiveCamera）\n                this.minDistance = 100;\n                this.maxDistance = 500;\n\n                //相机水平上限和下限\n                //如果设置，则必须是区间[ - Math.PI，Math.PI]的子区间。\n                this.minAzimuthAngle = -Math.PI; // 弧度\n                this.maxAzimuthAngle = Math.PI; // 弧度\n\n                //相机垂直上限和下限\n                //范围从-Math.PI到Math.PI弧度。\n                this.minPolarAngle = -Math.PI / 2; // 弧度\n                this.maxPolarAngle = Math.PI / 2; // 弧度\n\n                //设置为true以启用阻尼（惯性）\n                //如果启用阻尼，则必须在动画循环中调用controls.update（）\n                this.enableDamping = true;\n                this.dampingFactor = 0.25;\n\n                this.scale = 1;\n                this.zoomChanged = false;\n\n                //旋转坐标值\n                this.rotateStart = new THREE.Vector2();\n                this.rotateEnd = new THREE.Vector2();\n                this.rotateDelta = new THREE.Vector2();\n\n                //缩放坐标值\n                this.dollyStart = new THREE.Vector2();\n                this.dollyEnd = new THREE.Vector2();\n                this.dollyDelta = new THREE.Vector2();\n\n                //可以放大或缩小多少（仅限OrthographicCamera）\n                this.minZoom = 0;\n                this.maxZoom = Infinity;\n\n                //“target”设置焦点的位置，对象绕过的位置\n                this.target = new THREE.Vector3();\n\n                this.offset = new THREE.Vector3();\n\n                // 所以camera.up是轨道轴\n                this.quat = new THREE.Quaternion().setFromUnitVectors(_SWConstants.camera.up, new THREE.Vector3(0, 1, 0));\n                this.quatInverse = this.quat.clone().inverse();\n\n                this.lastPosition = new THREE.Vector3();\n                this.lastQuaternion = new THREE.Quaternion();\n\n                this.rotateYaw = 0;\n                this.rotatePitch = 0;\n\n                // 围绕X轴旋转，也叫做俯仰角\n                this.maxPitch = 85;\n                //围绕X轴旋转，也叫做俯仰角\n                this.minPitch = -85;\n                //75.0179580971,//围绕Y轴旋转，也叫偏航角\n                this.yaw_Camera = 0;\n                //围绕X轴旋转，也叫做俯仰角\n                this.picth_Camera = 0;\n                //围绕Z轴旋转，也叫翻滚角\n                this.roll_Camera = 0;\n        }\n\n        _createClass(SWCameraModule, [{\n                key: \"update\",\n                value: function update() {}\n\n                // this.offset.copy(camera.position);\n\n                // // 将偏移量旋转到“y轴向上”空间\n                // this.offset.applyQuaternion(this.quat);\n\n                // // 从z轴绕y轴的角度\n                // this.spherical.setFromVector3(this.offset);\n\n                // if (this.autoRotate && this.state === this.STATE.NONE) {\n\n                //     this.rotateLeft(this.getAutoRotationAngle());\n\n                // }\n\n                // this.spherical.theta += this.sphericalDelta.theta;\n                // this.spherical.phi += this.sphericalDelta.phi;\n\n                // // 将θ限制在期望的限制之间\n                // this.spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this.spherical.theta));\n\n                // //限制phi在期望的限制之间\n                // this.spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this.spherical.phi));\n\n                // this.spherical.makeSafe();\n\n                // this.spherical.radius *= this.scale;\n\n                // //将半径限制在期望的限制之间\n                // this.spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this.spherical.radius));\n\n                // this.offset.setFromSpherical(this.spherical);\n\n                // //将偏移量旋转回“camera-up-vector-is-up”空间\n                // this.offset.applyQuaternion(this.quatInverse);\n\n                // // position.copy(this.target).add(this.offset);\n\n                // camera.lookAt(this.offset);\n\n                // if (this.enableDamping === true) {\n\n                //     this.sphericalDelta.theta *= (1 - this.dampingFactor);\n                //     this.sphericalDelta.phi *= (1 - this.dampingFactor);\n\n                // } else {\n                //     this.sphericalDelta.set(0, 0, 0);\n                // }\n\n                // this.scale = 1;\n\n                // //更新条件是：\n                // // min（相机位移，相机以弧度旋转）^ 2> EPS\n                // //使用小角度逼近cos（x / 2）= 1 - x ^ 2/8\n                // if (this.zoomChanged ||\n                //     this.lastPosition.distanceToSquared(camera.position) > this.EPS ||\n                //     8 * (1 - this.lastQuaternion.dot(camera.quaternion)) > this.EPS) {\n\n                //     // this.dispatchEvent(this.changeEvent);\n\n                //     this.lastPosition.copy(camera.position);\n                //     this.lastQuaternion.copy(camera.quaternion);\n                //     this.zoomChanged = false;\n\n                //     return true;\n                // }\n                // return false;\n\n\n                /**获得自动旋转角度 */\n\n        }, {\n                key: \"getAutoRotationAngle\",\n                value: function getAutoRotationAngle() {\n                        return 2 * Math.PI / 60 / 60 * this.autoRotateSpeed;\n                }\n\n                /**设置缩放比例 */\n\n        }, {\n                key: \"getZoomScale\",\n                value: function getZoomScale() {\n                        return Math.pow(2, this.zoomSpeed);\n                }\n\n                /**缩小 */\n\n        }, {\n                key: \"dollyIn\",\n                value: function dollyIn(dollyScale) {\n\n                        if (_SWConstants.camera.isPerspectiveCamera) {\n\n                                _SWConstants.camera.fov = Math.max(_SWConstants.c_Minfov, Math.min(_SWConstants.c_Maxfov, _SWConstants.camera.fov + dollyScale));\n                        } else if (_SWConstants.camera.isOrthographicCamera) {\n\n                                _SWConstants.camera.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, _SWConstants.camera.zoom * dollyScale));\n                                _SWConstants.camera.updateProjectionMatrix();\n                                this.zoomChanged = true;\n                        } else {\n                                this.enableZoom = false;\n                        }\n                }\n\n                /**放大 */\n\n        }, {\n                key: \"dollyOut\",\n                value: function dollyOut(dollyScale) {\n\n                        if (_SWConstants.camera.isPerspectiveCamera) {\n\n                                _SWConstants.camera.fov = Math.max(_SWConstants.c_Minfov, Math.min(_SWConstants.c_Maxfov, _SWConstants.camera.fov - dollyScale));\n                        } else if (_SWConstants.camera.isOrthographicCamera) {\n\n                                _SWConstants.camera.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, _SWConstants.camera.zoom / dollyScale));\n                                _SWConstants.camera.updateProjectionMatrix();\n                                this.zoomChanged = true;\n                        } else {\n                                this.enableZoom = false;\n                        }\n                }\n\n                /**\r\n                 * 鼠标按下\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onMouseDown\",\n                value: function onMouseDown(event) {\n\n                        event.preventDefault();\n\n                        if (event.button == this.mouseButtons.ORBIT) {\n\n                                if (this.enableRotate === false) return;\n\n                                this.rotateStart.set(event.clientX, event.clientY);\n\n                                this.state = this.STATE.ROTATE;\n                        }\n                }\n\n                /**\r\n                 * 鼠标移动\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onMouseMove\",\n                value: function onMouseMove(event) {\n\n                        event.preventDefault();\n\n                        if (this.state == this.STATE.ROTATE) {\n\n                                if (this.enableRotate === false) return;\n\n                                this.rotateEnd.set(event.clientX, event.clientY);\n\n                                this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);\n\n                                this.rotateYaw = THREE.Math.radToDeg(2 * Math.PI * this.rotateDelta.x / window.innerWidth); // 显示区域\n\n                                this.rotatePitch = THREE.Math.radToDeg(2 * Math.PI * this.rotateDelta.y / window.innerHeight);\n\n                                this.cameraLookAt(this.rotateYaw, this.rotatePitch);\n\n                                this.rotateStart.copy(this.rotateEnd);\n                        }\n                }\n\n                /**\r\n                 * 鼠标弹起\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onMouseUp\",\n                value: function onMouseUp(event) {\n\n                        this.state = this.STATE.NONE;\n                }\n\n                /**\r\n                 * 滚轮缩放\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onMouseWheel\",\n                value: function onMouseWheel(event) {\n\n                        if (this.enableZoom === false || this.state !== this.STATE.NONE && this.state !== this.STATE.ROTATE) return;\n\n                        event.preventDefault();\n                        event.stopPropagation();\n\n                        if (event.deltaY < 0) {\n\n                                this.dollyOut(this.getZoomScale());\n                        } else if (event.deltaY > 0) {\n\n                                this.dollyIn(this.getZoomScale());\n                        }\n                }\n\n                /**\r\n                 * 手指按下\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onTouchStart\",\n                value: function onTouchStart(event) {\n\n                        event.preventDefault();\n\n                        switch (event.touches.length) {\n\n                                case 1:\n                                        // 单指触摸：旋转\n\n                                        if (this.enableRotate === false) return;\n\n                                        this.rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n\n                                        this.state = this.STATE.TOUCH_ROTATE;\n\n                                        break;\n\n                                case 2:\n                                        // 双指触摸：移动/缩放\n\n                                        if (this.enableZoom === false && this.enablePan === false) return;\n\n                                        if (this.enableZoom) {\n\n                                                var dx = event.touches[0].pageX - event.touches[1].pageX;\n                                                var dy = event.touches[0].pageY - event.touches[1].pageY;\n\n                                                var distance = Math.sqrt(dx * dx + dy * dy);\n\n                                                this.dollyStart.set(0, distance);\n                                        }\n\n                                        this.state = this.STATE.TOUCH_DOLLY_PAN;\n\n                                        break;\n\n                                default:\n                                        this.state = this.STATE.NONE;\n\n                        }\n                }\n\n                /**\r\n                 * 手指移动\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onTouchMove\",\n                value: function onTouchMove(event) {\n\n                        event.preventDefault();\n                        event.stopPropagation();\n\n                        switch (event.touches.length) {\n\n                                case 1:\n                                        // 单指触摸：旋转\n\n                                        if (this.enableRotate === false) return;\n                                        if (this.state !== this.STATE.TOUCH_ROTATE) return; // is this needed?\n\n                                        this.rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n\n                                        this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);\n\n                                        this.rotateYaw = THREE.Math.radToDeg(2 * Math.PI * this.rotateDelta.x / window.innerWidth); // 显示区域\n\n                                        this.rotatePitch = THREE.Math.radToDeg(2 * Math.PI * this.rotateDelta.y / window.innerHeight);\n\n                                        this.cameraLookAt(this.rotateYaw, this.rotatePitch);\n\n                                        this.rotateStart.copy(this.rotateEnd);\n\n                                        this.update();\n\n                                        break;\n\n                                case 2:\n                                        // 双指触摸：移动/缩放\n\n                                        if (this.enableZoom === false && this.enablePan === false) return;\n                                        if (this.state !== this.STATE.TOUCH_DOLLY_PAN) return; // is this needed?\n\n                                        var dx = event.touches[0].pageX - event.touches[1].pageX;\n                                        var dy = event.touches[0].pageY - event.touches[1].pageY;\n\n                                        var distance = Math.sqrt(dx * dx + dy * dy);\n\n                                        this.dollyEnd.set(0, distance);\n\n                                        this.dollyDelta.set(0, Math.pow(this.dollyEnd.y / this.dollyStart.y, this.zoomSpeed));\n\n                                        this.dollyIn(this.dollyDelta.y);\n\n                                        this.dollyStart.copy(this.dollyEnd);\n                                        break;\n\n                                default:\n\n                                        this.state = this.STATE.NONE;\n                        }\n                }\n\n                /**\r\n                 * 手指弹起\r\n                 * @param {MouseEvent} event \r\n                 */\n\n        }, {\n                key: \"onTouchEnd\",\n                value: function onTouchEnd(event) {\n\n                        this.state = this.STATE.NONE;\n                }\n\n                /**\r\n                 * 有激光点云时点击墙面会放大\r\n                 * @param {Number} type \r\n                 */\n\n        }, {\n                key: \"setWallWheel\",\n                value: function setWallWheel(type) {}\n\n                /**\r\n                 * 这个是直接设置相机视角值\r\n                 * @param {*} yaws \r\n                 * @param {*} pitch \r\n                 */\n\n        }, {\n                key: \"setHousesViewAngle\",\n                value: function setHousesViewAngle(yaws, pitch) {\n                        if (yaws) this.yaw_Camera = yaws;\n                        if (pitch) this.picth_Camera = pitch;\n                        _SWConstants.camera.lookAt((0, _SWTool.YPRToVector3)(this.yaw_Camera, this.picth_Camera, 0));\n                }\n        }, {\n                key: \"cameraLookAt\",\n\n\n                /**\r\n                 * 这是设置累加值\r\n                 * @param {*} yaws \r\n                 * @param {*} pitch \r\n                 */\n                value: function cameraLookAt(yaws, pitch) {\n                        this.picth_Camera = Math.max(this.minPitch, Math.min(this.maxPitch, this.picth_Camera + pitch));\n                        this.yaw_Camera = (0, _SWTool.getNumberMax360)(this.yaw_Camera + yaws);\n\n                        _SWConstants.camera.lookAt((0, _SWTool.YPRToVector3)(this.yaw_Camera, this.picth_Camera, 0));\n                }\n        }]);\n\n        return SWCameraModule;\n}();\n\nexports.default = SWCameraModule;",null]}