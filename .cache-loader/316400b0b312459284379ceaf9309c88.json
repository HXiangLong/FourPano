{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","mtime":1543398029932},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global $*/\n\nvar _SWConstants = require('../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWArrowInfo = require('../data/SWArrowInfo');\n\nvar _SWArrowInfo2 = _interopRequireDefault(_SWArrowInfo);\n\nvar _SWFacadeByPanoIDInfo = require('../data/SWFacadeByPanoIDInfo');\n\nvar _SWFacadeByPanoIDInfo2 = _interopRequireDefault(_SWFacadeByPanoIDInfo);\n\nvar _SWFloorsInfo = require('../data/SWFloorsInfo');\n\nvar _SWFloorsInfo2 = _interopRequireDefault(_SWFloorsInfo);\n\nvar _SWMarkerInfo = require('../data/SWMarkerInfo');\n\nvar _SWMarkerInfo2 = _interopRequireDefault(_SWMarkerInfo);\n\nvar _SWMultiDataByParentIDInfo = require('../data/SWMultiDataByParentIDInfo');\n\nvar _SWMultiDataByParentIDInfo2 = _interopRequireDefault(_SWMultiDataByParentIDInfo);\n\nvar _SWThumbnailsInfo = require('../data/SWThumbnailsInfo');\n\nvar _SWThumbnailsInfo2 = _interopRequireDefault(_SWThumbnailsInfo);\n\nvar _SWStationInfo = require('../data/SWStationInfo');\n\nvar _SWStationInfo2 = _interopRequireDefault(_SWStationInfo);\n\nvar _SWAllExhibitsForBuilding = require('../data/SWAllExhibitsForBuilding');\n\nvar _SWAllExhibitsForBuilding2 = _interopRequireDefault(_SWAllExhibitsForBuilding);\n\nvar _SWVideosData = require('../data/SWVideosData');\n\nvar _SWVideosData2 = _interopRequireDefault(_SWVideosData);\n\nvar _SWInitializeInstance = require('../tool/SWInitializeInstance');\n\nvar _store2 = require('../../views/redux/store/store');\n\nvar _store3 = _interopRequireDefault(_store2);\n\nvar _action = require('../../views/redux/action');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../tool/SWExternalConst.js');\nvar axios = require('axios');\n\n/**\r\n * 获取服务器数据\r\n */\n\nvar ServerData = function () {\n    function ServerData() {\n        _classCallCheck(this, ServerData);\n\n        /**博物馆ID*/\n        this.museumID = \"\";\n        /**建筑ID*/\n        this.displayID = \"\";\n        /**底层数据库链接*/\n        this.serverURL = \"\";\n        /**业务数据库链接*/\n        this.musServerURL = \"\";\n        /**默认第一站全景ID*/\n        this.firstPanoID = \"\";\n        /**数据存放处*/\n        this.resourcesUrl = \"\";\n        /**功能对象*/\n        this.featuresObj = {};\n        /**只加载一次 */\n        this.floorsForBuilding = true;\n    }\n\n    _createClass(ServerData, [{\n        key: 'getmusServerURL',\n        value: function getmusServerURL() {\n            return this.musServerURL;\n        }\n\n        /**\r\n         * 获取配置文件数据\r\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n\n            this.museumID = external.server_json.museumID;\n\n            this.displayID = external.server_json.displayID;\n\n            this.serverURL = external.server_json.serverUrl;\n\n            this.musServerURL = external.server_json.musServerUrl;\n\n            this.firstPanoID = external.server_json.firstPanoID;\n\n            this.resourcesUrl = external.server_json.resourcesUrl;\n\n            this.featuresObj = external.server_json.data;\n\n            this.getPanoByID(this.firstPanoID);\n        }\n\n        /**\r\n         * 获得所有楼层站点信息\r\n         */\n\n    }, {\n        key: 'getAllFloorsForBuilding',\n        value: function getAllFloorsForBuilding() {\n            var _this = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                var data = constants.sw_GetSQLData.GetAllFloorsForBuildingFun();\n                this.ReadFloorsForBuildingData(data);\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=GetAllFloorsForBuilding&buildingID=' + this.displayID + '&random=' + Math.random() * 10;\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this.ReadFloorsForBuildingData(json.data);\n            });\n        }\n\n        /**读取楼层数据 */\n\n    }, {\n        key: 'ReadFloorsForBuildingData',\n        value: function ReadFloorsForBuildingData(data) {\n            if (data) {\n                if (data.Floors) {\n                    data.Floors.forEach(function (obj) {\n                        new _SWFloorsInfo2.default(obj);\n                    });\n                    //数据来之后可以显示小地图\n                    if (constants.c_mapShow) {\n                        var store = (0, _store3.default)();\n                        store.dispatch((0, _action.show_PanoMap_fun)({\n                            off: true,\n                            phoneOff: true\n                        }));\n                    }\n                }\n            }\n            this.getAllThumbnailsForMuseum();\n            this.getAllExhibitsForBuilding();\n            this.getAllVideos();\n        }\n\n        /**\r\n         * 获得当前站点信息\r\n         * @param {String} panoid 站点ID\r\n         */\n\n    }, {\n        key: 'getPanoByID',\n        value: function getPanoByID(panoid) {\n            var _this2 = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                var data = constants.sw_GetSQLData.GetPanoByIDFun(panoid);\n                this.ReadPanoByIDData(data);\n                return;\n            }\n\n            var urls = this.serverURL + '/GetPanoByID?ImageID=' + panoid;\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this2.ReadPanoByIDData(json.data.GetPanoByIDResult);\n            });\n        }\n\n        /**\r\n         * 读取所有拍摄站点数据\r\n         * @param {Object} data \r\n         */\n\n    }, {\n        key: 'ReadPanoByIDData',\n        value: function ReadPanoByIDData(data) {\n            if (data) {\n                if (!constants.c_StationInfo || !constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.ImageID) {\n                    constants.c_isPreviewImageLoadEnd = true;\n                    constants.c_StationInfo && (constants.c_LastStopPanoID = constants.c_StationInfo.panoID); //记录上一站ID\n                    constants.c_StationInfo = new _SWStationInfo2.default(data);\n                    constants.sw_skyBox && constants.sw_skyBox.addThumbnail();\n                    if (this.floorsForBuilding) {\n                        this.floorsForBuilding = false;\n                        this.getAllFloorsForBuilding();\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\r\n         * 激光点云面片数据\r\n         * */\n\n    }, {\n        key: 'getFacadeByPanoID',\n        value: function getFacadeByPanoID() {\n            var _this3 = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n                var data = constants.sw_GetSQLData.GetFacadeByPanoIDFun(constants.c_StationInfo.panoID);\n                this.ReadFacadeByPanoIDData(data);\n                return;\n            }\n\n            var urls = this.serverURL + '/GetFacadeByPanoID/?Z=' + constants.c_StationInfo.nz + '&PanoID=' + constants.c_StationInfo.panoID + '&TolerateZ=5';\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this3.ReadFacadeByPanoIDData(json.data.GetFacadeByPanoIDResult);\n            });\n        }\n\n        /**读取墙面片数据 */\n\n    }, {\n        key: 'ReadFacadeByPanoIDData',\n        value: function ReadFacadeByPanoIDData(data) {\n\n            if (data) {\n                constants.c_facadeByPanoIDInfoArr.length = 0;\n                data.forEach(function (obj) {\n                    constants.c_facadeByPanoIDInfoArr.push(new _SWFacadeByPanoIDInfo2.default(obj));\n                });\n                constants.sw_wallMesh.createWallFace();\n            }\n        }\n\n        /**\r\n         * 获取老箭头方法\r\n         * */\n\n    }, {\n        key: 'getOldArrow',\n        value: function getOldArrow() {\n            var _this4 = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n\n                var arrowArr = void 0;\n                if (constants.c_siteRepresentation) {\n                    arrowArr = constants.sw_GetSQLData.GetAdjacentPanoFun(constants.c_StationInfo.panoID);\n                    this.ReadOldArrowData(arrowArr, 1);\n                } else {\n                    arrowArr = constants.sw_GetSQLData.GetStreetViewLinkFun(constants.c_StationInfo.panoID);\n                    this.ReadOldArrowData(arrowArr, 3);\n                }\n                return;\n            }\n\n            var urls = this.serverURL + '/GetAdjacentPano/?date=' + Math.random() * 100 + '&ImageID=' + constants.c_StationInfo.panoID;\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this4.ReadOldArrowData(json.data.GetAdjacentPanoResult);\n            });\n        }\n\n        /**读取旧箭头数据 */\n\n    }, {\n        key: 'ReadOldArrowData',\n        value: function ReadOldArrowData(data, type) {\n            if (data && data.length != 0) {\n                constants.c_AdjacentPanoInfoArr.length = 0;\n                data.forEach(function (obj) {\n                    constants.c_AdjacentPanoInfoArr.push(new _SWArrowInfo2.default(obj, type));\n                });\n                (0, _SWInitializeInstance.AddOldArrow)();\n            } else {\n                this.getNewArrow();\n            }\n        }\n\n        //获得新箭头\n\n    }, {\n        key: 'getNewArrow',\n        value: function getNewArrow() {\n            var _this5 = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus && constants.c_siteRepresentation) {\n                //读取本地文件\n                var arrowArr = constants.sw_GetSQLData.getLinkByPanoIDFun(constants.c_StationInfo.panoID);\n                this.ReadNewArrowData(arrowArr);\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=getLinkByPanoID&panoID=' + constants.c_StationInfo.panoID;\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this5.ReadNewArrowData(json.data.Link);\n            });\n        }\n\n        /**读取新箭头数据 */\n\n    }, {\n        key: 'ReadNewArrowData',\n        value: function ReadNewArrowData(data) {\n\n            constants.c_ArrowPanoInfoArr.length = 0;\n            if (data && data.length != 0) {\n                data.forEach(function (obj) {\n                    constants.c_ArrowPanoInfoArr.push(new _SWArrowInfo2.default(obj, 2));\n                });\n                (0, _SWInitializeInstance.AddNewArrow)();\n            }\n        }\n\n        /**\r\n         * 地面跳转\r\n         * @param {Object} obj 传入参数 obj.type = 1 单机版 =2网络版 {obj.panoID 单机版参数 ,obj.x 3DS坐标X, obj.y 3DS坐标Y, obj.z 3DS坐标Z, obj.panoid 面片ID}\r\n         * */\n\n    }, {\n        key: 'getOtherPanoByPosition',\n        value: function getOtherPanoByPosition(obj) {\n            var _this6 = this;\n\n            if (obj.type == 1) {\n                var data = constants.sw_GetSQLData.GetPanoByIDFun(obj.panoID);\n                this.ReadPanoByIDData(data);\n            } else {\n                var urls = this.serverURL + '/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=' + obj.z + '&Y=' + obj.y + '&ImageID=' + obj.panoid + '&X=' + obj.x;\n                axios.get(urls, {\n                    responseType: \"json\"\n                }).then(function (json) {\n                    _this6.ReadPanoByIDData(json.data.GetOtherPanoByPositionResult);\n                });\n            }\n        }\n\n        /**\r\n         * 墙面跳转\r\n         * @param {Object} obj 传入参数 obj.type = 1 单机版 =2网络版 {obj.panoID 单机版参数 ,obj.x 3DS坐标X, obj.y 3DS坐标Y, obj.z 3DS坐标Z, obj.facadeid 面片ID}\r\n         */\n\n    }, {\n        key: 'getOtherPanoByFacadeID',\n        value: function getOtherPanoByFacadeID(obj) {\n            var _this7 = this;\n\n            if (obj.type == 1) {\n                var data = constants.sw_GetSQLData.GetPanoByIDFun(obj.panoID);\n                if (this.ReadPanoByIDData(data)) {\n                    constants.c_isWallClickRotateBoo = true;\n                }\n            } else {\n                var urls = this.serverURL + '/GetOtherPanoByFacadeID?facadeID=' + obj.facadeid + '&Z=' + obj.z + '&Y=' + obj.y + '&X=' + obj.x;\n                axios.get(urls, {\n                    responseType: \"json\"\n                }).then(function (json) {\n                    if (_this7.ReadPanoByIDData(json.data.GetOtherPanoByFacadeIDResult)) {\n                        constants.c_isWallClickRotateBoo = true;\n                    }\n                });\n            }\n        }\n\n        /**\r\n         * 获取标注\r\n         * */\n\n    }, {\n        key: 'getMarkerByPanoID',\n        value: function getMarkerByPanoID() {\n            var _this8 = this;\n\n            constants.c_markerInfoArr.length = 0;\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n                var data = constants.sw_GetSQLData.getMarkByPanoIDFun(constants.c_StationInfo.panoID);\n                this.ReadAllMarkerData(data);\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=getMarkerByPanoID&panoID=' + constants.c_StationInfo.panoID;\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this8.ReadAllMarkerData(json.data.MarkerInfo);\n            });\n        }\n\n        /**\r\n         * 读取标注信息\r\n         * @param {Object} data \r\n         */\n\n    }, {\n        key: 'ReadAllMarkerData',\n        value: function ReadAllMarkerData(data) {\n            if (data) {\n                data.forEach(function (obj) {\n                    constants.c_markerInfoArr.push(new _SWMarkerInfo2.default(obj));\n                });\n            }\n        }\n\n        /**\r\n         * 获取推荐展厅数据\r\n         * */\n\n    }, {\n        key: 'getAllThumbnailsForMuseum',\n        value: function getAllThumbnailsForMuseum() {\n            var _this9 = this;\n\n            if (constants.c_isEditorStatus || constants.c_thumbnailsForMuseum.length > 0) {\n                return;\n            }\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n                var data = constants.sw_GetSQLData.GetAllThumbnailsForBuildingFun();\n                this.ReadAllThumbnailsData(data);\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=GetAllThumbnailsForBuilding&buildingID=' + this.displayID;\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this9.ReadAllThumbnailsData(json.data.thumbnails);\n            });\n        }\n\n        /**\r\n         * 读取所有推荐展厅\r\n         * @param {Object} data \r\n         */\n\n    }, {\n        key: 'ReadAllThumbnailsData',\n        value: function ReadAllThumbnailsData(data) {\n            if (data) {\n                data.forEach(function (obj) {\n                    constants.c_thumbnailsForMuseum.push(new _SWThumbnailsInfo2.default(obj));\n                });\n            }\n        }\n\n        /**\r\n         * 获取所有文物信息列表\r\n         * */\n\n    }, {\n        key: 'getAllExhibitsForBuilding',\n        value: function getAllExhibitsForBuilding() {\n            var _this10 = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n\n                var data = constants.sw_GetSQLData.GetAllExhibitsForBuildingFun();\n\n                this.ReadAllExhibitsData(data);\n\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=GetAllExhibitsForBuilding&buildingID=' + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                _this10.ReadAllExhibitsData(json.data.Exhibits);\n            });\n        }\n\n        /**\r\n         * 读取所有文物信息\r\n         * @param {Object} data \r\n         */\n\n    }, {\n        key: 'ReadAllExhibitsData',\n        value: function ReadAllExhibitsData(data) {\n            if (data) {\n\n                data.forEach(function (obj) {\n\n                    var allExhibits = new _SWAllExhibitsForBuilding2.default(obj);\n\n                    allExhibits.markerID.forEach(function (markerid) {\n                        //所有标注对应说明表\n\n                        constants.c_allExhibitsForMarkerTable.add(markerid, allExhibits);\n                    });\n\n                    var markerIDArr = allExhibits.markerID[0]; //显示照片墙用\n                    constants.c_allExhibitsForBuildingTable.add(markerIDArr, allExhibits);\n                });\n            }\n        }\n\n        /**\r\n         * 获取单个文物信息\r\n         * */\n\n    }, {\n        key: 'getMultiDataByParentID',\n        value: function getMultiDataByParentID(eid, type) {\n            var _this11 = this;\n\n            var muType = type;\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n\n                var data = constants.sw_GetSQLData.GetMultiDataByParentIDFun(eid);\n\n                this.ReadMultiData(data, eid, muType);\n\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=GetMultiDataByParentID&parentID=' + eid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                _this11.ReadMultiData(json.data.MultiDatas, eid, muType);\n            });\n        }\n\n        /**读取单个热点图片 */\n\n    }, {\n        key: 'ReadMultiData',\n        value: function ReadMultiData(data, eid, muType) {\n            if (data) {\n                var arr = [];\n\n                data.forEach(function (obj) {\n\n                    var multiData = new _SWMultiDataByParentIDInfo2.default(obj);\n\n                    var arr1 = multiData.filePath.split('/');\n\n                    multiData.PCMax = constants.sw_getService.resourcesUrl + '/' + multiData.filePath; //电脑版大图\n\n                    multiData.phoneMax = constants.sw_getService.resourcesUrl + '/' + arr1[0] + '/' + arr1[1] + '/' + arr1[2] + '/phoneMax/' + arr1[3]; //手机版大图\n\n                    multiData.thumbnail = constants.sw_getService.resourcesUrl + '/' + arr1[0] + '/' + arr1[1] + '/' + arr1[2] + '/phone/' + arr1[3];\n\n                    arr.push(multiData);\n                });\n\n                constants.c_multiDataByParentIDTable.add(eid, arr);\n\n                if (muType == 1) {\n                    //图文\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        imglist: arr\n                    }));\n                } else {\n                    //图片\n                    var markerImgList = [],\n                        markerthumbs = [];\n\n                    arr.forEach(function (item) {\n\n                        markerImgList.push(constants.c_currentState == constants.c_currentStateEnum.phoneStatus ? item.phoneMax : item.PCMax);\n\n                        markerthumbs.push(item.thumbnail);\n                    });\n\n                    var _store = (0, _store3.default)();\n\n                    _store.dispatch((0, _action.show_ViewPicture_fun)({\n                        off: true,\n                        idx: 0,\n                        imageList: markerImgList,\n                        thumbs: markerthumbs\n                    }));\n                }\n            }\n        }\n\n        /**\r\n         * 获取所有视频列表\r\n         * */\n\n    }, {\n        key: 'getAllVideos',\n        value: function getAllVideos() {\n            var _this12 = this;\n\n            if (constants.c_currentState != constants.c_currentStateEnum.editorStatus) {\n                //读取本地文件\n\n                var data = constants.sw_GetSQLData.getAllVideoFun();\n\n                this.ReadAllVideosData(data);\n\n                return;\n            }\n\n            var urls = this.musServerURL + '?method=getAllVideos';\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                _this12.ReadAllVideosData(json.data.videoInfo);\n            });\n        }\n\n        /**\r\n         * 读取视频文件\r\n         * @param {Object} data \r\n         */\n\n    }, {\n        key: 'ReadAllVideosData',\n        value: function ReadAllVideosData(data) {\n            if (data) {\n\n                data.forEach(function (obj) {\n\n                    var vd = new _SWVideosData2.default(obj);\n\n                    var arr = [];\n\n                    if (constants.c_allVideoTable.containsKey(vd.panoID)) {\n\n                        arr = constants.c_allVideoTable.getValue(vd.panoID);\n                    }\n\n                    arr.push(vd);\n\n                    constants.c_allVideoTable.add(vd.panoID, arr);\n                });\n            }\n        }\n\n        /**获取喜欢数 */\n\n    }, {\n        key: 'GetLikesForExhibitID',\n        value: function GetLikesForExhibitID(exhibitid) {\n            var urls = this.musServerURL + '?method=GetLikesForExhibitID&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Likes) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.Likes = json.data.Likes;\n                        }\n                    });\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        likeNum: json.data.Likes\n                    }));\n                }\n            });\n        }\n\n        /**新增喜欢数 */\n\n    }, {\n        key: 'SetLikesForExhibitID',\n        value: function SetLikesForExhibitID(exhibitid) {\n            var urls = this.musServerURL + '?method=SetLikesForExhibitID&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Likes) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.likes = json.data.Likes;\n                        }\n                    });\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        likeNum: json.data.Likes\n                    }));\n                }\n            });\n        }\n\n        /**新增评论 按照文物列表exhibitid*/\n\n    }, {\n        key: 'AddComment',\n        value: function AddComment(exhibitid, contents) {\n\n            var urls = this.musServerURL + '?method=AddComment&panoid=&uid=&exhibitid=' + exhibitid + '&contents=' + contents;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Message) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.commentNum = parseInt(json.data.Message);\n                        }\n                    });\n                }\n            });\n        }\n\n        /**查询总数 */\n\n    }, {\n        key: 'SelectCommentNum',\n        value: function SelectCommentNum(exhibitid) {\n            var urls = this.musServerURL + '?method=SelectCommentNum&panoid=&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Message) {\n\n                    var allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    allExhibits.forEach(function (item) {\n\n                        if (item.exhibitID == constants.c_likeToExhibitID) {\n\n                            item.commentNum = parseInt(json.data.Message);\n                        }\n                    });\n                }\n            });\n        }\n\n        /**查询最新评论20条 */\n\n    }, {\n        key: 'GetNewestComment',\n        value: function GetNewestComment(exhibitid) {\n            var urls = this.musServerURL + '?method=GetNewestComment&panoid=&exhibitid=' + exhibitid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Message) {\n\n                    // let commentTable = new HashTable();\n\n                    // let exhibitID = \"\";\n\n                    // json.data.Message.forEach((obj, idx) => {\n\n                    //     let swComment = new SWExhibitComment(obj);\n\n                    //     exhibitID = swComment.exhibitID;\n\n                    //     commentTable.add(swComment.gUID, swComment);\n                    // });\n\n                    // let allExhibits = constants.c_allExhibitsForBuildingTable.getValues();\n\n                    // allExhibits.forEach((item) => {\n\n                    //     if (item.exhibitID == exhibitID) {\n\n                    //         item.commentTable = commentTable;\n                    //     }\n                    // });\n\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_MarkerInterface_fun)({\n                        commentList: json.data.Message\n                    }));\n                }\n            });\n        }\n\n        /**分页查询，每次50条 */\n\n    }, {\n        key: 'GetAllComment',\n        value: function GetAllComment() {}\n    }]);\n\n    return ServerData;\n}();\n\nexports.default = ServerData;",null]}