{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","mtime":1540201855032},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global $*/\n\nvar _SWConstants = require('../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWArrowInfo = require('../data/SWArrowInfo');\n\nvar _SWArrowInfo2 = _interopRequireDefault(_SWArrowInfo);\n\nvar _SWFacadeByPanoIDInfo = require('../data/SWFacadeByPanoIDInfo');\n\nvar _SWFacadeByPanoIDInfo2 = _interopRequireDefault(_SWFacadeByPanoIDInfo);\n\nvar _SWFloorsInfo = require('../data/SWFloorsInfo');\n\nvar _SWFloorsInfo2 = _interopRequireDefault(_SWFloorsInfo);\n\nvar _SWMarkerInfo = require('../data/SWMarkerInfo');\n\nvar _SWMarkerInfo2 = _interopRequireDefault(_SWMarkerInfo);\n\nvar _SWMultiDataByParentIDInfo = require('../data/SWMultiDataByParentIDInfo');\n\nvar _SWMultiDataByParentIDInfo2 = _interopRequireDefault(_SWMultiDataByParentIDInfo);\n\nvar _SWThumbnailsInfo = require('../data/SWThumbnailsInfo');\n\nvar _SWThumbnailsInfo2 = _interopRequireDefault(_SWThumbnailsInfo);\n\nvar _SWStationInfo = require('../data/SWStationInfo');\n\nvar _SWStationInfo2 = _interopRequireDefault(_SWStationInfo);\n\nvar _SWAllExhibitsForBuilding = require('../data/SWAllExhibitsForBuilding');\n\nvar _SWAllExhibitsForBuilding2 = _interopRequireDefault(_SWAllExhibitsForBuilding);\n\nvar _SWVideosData = require('../data/SWVideosData');\n\nvar _SWVideosData2 = _interopRequireDefault(_SWVideosData);\n\nvar _SWInitializeInstance = require('../tool/SWInitializeInstance');\n\nvar _store2 = require('../../views/redux/store/store');\n\nvar _store3 = _interopRequireDefault(_store2);\n\nvar _action = require('../../views/redux/action');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../tool/SWExternalConst.js');\nvar axios = require('axios');\n\n/**\r\n * 获取服务器数据\r\n */\n\nvar ServerData = function () {\n    function ServerData() {\n        _classCallCheck(this, ServerData);\n\n        this.getAllVideos = function () {\n            var urls = this.musServerURL + \"?method=getAllVideos\";\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.videoInfo) {\n\n                    json.data.videoInfo.forEach(function (obj) {\n\n                        var vd = new _SWVideosData2.default(obj);\n\n                        constants.c_allVideoTable.add(vd.videoName, vd);\n                    });\n                }\n            });\n        };\n\n        /**博物馆ID*/\n        this.museumID = \"\";\n        /**建筑ID*/\n        this.displayID = \"\";\n        /**底层数据库链接*/\n        this.serverURL = \"\";\n        /**业务数据库链接*/\n        this.musServerURL = \"\";\n        /**默认第一站全景ID*/\n        this.firstPanoID = \"\";\n        /**数据存放处*/\n        this.resourcesUrl = \"\";\n        /**功能对象*/\n        this.featuresObj = {};\n        /**只加载一次 */\n        this.floorsForBuilding = true;\n    }\n\n    _createClass(ServerData, [{\n        key: 'getmusServerURL',\n        value: function getmusServerURL() {\n            return this.musServerURL;\n        }\n\n        /**\r\n         * 获取配置文件数据\r\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n\n            this.museumID = external.server_json.museumID;\n\n            this.displayID = external.server_json.displayID;\n\n            this.serverURL = external.server_json.serverUrl;\n\n            this.musServerURL = external.server_json.musServerUrl;\n\n            this.firstPanoID = external.server_json.firstPanoID;\n\n            this.resourcesUrl = external.server_json.resourcesUrl;\n\n            this.featuresObj = external.server_json.data;\n\n            this.getPanoByID(this.firstPanoID);\n        }\n\n        /**\r\n         * 获得所有楼层站点信息\r\n         */\n\n    }, {\n        key: 'getAllFloorsForBuilding',\n        value: function getAllFloorsForBuilding() {\n            var _this = this;\n\n            var urls = this.musServerURL + \"?method=GetAllFloorsForBuilding&buildingID=\" + this.displayID + \"&random=\" + Math.random() * 10;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.Floors) {\n\n                    json.data.Floors.forEach(function (obj) {\n\n                        new _SWFloorsInfo2.default(obj);\n                    });\n\n                    //数据来之后可以弹出展厅列表\n                    var store = (0, _store3.default)();\n\n                    store.dispatch((0, _action.show_PanoMap_fun)({\n                        off: true\n                    }));\n                }\n\n                _this.getAllThumbnailsForMuseum();\n                _this.getAllExhibitsForBuilding();\n                _this.getAllVideos();\n            });\n        }\n\n        /**\r\n         * 获得当前站点信息\r\n         * @param {String} panoid 站点ID\r\n         */\n\n    }, {\n        key: 'getPanoByID',\n        value: function getPanoByID(panoid) {\n            var _this2 = this;\n\n            var urls = this.serverURL + \"/GetPanoByID?ImageID=\" + panoid;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.GetPanoByIDResult) {\n\n                    if (!constants.c_StationInfo || constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetPanoByIDResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetPanoByIDResult);\n\n                        constants.sw_skyBox.addThumbnail();\n\n                        if (_this2.floorsForBuilding) {\n\n                            _this2.floorsForBuilding = false;\n\n                            _this2.getAllFloorsForBuilding();\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 激光点云面片数据\r\n         * */\n\n    }, {\n        key: 'getFacadeByPanoID',\n        value: function getFacadeByPanoID() {\n\n            var urls = this.serverURL + \"/GetFacadeByPanoID/?Z=\" + constants.c_StationInfo.nz + \"&PanoID=\" + constants.c_StationInfo.panoID + \"&TolerateZ=\" + 5;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetFacadeByPanoIDResult) {\n\n                    constants.c_facadeByPanoIDInfoArr.length = 0;\n\n                    json.data.GetFacadeByPanoIDResult.forEach(function (obj) {\n\n                        constants.c_facadeByPanoIDInfoArr.push(new _SWFacadeByPanoIDInfo2.default(obj));\n                    });\n\n                    constants.sw_wallMesh.createWallFace();\n                }\n            });\n        }\n\n        /**\r\n         * 获取老箭头方法\r\n         * */\n\n    }, {\n        key: 'getOldArrow',\n        value: function getOldArrow() {\n            var _this3 = this;\n\n            var urls = this.serverURL + \"/GetAdjacentPano/?date=\" + Math.random() * 100 + \"&ImageID=\" + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n                if (json.data.GetAdjacentPanoResult) {\n\n                    constants.c_AdjacentPanoInfoArr.length = 0;\n\n                    json.data.GetAdjacentPanoResult.forEach(function (obj) {\n\n                        constants.c_AdjacentPanoInfoArr.push(new _SWArrowInfo2.default(obj, 1));\n                    });\n\n                    (0, _SWInitializeInstance.AddOldArrow)();\n                } else {\n\n                    _this3.getNewArrow();\n                }\n            });\n        }\n\n        //获得新箭头\n\n    }, {\n        key: 'getNewArrow',\n        value: function getNewArrow() {\n\n            var urls = this.musServerURL + \"?method=getLinkByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                constants.c_ArrowPanoInfoArr.length = 0;\n\n                if (json.data.Link) {\n\n                    json.data.Link.forEach(function (obj) {\n\n                        constants.c_ArrowPanoInfoArr.push(new _SWArrowInfo2.default(obj, 2));\n                    });\n\n                    (0, _SWInitializeInstance.AddNewArrow)();\n                }\n            });\n        }\n\n        /**\r\n         * 地面跳转\r\n         * */\n\n    }, {\n        key: 'getOtherPanoByPosition',\n        value: function getOtherPanoByPosition(x, y, z, panoid) {\n\n            var urls = this.serverURL + \"/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=\" + z + \"&Y=\" + y + \"&ImageID=\" + panoid + \"&X=\" + x;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetOtherPanoByPositionResult) {\n\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByPositionResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetOtherPanoByPositionResult);\n\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 墙面跳转\r\n         * @param {Number} x 3DS坐标X\r\n         * @param {Number} y 3DS坐标Y\r\n         * @param {Number} z 3DS坐标Z\r\n         * @param {Number} facadeid 点击跳转的墙面片ID\r\n         */\n\n    }, {\n        key: 'getOtherPanoByFacadeID',\n        value: function getOtherPanoByFacadeID(x, y, z, facadeid) {\n\n            var urls = this.serverURL + \"/GetOtherPanoByFacadeID?facadeID=\" + facadeid + \"&Z=\" + z + \"&Y=\" + y + \"&X=\" + x;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.GetOtherPanoByFacadeIDResult) {\n\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != json.data.GetOtherPanoByFacadeIDResult.ImageID) {\n\n                        constants.c_isPreviewImageLoadEnd = false;\n\n                        constants.c_isWallClickRotateBoo = true;\n\n                        constants.c_StationInfo = new _SWStationInfo2.default(json.data.GetOtherPanoByFacadeIDResult);\n\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取标注\r\n         * */\n\n    }, {\n        key: 'getMarkerByPanoID',\n        value: function getMarkerByPanoID() {\n\n            constants.c_markerInfoArr.length = 0;\n\n            var urls = this.musServerURL + \"?method=getMarkerByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.MarkerInfo) {\n\n                    json.data.MarkerInfo.forEach(function (obj) {\n\n                        constants.c_markerInfoArr.push(new _SWMarkerInfo2.default(obj));\n                    });\n                }\n            });\n        }\n\n        /**\r\n         * 获取推荐展厅数据\r\n         * */\n\n    }, {\n        key: 'getAllThumbnailsForMuseum',\n        value: function getAllThumbnailsForMuseum() {\n            if (constants.c_isEditorStatus || constants.c_thumbnailsForMuseum.length > 0) {\n                return;\n            }\n            var urls = this.musServerURL + \"?method=GetAllThumbnailsForBuilding&buildingID=\" + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.thumbnails) {\n\n                    json.data.thumbnails.forEach(function (obj) {\n\n                        constants.c_thumbnailsForMuseum.push(new _SWThumbnailsInfo2.default(obj));\n                    });\n\n                    if (constants.c_thumbnailsShow) {\n                        //数据来之后可以弹出展厅列表\n                        var store = (0, _store3.default)();\n\n                        store.dispatch((0, _action.show_Thumbnails_fun)(true));\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取所有文物信息列表\r\n         * */\n\n    }, {\n        key: 'getAllExhibitsForBuilding',\n        value: function getAllExhibitsForBuilding() {\n            var urls = this.musServerURL + \"?method=GetAllExhibitsForBuilding&buildingID=\" + this.displayID;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.Exhibits) {\n\n                    json.data.Exhibits.forEach(function (obj) {\n\n                        var allExhibits = new _SWAllExhibitsForBuilding2.default(obj);\n\n                        var markerIDArr = allExhibits.markerID[0];\n\n                        constants.c_allExhibitsForBuildingTable.add(markerIDArr, allExhibits);\n                    });\n                }\n            });\n        }\n\n        /**\r\n         * 获取单个文物信息\r\n         * */\n\n    }, {\n        key: 'getMultiDataByParentID',\n        value: function getMultiDataByParentID(eid, type) {\n            var _this4 = this;\n\n            var urls = this.musServerURL + \"?method=GetMultiDataByParentID&parentID=\" + eid;\n            var muType = type;\n\n            axios.get(urls, {\n                responseType: \"json\"\n            }).then(function (json) {\n\n                if (json.data.MultiDatas) {\n\n                    var arr = [];\n\n                    json.data.MultiDatas.forEach(function (obj) {\n\n                        var multiData = new _SWMultiDataByParentIDInfo2.default(obj);\n\n                        arr.push(multiData);\n                    });\n\n                    constants.c_multiDataByParentIDTable.add(eid, arr);\n\n                    if (muType == 1) {\n                        //图文\n\n                        var store = (0, _store3.default)();\n\n                        store.dispatch((0, _action.show_MarkerInterface_fun)({\n                            imglist: arr\n                        }));\n                    } else {\n                        //图片\n                        var markerImgList = [],\n                            markerthumbs = [];\n\n                        arr.forEach(function (item) {\n                            var imgUrl = _this4.resourcesUrl + '/' + item.filePath;\n\n                            var arr1 = item.filePath.split('/');\n\n                            var pp = _this4.resourcesUrl + '/' + arr1[0] + '/' + arr1[1] + '/' + arr1[2] + '/phone/' + arr1[3];\n\n                            markerImgList.push(imgUrl);\n\n                            markerthumbs.push(pp);\n                        });\n\n                        var _store = (0, _store3.default)();\n\n                        _store.dispatch((0, _action.show_ViewPicture_fun)({\n                            off: true,\n                            idx: 0,\n                            imageList: markerImgList,\n                            thumbs: markerthumbs\n                        }));\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取所有视频列表\r\n         * */\n\n    }]);\n\n    return ServerData;\n}();\n\nexports.default = ServerData;",null]}