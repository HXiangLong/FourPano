{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallSurfaceModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallSurfaceModule.js","mtime":1531389995963},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../../tool/SWExternalConst');\n\n/**\r\n * 墙面探面\r\n */\n\nvar SWWallSurfaceModule = function () {\n        function SWWallSurfaceModule() {\n                _classCallCheck(this, SWWallSurfaceModule);\n\n                /**墙探面对象 */\n                this.wallFaceMash = undefined;\n                /**放大标识 */\n                this.plusSign = undefined;\n                /**缩小标识 */\n                this.minusSign = undefined;\n                /**地探面对象 */\n                this.groundFaceMash = undefined;\n                /**地探面距离 */\n                this.groundDisplaySize = -500;\n                /**探面距离显示框 */\n                this.textDiv = new _SWTool.TextDiv(new THREE.Vector3(0, 0, 0));\n                /**地面片是否可以跳转 */\n                this.isgroundFaceJumpBoo = false;\n                /**墙面是否可以跳转 */\n                this.isWallFaceJumpBoo = false;\n\n                this.createWallMash();\n\n                this.createGroundMash();\n        }\n\n        /**创建墙面片 */\n\n\n        _createClass(SWWallSurfaceModule, [{\n                key: 'createWallMash',\n                value: function createWallMash() {\n                        var material = new THREE.MeshLambertMaterial({\n                                color: 0xFFFFFF,\n                                depthTest: false,\n                                side: 2,\n                                transparent: true,\n                                opacity: 0.3\n                        });\n                        var geometry = new THREE.PlaneGeometry(200, 123.6);\n                        this.wallFaceMash = new THREE.Mesh(geometry, material);\n                        this.wallFaceMash.name = \"wallFaceMash\";\n                        this.wallFaceMash.userData.depthlevel = 4;\n                        _SWConstants.scene.add(this.wallFaceMash);\n\n                        var texture = new THREE.TextureLoader().load(external.plusSign_icon);\n                        texture.needsUpdate = true;\n                        material = new THREE.MeshBasicMaterial({\n                                map: texture,\n                                transparent: true,\n                                opacity: 1,\n                                depthTest: false,\n                                side: 2\n                        });\n\n                        geometry = new THREE.PlaneGeometry(32 * 0.3, 32 * 0.3, 1, 1);\n\n                        this.plusSign = new THREE.Mesh(geometry, material);\n                        this.plusSign.name = \"plusSign\";\n                        this.plusSign.userData.depthlevel = 5;\n                        this.plusSign.position.copy(new THREE.Vector3(-(200 - 32 * 0.5) * 0.5, -(123.6 - 32 * 0.5) * 0.5, 2));\n                        this.wallFaceMash.add(this.plusSign);\n\n                        texture = new THREE.TextureLoader().load(external.minusSign_icon);\n                        texture.needsUpdate = true;\n                        material = new THREE.MeshBasicMaterial({\n                                map: texture,\n                                transparent: true,\n                                opacity: 1,\n                                depthTest: false,\n                                side: 2\n                        });\n\n                        geometry = new THREE.PlaneGeometry(32 * 0.3, 32 * 0.3, 1, 1);\n\n                        this.minusSign = new THREE.Mesh(geometry, material);\n                        this.minusSign.name = \"minusSign\";\n                        this.minusSign.userData.depthlevel = 5;\n                        this.minusSign.position.copy(new THREE.Vector3(-(200 - 32 * 0.5) * 0.5, -(123.6 - 32 * 0.5) * 0.5, 2));\n                        this.wallFaceMash.add(this.minusSign);\n\n                        this.wallFaceMash.visible = false;\n                }\n\n                /**创建地面片 */\n\n        }, {\n                key: 'createGroundMash',\n                value: function createGroundMash() {\n                        var material = new THREE.MeshLambertMaterial({\n                                color: 0xFFFFFF,\n                                emissive: 0xFFFFFF,\n                                depthTest: true,\n                                side: 2,\n                                transparent: true,\n                                opacity: 0.4\n                        });\n                        var geometry = new THREE.CircleGeometry(250, 32);\n                        this.groundFaceMash = new THREE.Mesh(geometry, material);\n                        this.groundFaceMash.userData.depthlevel = 4;\n                        this.groundFaceMash.name = \"groundFace\";\n                        _SWConstants.scene.add(this.groundFaceMash);\n                        this.groundFaceMash.visible = false;\n                        this.groundFaceMash.rotation.x = THREE.Math.degToRad(90);\n                }\n\n                /**\r\n                 * 探面类型显示\r\n                 * @param {Number} wallType 0-都不显示 1-显示墙面 2-显示地面\r\n                 * @param {Number} zoomType 0-不缩放、要跳转 1-放大 2-缩小\r\n                 */\n\n        }, {\n                key: 'wallProbeSurfaceVisible',\n                value: function wallProbeSurfaceVisible(wallType, zoomType) {\n\n                        if (_SWConstants.c_isMeasureStatus) wallType = 0; //测量状态不显示探面\n\n                        this.wallFaceMash.visible = wallType === 1;\n\n                        this.groundFaceMash.visible = wallType === 2;\n\n                        this.textDiv.style.display = this.groundFaceMash.visible ? \"block\" : \"none\";\n\n                        this.plusSign.visible = zoomType === 1;\n\n                        this.minusSign.visible = zoomType === 2;\n                }\n\n                /**\r\n                 * 地面片上移动\r\n                 * @param {Object} obj 射线返回对象\r\n                 */\n\n        }, {\n                key: 'groundFaceMove',\n                value: function groundFaceMove(obj) {\n\n                        if (_SWConstants.c_isMeasureStatus) return; //测量状态不显示移动数据\n\n                        this.isgroundFaceJumpBoo = (0, _SWTool.getJudgeOrZoom)(obj, 1);\n\n                        if (this.isgroundFaceJumpBoo) {\n\n                                this.wallProbeSurfaceVisible(2);\n\n                                this.groundFaceMash.position.copy(new THREE.Vector3(obj.point.x, obj.point.y + 50, obj.point.z));\n\n                                this.textDiv.style.display = \"block\";\n\n                                var labelPos = (0, _SWTool.getWorldToScene)(obj.point);\n\n                                this.textDiv.style.left = labelPos.x - 30 + \"px\";\n\n                                this.textDiv.style.top = labelPos.y - 40 + \"px\";\n\n                                this.textDiv.innerHTML = \"前进 \" + this.xround((0, _SWTool.getProbeSurfaceDistance)(obj), 2) + \" 米\";\n                        } else {\n\n                                this.wallProbeSurfaceVisible(0);\n                        }\n                }\n\n                /**\r\n                 * 鼠标在墙面片上移动\r\n                 * @param {Object} obj 墙面片对象\r\n                 */\n\n        }, {\n                key: 'wallFaceMove',\n                value: function wallFaceMove(obj) {\n\n                        this.wallFaceMash.position.copy(obj.point);\n\n                        var angle = (0, _SWTool.getWallProbeSurfaceAngle)(obj);\n\n                        this.wallFaceMash.rotation.y = THREE.Math.degToRad(angle > 180 ? angle - 90 : angle + 90);\n\n                        this.isWallFaceJumpBoo = (0, _SWTool.getJudgeOrZoom)(obj, 2);\n\n                        if (!this.isWallFaceJumpBoo) {\n\n                                if (_SWConstants.camera.fov != _SWConstants.c_Minfov) {\n\n                                        this.wallProbeSurfaceVisible(1, 1);\n                                } else {\n\n                                        this.wallProbeSurfaceVisible(1, 2);\n                                }\n                        } else {\n                                this.wallProbeSurfaceVisible(1, 0);\n                        }\n\n                        var fov = _SWConstants.camera.fov / _SWConstants.c_Maxfov; //相机缩放比例\n\n                        var dis = (obj.distance - 14) * 0.0015; //0.008是每一米对应缩放比例\n\n                        dis = dis < 0.05 ? 0.05 : dis; //0.05是最小缩放比例\n\n                        dis = dis > 3 ? 3 : dis; //3是最大缩放比例\n\n                        this.wallFaceMash.scale.set(dis * fov, dis * fov, dis * fov); //缩放\n\n                        if (_SWConstants.camera.fov === _SWConstants.c_Minfov) {\n                                this.wallProbeSurfaceVisible(0, 0);\n                        }\n                }\n        }, {\n                key: 'xround',\n                value: function xround(x, num) {\n\n                        return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\n                }\n        }]);\n\n        return SWWallSurfaceModule;\n}();\n\nexports.default = SWWallSurfaceModule;",null]}