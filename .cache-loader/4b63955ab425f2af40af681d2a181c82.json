{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxFaceModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxFaceModule.js","mtime":1536828889895},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWBoxTilesModule = require('./SWBoxTilesModule');\n\nvar _SWBoxTilesModule2 = _interopRequireDefault(_SWBoxTilesModule);\n\nvar _SWHashTable = require('../../tool/SWHashTable');\n\nvar _SWHashTable2 = _interopRequireDefault(_SWHashTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 全景盒子面对象\r\n */\nvar SWBoxFaceModule = function () {\n        /**\r\n         * 构造函数\r\n         * @param {Number} no 面编号\r\n         * @param {THREE.Group} faceGroup 全景盒子对象\r\n         * @param {THREE.Group} texture 全景贴图\r\n         * @param {THREE.Group} path 图片链接的前半截地址\r\n         * @param {Function} callfun 加载完毕回调\r\n         */\n        function SWBoxFaceModule(no, faceGroup, texture, path, callfun) {\n                _classCallCheck(this, SWBoxFaceModule);\n\n                this.faceNo = no; //面编号\n\n                this.boxPath = path; //总路径\n\n                this.levelplaneTable = new _SWHashTable2.default(); //4等级面数组\n\n                this.fourPoint = []; //面的四个顶点坐标\n\n                this.tilesPointArr = []; //所有瓦片四个顶点坐标\n\n                this.faceGroup = faceGroup; //全部盒子对象\n\n                this.callFun = callfun;\n\n                this.loadTexture();\n\n                this.geometry = new THREE.PlaneGeometry(_SWConstants.c_FaceDistance, _SWConstants.c_FaceDistance, 1, 1);\n\n                this.material = new THREE.MeshBasicMaterial({ map: texture });\n\n                this.thumbnails = new THREE.Mesh(this.geometry, this.material);\n\n                this.thumbnails.name = \"\" + this.faceNo;\n\n                this.thumbnails.userData.depthlevel = 100;\n\n                this.facePosition();\n\n                this.faceGroup.add(this.thumbnails);\n\n                this.faceFourVertices();\n        }\n\n        /**\r\n         * 面位置及旋转\r\n         */\n\n\n        _createClass(SWBoxFaceModule, [{\n                key: 'facePosition',\n                value: function facePosition() {\n                        switch (this.faceNo) {\n                                case 0:\n                                        this.thumbnails.position.x = _SWConstants.c_FaceDistance / 2;\n                                        this.thumbnails.rotation.y = THREE.Math.degToRad(-90);\n                                        break;\n                                case 1:\n                                        this.thumbnails.position.z = _SWConstants.c_FaceDistance / 2;\n                                        this.thumbnails.rotation.y = THREE.Math.degToRad(180);\n                                        break;\n                                case 2:\n                                        this.thumbnails.position.x = -_SWConstants.c_FaceDistance / 2;\n                                        this.thumbnails.rotation.y = THREE.Math.degToRad(90);\n                                        break;\n                                case 3:\n                                        this.thumbnails.position.z = -_SWConstants.c_FaceDistance / 2;\n                                        break;\n                                case 4:\n                                        this.thumbnails.position.y = _SWConstants.c_FaceDistance / 2;\n                                        this.thumbnails.rotation.x = THREE.Math.degToRad(90);\n                                        this.thumbnails.rotation.z = THREE.Math.degToRad(180);\n                                        break;\n                                case 5:\n                                        this.thumbnails.position.y = -_SWConstants.c_FaceDistance / 2;\n                                        this.thumbnails.rotation.x = THREE.Math.degToRad(-90);\n                                        this.thumbnails.rotation.z = THREE.Math.degToRad(180);\n                                        break;\n                                default:\n                                        break;\n                        }\n                }\n\n                /**\r\n                 * 当前瓦片四个顶点世界坐标及所有小瓦片世界坐标\r\n                 */\n\n        }, {\n                key: 'faceFourVertices',\n                value: function faceFourVertices() {\n                        var fourPointV3 = [];\n\n                        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[0]));\n\n                        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[1]));\n\n                        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[2]));\n\n                        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[3]));\n\n                        this.fourPoint = [(0, _SWTool.Vector3ToVP)(fourPointV3[0]), (0, _SWTool.Vector3ToVP)(fourPointV3[1]), (0, _SWTool.Vector3ToVP)(fourPointV3[2]), (0, _SWTool.Vector3ToVP)(fourPointV3[3])];\n\n                        var yawDis = -90 / 8;\n                        var minYaw = this.fourPoint[0].Yaw;\n\n                        var minPitch = this.fourPoint[0].Pitch;\n                        var pitchDis = -(this.fourPoint[0].Pitch - this.fourPoint[this.fourPoint.length - 1].Pitch) / 8;\n\n                        for (var y = 0; y < 8; y++) {\n\n                                for (var x = 0; x < 8; x++) {\n\n                                        var y1 = (0, _SWTool.getNumberMax360)(minYaw + yawDis * x);\n                                        var p1 = minPitch + pitchDis * y;\n\n                                        var y2 = (0, _SWTool.getNumberMax360)(minYaw + yawDis * (x + 1));\n                                        var p2 = minPitch + pitchDis * y;\n\n                                        var y3 = (0, _SWTool.getNumberMax360)(minYaw + yawDis * x);\n                                        var p3 = minPitch + pitchDis * (y + 1);\n\n                                        var y4 = (0, _SWTool.getNumberMax360)(minYaw + yawDis * (x + 1));\n                                        var p4 = minPitch + pitchDis * (y + 1);\n\n                                        this.tilesPointArr.push([[y1, p1], [y2, p2], [y3, p3], [y4, p4]]);\n                                }\n                        }\n                }\n\n                /**矩阵计算世界坐标 */\n\n        }, {\n                key: 'faceMatrix4',\n                value: function faceMatrix4(v3) {\n                        var aa = v3.clone().applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(this.thumbnails.rotation));\n\n                        var v0 = aa.clone().add(this.thumbnails.position);\n\n                        var d = v0.clone().applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(this.faceGroup.rotation));\n\n                        var b = d.clone().applyMatrix4(this.faceGroup.matrixWorld);\n\n                        return b;\n                }\n\n                /**\r\n                 * 加载高清图\r\n                 */\n\n        }, {\n                key: 'loadTexture',\n                value: function loadTexture() {\n                        var _this = this;\n\n                        var path = this.boxPath + '/3/sw_' + this.faceNo + '.jpg';\n\n                        // 实例化一个加载器\n                        var loader = new THREE.TextureLoader();\n\n                        // 加载资源\n                        loader.load(\n                        // 资源URL\n                        path,\n                        // 加载成功之后调用\n                        function (texture) {\n\n                                texture.mapping = THREE.UVMapping;\n\n                                texture.magFilter = THREE.LinearFilter;\n\n                                texture.minFilter = THREE.LinearFilter;\n\n                                texture.type = THREE.FloatType;\n\n                                texture.anisotropy = 1;\n\n                                _this.thumbnails.material.map = texture;\n\n                                _this.thumbnails.material.map.needsUpdate = true;\n\n                                _this.callFun();\n                        },\n                        // 加载中\n                        function (xhr) {},\n                        // 加载失败\n                        function (xhr) {\n                                console.log('\\u56FE\\u7247\\u52A0\\u8F7D\\u5931\\u8D25\\uFF1A' + path);\n                        });\n                }\n\n                /**生成瓦片 */\n\n        }, {\n                key: 'createTiles',\n                value: function createTiles(minYaw, maxYaw, minPitch, maxPitch) {\n                        var _this2 = this;\n\n                        var _loop = function _loop(y) {\n                                var _loop2 = function _loop2(x) {\n\n                                        var pointArr = _this2.tilesPointArr[y * 8 + x];\n\n                                        pointArr.map(function (item) {\n\n                                                var boo = false;\n\n                                                if (maxYaw - minYaw > 120) {\n                                                        //圆的0和360是同一个点\n\n                                                        if ((0 < item[0] && item[0] < minYaw || maxYaw < item[0] && item[0] < 360) && minPitch < item[1] && item[1] < maxPitch) {\n                                                                boo = true;\n                                                        }\n                                                } else {\n\n                                                        if (minYaw < item[0] && item[0] < maxYaw && minPitch < item[1] && item[1] < maxPitch) {\n                                                                boo = true;\n                                                        }\n                                                }\n\n                                                if (boo) {\n                                                        var key = y + \"_\" + x;\n\n                                                        if (!_this2.levelplaneTable.containsKey(key)) {\n\n                                                                var tiles = new _SWBoxTilesModule2.default(_this2.faceNo, y + 1, x + 1, _this2.thumbnails, _this2.boxPath);\n\n                                                                _this2.levelplaneTable.add(key, tiles);\n                                                        }\n                                                }\n                                        });\n                                };\n\n                                for (var x = 0; x < 8; x++) {\n                                        _loop2(x);\n                                }\n                        };\n\n                        for (var y = 0; y < 8; y++) {\n                                _loop(y);\n                        }\n                }\n\n                /**\r\n                 * 清除瓦片及自身\r\n                 */\n\n        }, {\n                key: 'clearTiles',\n                value: function clearTiles() {\n                        var boo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n\n                        var tilesArr = this.levelplaneTable.getValues();\n\n                        tilesArr.forEach(function (tile) {\n\n                                tile.clearTile();\n                        });\n\n                        this.levelplaneTable.clear();\n\n                        if (boo) {\n                                (0, _SWTool.disposeNode)(this.thumbnails, true);\n                        }\n                }\n        }]);\n\n        return SWBoxFaceModule;\n}();\n\nexports.default = SWBoxFaceModule;",{"version":3,"sources":["app\\src\\module\\panoBox\\SWBoxFaceModule.js"],"names":["SWBoxFaceModule","no","faceGroup","texture","path","callfun","faceNo","boxPath","levelplaneTable","HashTable","fourPoint","tilesPointArr","callFun","loadTexture","geometry","THREE","PlaneGeometry","c_FaceDistance","material","MeshBasicMaterial","map","thumbnails","Mesh","name","userData","depthlevel","facePosition","add","faceFourVertices","position","x","rotation","y","Math","degToRad","z","fourPointV3","push","faceMatrix4","vertices","yawDis","minYaw","Yaw","minPitch","Pitch","pitchDis","length","y1","p1","y2","p2","y3","p3","y4","p4","v3","aa","clone","applyMatrix4","Matrix4","makeRotationFromEuler","v0","d","b","matrixWorld","loader","TextureLoader","load","mapping","UVMapping","magFilter","LinearFilter","minFilter","type","FloatType","anisotropy","needsUpdate","xhr","console","log","maxYaw","maxPitch","pointArr","item","boo","key","containsKey","tiles","SWBoxTilesModule","tilesArr","getValues","forEach","tile","clearTile","clear"],"mappings":"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","file":"SWBoxFaceModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\n\r\nimport { c_FaceDistance, scene } from '../../tool/SWConstants'\r\nimport { disposeNode, Vector3ToVP, getNumberMax360 } from '../../tool/SWTool'\r\nimport SWBoxTilesModule from './SWBoxTilesModule'\r\nimport HashTable from '../../tool/SWHashTable';\r\n/**\r\n * 全景盒子面对象\r\n */\r\nclass SWBoxFaceModule {\r\n    /**\r\n     * 构造函数\r\n     * @param {Number} no 面编号\r\n     * @param {THREE.Group} faceGroup 全景盒子对象\r\n     * @param {THREE.Group} texture 全景贴图\r\n     * @param {THREE.Group} path 图片链接的前半截地址\r\n     * @param {Function} callfun 加载完毕回调\r\n     */\r\n    constructor(no, faceGroup, texture, path,callfun) {\r\n\r\n        this.faceNo = no; //面编号\r\n\r\n        this.boxPath = path; //总路径\r\n\r\n        this.levelplaneTable = new HashTable(); //4等级面数组\r\n\r\n        this.fourPoint = []; //面的四个顶点坐标\r\n\r\n        this.tilesPointArr = []; //所有瓦片四个顶点坐标\r\n\r\n        this.faceGroup = faceGroup; //全部盒子对象\r\n\r\n        this.callFun = callfun;\r\n\r\n        this.loadTexture();\r\n\r\n        this.geometry = new THREE.PlaneGeometry(c_FaceDistance, c_FaceDistance, 1, 1);\r\n\r\n        this.material = new THREE.MeshBasicMaterial({ map: texture });\r\n\r\n        this.thumbnails = new THREE.Mesh(this.geometry, this.material);\r\n\r\n        this.thumbnails.name = \"\" + this.faceNo;\r\n\r\n        this.thumbnails.userData.depthlevel = 100;\r\n\r\n        this.facePosition();\r\n\r\n        this.faceGroup.add(this.thumbnails);\r\n\r\n        this.faceFourVertices();\r\n\r\n    }\r\n\r\n    /**\r\n     * 面位置及旋转\r\n     */\r\n    facePosition() {\r\n        switch (this.faceNo) {\r\n            case 0:\r\n                this.thumbnails.position.x = c_FaceDistance / 2;\r\n                this.thumbnails.rotation.y = THREE.Math.degToRad(-90);\r\n                break;\r\n            case 1:\r\n                this.thumbnails.position.z = c_FaceDistance / 2;\r\n                this.thumbnails.rotation.y = THREE.Math.degToRad(180);\r\n                break;\r\n            case 2:\r\n                this.thumbnails.position.x = -c_FaceDistance / 2;\r\n                this.thumbnails.rotation.y = THREE.Math.degToRad(90);\r\n                break;\r\n            case 3:\r\n                this.thumbnails.position.z = -c_FaceDistance / 2;\r\n                break;\r\n            case 4:\r\n                this.thumbnails.position.y = c_FaceDistance / 2;\r\n                this.thumbnails.rotation.x = THREE.Math.degToRad(90);\r\n                this.thumbnails.rotation.z = THREE.Math.degToRad(180);\r\n                break;\r\n            case 5:\r\n                this.thumbnails.position.y = -c_FaceDistance / 2;\r\n                this.thumbnails.rotation.x = THREE.Math.degToRad(-90);\r\n                this.thumbnails.rotation.z = THREE.Math.degToRad(180);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当前瓦片四个顶点世界坐标及所有小瓦片世界坐标\r\n     */\r\n    faceFourVertices() {\r\n        let fourPointV3 = [];\r\n\r\n        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[0]));\r\n\r\n        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[1]));\r\n\r\n        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[2]));\r\n\r\n        fourPointV3.push(this.faceMatrix4(this.thumbnails.geometry.vertices[3]));\r\n\r\n        this.fourPoint = [Vector3ToVP(fourPointV3[0]),\r\n            Vector3ToVP(fourPointV3[1]),\r\n            Vector3ToVP(fourPointV3[2]),\r\n            Vector3ToVP(fourPointV3[3])\r\n        ];\r\n\r\n        let yawDis = -90 / 8;\r\n        let minYaw = this.fourPoint[0].Yaw;\r\n\r\n        let minPitch = this.fourPoint[0].Pitch;\r\n        let pitchDis = -(this.fourPoint[0].Pitch - this.fourPoint[this.fourPoint.length - 1].Pitch) / 8;\r\n\r\n        for (let y = 0; y < 8; y++) {\r\n\r\n            for (let x = 0; x < 8; x++) {\r\n\r\n                let y1 = getNumberMax360(minYaw + yawDis * x);\r\n                let p1 = minPitch + pitchDis * y;\r\n\r\n                let y2 = getNumberMax360(minYaw + yawDis * (x + 1));\r\n                let p2 = minPitch + pitchDis * y;\r\n\r\n                let y3 = getNumberMax360(minYaw + yawDis * x);\r\n                let p3 = minPitch + pitchDis * (y + 1);\r\n\r\n                let y4 = getNumberMax360(minYaw + yawDis * (x + 1));\r\n                let p4 = minPitch + pitchDis * (y + 1);\r\n\r\n                this.tilesPointArr.push([\r\n                    [y1, p1],\r\n                    [y2, p2],\r\n                    [y3, p3],\r\n                    [y4, p4]\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**矩阵计算世界坐标 */\r\n    faceMatrix4(v3) {\r\n        let aa = v3.clone().applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(this.thumbnails.rotation));\r\n\r\n        let v0 = aa.clone().add(this.thumbnails.position);\r\n\r\n        let d = v0.clone().applyMatrix4(new THREE.Matrix4().makeRotationFromEuler(this.faceGroup.rotation));\r\n\r\n        let b = d.clone().applyMatrix4(this.faceGroup.matrixWorld);\r\n\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * 加载高清图\r\n     */\r\n    loadTexture() {\r\n\r\n        let path = `${this.boxPath}/3/sw_${this.faceNo}.jpg`;\r\n\r\n        // 实例化一个加载器\r\n        let loader = new THREE.TextureLoader();\r\n\r\n        // 加载资源\r\n        loader.load(\r\n            // 资源URL\r\n            path,\r\n            // 加载成功之后调用\r\n            (texture) => {\r\n\r\n                texture.mapping = THREE.UVMapping;\r\n\r\n                texture.magFilter = THREE.LinearFilter;\r\n\r\n                texture.minFilter = THREE.LinearFilter;\r\n\r\n                texture.type = THREE.FloatType;\r\n\r\n                texture.anisotropy = 1;\r\n\r\n                this.thumbnails.material.map = texture;\r\n\r\n                this.thumbnails.material.map.needsUpdate = true;\r\n\r\n                this.callFun();\r\n            },\r\n            // 加载中\r\n            (xhr) => {},\r\n            // 加载失败\r\n            (xhr) => {\r\n                console.log(`图片加载失败：${path}`);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**生成瓦片 */\r\n    createTiles(minYaw, maxYaw, minPitch, maxPitch) {\r\n\r\n        for (let y = 0; y < 8; y++) {\r\n\r\n            for (let x = 0; x < 8; x++) {\r\n\r\n                let pointArr = this.tilesPointArr[y * 8 + x];\r\n\r\n                pointArr.map((item) => {\r\n\r\n                    let boo = false;\r\n\r\n                    if ((maxYaw - minYaw) > 120) { //圆的0和360是同一个点\r\n\r\n                        if (((0 < item[0] && item[0] < minYaw) || (maxYaw < item[0] && item[0] < 360)) && (minPitch < item[1] && item[1] < maxPitch)) {\r\n                            boo = true;\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        if (minYaw < item[0] && item[0] < maxYaw && minPitch < item[1] && item[1] < maxPitch) {\r\n                            boo = true;\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (boo) {\r\n                        let key = y + \"_\" + x;\r\n\r\n                        if (!this.levelplaneTable.containsKey(key)) {\r\n\r\n                            let tiles = new SWBoxTilesModule(this.faceNo, y + 1, x + 1, this.thumbnails, this.boxPath);\r\n\r\n                            this.levelplaneTable.add(key, tiles);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除瓦片及自身\r\n     */\r\n    clearTiles(boo = true) {\r\n\r\n        let tilesArr = this.levelplaneTable.getValues();\r\n\r\n        tilesArr.forEach((tile) => {\r\n\r\n            tile.clearTile();\r\n\r\n        });\r\n\r\n        this.levelplaneTable.clear();\r\n\r\n        if (boo) {\r\n            disposeNode(this.thumbnails, true);\r\n        }\r\n    }\r\n}\r\n\r\nexport default SWBoxFaceModule;"]}]}