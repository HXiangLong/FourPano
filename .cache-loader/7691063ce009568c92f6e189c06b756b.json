{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\SWMouseModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\SWMouseModule.js","mtime":1527666393025},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SWConstants = require(\"../tool/SWConstants\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 鼠标事件\r\n * 将要解决手机双击的问题\r\n * 由UI层传递屏幕点击坐标之后，在转换成三维坐标射线判定\r\n */\nvar SWMouseModule = function () {\n        function SWMouseModule(canvas) {\n                _classCallCheck(this, SWMouseModule);\n\n                this.canvas3d = canvas;\n\n                this.canvas3d.addEventListener(\"mousedown\", this.mouseDown.bind(this), false); //鼠标按钮被按下\n                this.canvas3d.addEventListener(\"mouseup\", this.mouseUp.bind(this), false); //鼠标按键被松开\n                this.canvas3d.addEventListener(\"mousemove\", this.mouseMove.bind(this), false); //鼠标被移动\n\n                this.canvas3d.addEventListener(\"mouseover\", this.mouseOver.bind(this), false); //鼠标移到某元素之上\n                this.canvas3d.addEventListener(\"mouseout\", this.mouseOut.bind(this), false); //鼠标从某元素移开\n\n                this.canvas3d.addEventListener(\"wheel\", this.mouseWheel.bind(this), false); //鼠标滚轮\n\n                document.addEventListener('contextmenu', this.contextMenu, false); //关闭右键事件\n\n                window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent.bind(this), false); //陀螺仪旋转\n                window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent.bind(this), false);\n\n                this.canvas3d.addEventListener(\"touchstart\", this.touchStart.bind(this), false); //触摸按下\n                this.canvas3d.addEventListener(\"touchmove\", this.touchMove.bind(this), false); //触摸移动\n                this.canvas3d.addEventListener(\"touchend\", this.touchEnd.bind(this), false); //触摸结束\n\n                /**是否按下鼠标 */\n                this.ifMouseDownBoo = false;\n\n                /**是否鼠标离开 */\n                this.ifMouseOutBoo = false;\n\n                /**鼠标坐标 */\n                this.mouseV2 = new THREE.Vector2();\n\n                /**射线 */\n                this.raycaster = new THREE.Raycaster();\n\n                /**射线检测到的对象 */\n                this.intersect;\n\n                _SWConstants.camera.rotation.reorder('YXZ');\n\n                this.enabled = true;\n\n                this.deviceOrientation = {};\n                this.screenOrientation = 0;\n\n                this.alphaOffset = 0; // radians\n        }\n\n        /**\r\n         * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n         * @param {Number} ex 鼠标/触摸点X坐标\r\n         * @param {Number} ey 鼠标/触摸点Y坐标\r\n         */\n\n\n        _createClass(SWMouseModule, [{\n                key: \"mousePosition\",\n                value: function mousePosition(ex, ey) {\n\n                        this.mouseV2.x = ex / window.innerWidth * 2 - 1;\n\n                        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\n                }\n\n                /**\r\n                 * 朝着某个点发射线\r\n                 * @param {Vector2} mouseXY 屏蔽坐标点\r\n                 */\n\n        }, {\n                key: \"mouseRaycaster\",\n                value: function mouseRaycaster(mouseXY) {\n\n                        this.raycaster.setFromCamera(mouseXY, _SWConstants.camera);\n\n                        var intersects = this.raycaster.intersectObjects(_SWConstants.scene.children);\n\n                        var intersect = void 0,\n                            depthlevel = void 0;\n\n                        if (intersects.length > 0) {\n\n                                depthlevel = intersects[0].object.userData.depthlevel;\n\n                                intersect = intersects[0];\n\n                                for (var i = 1; i < intersects.length; i++) {\n\n                                        if (depthlevel > intersects[i].object.userData.depthlevel) {\n\n                                                depthlevel = intersects[i].object.userData.depthlevel;\n\n                                                intersect = intersects[i];\n                                        }\n                                }\n                        }\n\n                        return intersect;\n                }\n\n                /**\r\n                 * 鼠标滚轮事件\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"mouseWheel\",\n                value: function mouseWheel(e) {\n                        // console.log(\"mouseWheel\", e);\n                        _SWConstants.sw_cameraManage.onMouseWheel(e);\n                }\n\n                /**\r\n                 * 鼠标弹起\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"mouseUp\",\n                value: function mouseUp(e) {\n\n                        _SWConstants.sw_cameraManage.onMouseUp(e);\n\n                        this.mousePosition(e.clientX, e.clientY);\n\n                        this.intersect = this.mouseRaycaster(this.mouseV2);\n\n                        if (this.intersect && this.intersect.object.mouseUp) {\n                                //模型弹起事件\n\n                                this.intersect.object.mouseUp(e, this.intersect);\n                        }\n                }\n\n                /**\r\n                 * 鼠标移动\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"mouseMove\",\n                value: function mouseMove(e) {\n\n                        _SWConstants.sw_cameraManage.onMouseMove(e);\n\n                        this.mousePosition(e.clientX, e.clientY);\n\n                        var rayObj = this.mouseRaycaster(this.mouseV2);\n\n                        if (rayObj) {\n\n                                if (rayObj.object.mouseOver) {\n                                        //离开模型事件\n\n                                        rayObj.object.mouseOver(e, rayObj);\n                                }\n                        } else if (this.intersect) {\n\n                                if (this.intersect.object.mouseOut) {\n                                        //离开模型事件\n\n                                        this.intersect.object.mouseOut(e, this.intersect);\n                                }\n                        }\n\n                        this.intersect = rayObj;\n                }\n\n                /**\r\n                 * 鼠标按下\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"mouseDown\",\n                value: function mouseDown(e) {\n\n                        _SWConstants.sw_cameraManage.onMouseDown(e);\n\n                        this.mousePosition(e.clientX, e.clientY);\n\n                        this.intersect = this.mouseRaycaster(this.mouseV2);\n\n                        if (this.intersect && this.intersect.object.mouseDown) {\n\n                                this.intersect.object.mouseDown(e, this.intersect);\n                        }\n                }\n\n                /**\r\n                 * 鼠标从某元素移开\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"mouseOut\",\n                value: function mouseOut(e) {\n\n                        // console.log(\"mouseOut\", e);\n\n                        this.ifMouseOutBoo = true;\n                }\n\n                /**\r\n                 * 鼠标移到某元素之上\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"mouseOver\",\n                value: function mouseOver(e) {\n\n                        // console.log(\"mouseOver\", e);\n\n                        this.ifMouseOutBoo = false;\n                }\n\n                /**\r\n                 * 触摸开始\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"touchStart\",\n                value: function touchStart(e) {\n\n                        _SWConstants.sw_cameraManage.onTouchStart(e);\n\n                        console.log(\"touchStart\", e);\n                }\n\n                /**\r\n                 * 触摸结束\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"touchEnd\",\n                value: function touchEnd(e) {\n\n                        _SWConstants.sw_cameraManage.onTouchEnd(e);\n\n                        console.log(\"touchEnd\", e);\n                }\n\n                /**\r\n                 * 触摸移动\r\n                 * @param {Event} e \r\n                 */\n\n        }, {\n                key: \"touchMove\",\n                value: function touchMove(e) {\n\n                        _SWConstants.sw_cameraManage.onTouchMove(e);\n\n                        console.log(\"touchMove\", e);\n                }\n        }, {\n                key: \"onDeviceOrientationChangeEvent\",\n                value: function onDeviceOrientationChangeEvent(event) {\n\n                        this.deviceOrientation = event;\n                }\n        }, {\n                key: \"onScreenOrientationChangeEvent\",\n                value: function onScreenOrientationChangeEvent() {\n\n                        this.screenOrientation = window.orientation || 0;\n                }\n        }, {\n                key: \"contextMenu\",\n\n\n                /**屏蔽右键 */\n                value: function contextMenu(e) {\n                        e.preventDefault();\n                }\n        }]);\n\n        return SWMouseModule;\n}();\n\nexports.default = SWMouseModule;",null]}