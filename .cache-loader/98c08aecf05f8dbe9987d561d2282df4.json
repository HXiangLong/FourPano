{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\tool\\HashTable.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\tool\\HashTable.js","mtime":1511322946435},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 键值对集合\r\n */\nvar HashTable = function () {\n    function HashTable() {\n        _classCallCheck(this, HashTable);\n\n        this.size = 0;\n        this.entry = new Object();\n    }\n\n    /**\r\n     * 添加项\r\n     * @param {*} key 唯一键\r\n     * @param {*} value 对应值\r\n     */\n\n\n    _createClass(HashTable, [{\n        key: \"add\",\n        value: function add(key, value) {\n            if (!this.containsKey(key)) {\n                this.size++;\n            }\n            this.entry[key] = value;\n        }\n\n        /**\r\n         * 根据key取值\r\n         * @param {*} key 唯一键\r\n         * return object\r\n         */\n\n    }, {\n        key: \"getValue\",\n        value: function getValue(key) {\n            return this.containsKey(key) ? this.entry[key] : null;\n        }\n\n        /**\r\n         * 根据key删除一项\r\n         * @param {*} key \r\n         */\n\n    }, {\n        key: \"remove\",\n        value: function remove(key) {\n            if (this.containsKey(key) && delete this.entry[key]) {\n                this.size--;\n            }\n        }\n\n        /**\r\n         * 是否包含某个key\r\n         * @param {*} key \r\n         */\n\n    }, {\n        key: \"containsKey\",\n        value: function containsKey(key) {\n            return key in this.entry;\n        }\n\n        /**\r\n         * 是否包含某个值\r\n         * @param {*} value \r\n         */\n\n    }, {\n        key: \"containsValue\",\n        value: function containsValue(value) {\n            for (var prop in this.entry) {\n                if (this.entry[prop] == value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\r\n         * 获取所有的值的数组\r\n         */\n\n    }, {\n        key: \"getValues\",\n        value: function getValues() {\n            var values = new Array();\n            for (var prop in this.entry) {\n                values.push(this.entry[prop]);\n            }\n            return values;\n        }\n\n        /**\r\n         * 获取所有的key的数组\r\n         */\n\n    }, {\n        key: \"getKeys\",\n        value: function getKeys() {\n            var keys = new Array();\n            for (var prop in this.entry) {\n                keys.push(prop);\n            }\n            return keys;\n        }\n\n        /**\r\n         * 获取项总数\r\n         */\n\n    }, {\n        key: \"getSize\",\n        value: function getSize() {\n            return this.size;\n        }\n\n        /**\r\n         * 清空哈希表\r\n         */\n\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this.size = 0;\n            this.entry = new Object();\n        }\n    }]);\n\n    return HashTable;\n}();\n\nexports.default = HashTable;",null]}