{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawPoint.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawPoint.js","mtime":1531455011451},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 绘制点\r\n */\nvar SWDrawPoint = function () {\n    function SWDrawPoint() {\n        _classCallCheck(this, SWDrawPoint);\n\n        this.dotRadius = 0.3; //圆点半径\n        this.dotFillColors = 0xff0000; // 圆点填充颜色\n        this.allPointArr = [];\n    }\n\n    /**绘制点 */\n\n\n    _createClass(SWDrawPoint, [{\n        key: 'drawPoint',\n        value: function drawPoint(point) {\n            var radius = point.distanceTo(new THREE.Vector3(0, 0, 0)) / 30 * 0.3;\n            this.dotRadius = radius > 30 ? 30 : radius;\n            var sphereGeometry = new THREE.SphereGeometry(this.dotRadius, 32);\n            var sphereMaterial = new THREE.MeshBasicMaterial({\n                color: this.dotFillColors,\n                shading: THREE.FlatShading\n            });\n            var dotMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n            dotMesh.position.copy(point);\n            _SWConstants.scene.add(dotMesh);\n            this.allPointArr.push(dotMesh);\n        }\n\n        /**\r\n         * 清除点\r\n         * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n         */\n\n    }, {\n        key: 'clear',\n        value: function clear() {\n            var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            var dArr = num == 0 ? this.allPointArr.splice(0, this.allPointArr.length) : num < 0 ? this.allPointArr.splice(num, Math.abs(num)) : this.allPointArr.splice(0, num);\n            dArr.map(function (item, idx) {\n\n                (0, _SWTool.disposeNode)(item);\n            });\n        }\n    }]);\n\n    return SWDrawPoint;\n}();\n\nexports.default = SWDrawPoint;",{"version":3,"sources":["app\\src\\module\\draw\\SWDrawPoint.js"],"names":["SWDrawPoint","dotRadius","dotFillColors","allPointArr","point","radius","distanceTo","THREE","Vector3","sphereGeometry","SphereGeometry","sphereMaterial","MeshBasicMaterial","color","shading","FlatShading","dotMesh","Mesh","position","copy","scene","add","push","num","dArr","splice","length","Math","abs","map","item","idx"],"mappings":";;;;;;qjBAAA;;;AACA;;AACA;;;;AAEA;;;IAGMA,W;AACF,2BAAc;AAAA;;AACV,aAAKC,SAAL,GAAiB,GAAjB,CADU,CACY;AACtB,aAAKC,aAAL,GAAqB,QAArB,CAFU,CAEqB;AAC/B,aAAKC,WAAL,GAAmB,EAAnB;AACH;;AAED;;;;;kCACUC,K,EAAO;AACb,gBAAIC,SAAUD,MAAME,UAAN,CAAiB,IAAIC,MAAMC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAjB,IAA+C,EAAhD,GAAsD,GAAnE;AACA,iBAAKP,SAAL,GAAiBI,SAAS,EAAT,GAAc,EAAd,GAAmBA,MAApC;AACA,gBAAII,iBAAiB,IAAIF,MAAMG,cAAV,CAAyB,KAAKT,SAA9B,EAAyC,EAAzC,CAArB;AACA,gBAAIU,iBAAiB,IAAIJ,MAAMK,iBAAV,CAA4B;AAC7CC,uBAAO,KAAKX,aADiC;AAE7CY,yBAASP,MAAMQ;AAF8B,aAA5B,CAArB;AAIA,gBAAIC,UAAU,IAAIT,MAAMU,IAAV,CAAeR,cAAf,EAA+BE,cAA/B,CAAd;AACAK,oBAAQE,QAAR,CAAiBC,IAAjB,CAAsBf,KAAtB;AACAgB,+BAAMC,GAAN,CAAUL,OAAV;AACA,iBAAKb,WAAL,CAAiBmB,IAAjB,CAAsBN,OAAtB;AACH;;AAED;;;;;;;gCAIe;AAAA,gBAATO,GAAS,uEAAH,CAAG;;AACX,gBAAIC,OAAOD,OAAO,CAAP,GAAW,KAAKpB,WAAL,CAAiBsB,MAAjB,CAAwB,CAAxB,EAA2B,KAAKtB,WAAL,CAAiBuB,MAA5C,CAAX,GAAiEH,MAAM,CAAN,GAAU,KAAKpB,WAAL,CAAiBsB,MAAjB,CAAwBF,GAAxB,EAA6BI,KAAKC,GAAL,CAASL,GAAT,CAA7B,CAAV,GAAwD,KAAKpB,WAAL,CAAiBsB,MAAjB,CAAwB,CAAxB,EAA2BF,GAA3B,CAApI;AACAC,iBAAKK,GAAL,CAAS,UAACC,IAAD,EAAOC,GAAP,EAAe;;AAEpB,yCAAYD,IAAZ;AAEH,aAJD;AAKH;;;;;;kBAGU9B,W","file":"SWDrawPoint.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\nimport { scene } from '../../tool/SWConstants'\r\nimport { disposeNode } from '../../tool/SWTool'\r\n\r\n/**\r\n * 绘制点\r\n */\r\nclass SWDrawPoint {\r\n    constructor() {\r\n        this.dotRadius = 0.3; //圆点半径\r\n        this.dotFillColors = 0xff0000; // 圆点填充颜色\r\n        this.allPointArr = [];\r\n    }\r\n\r\n    /**绘制点 */\r\n    drawPoint(point) {\r\n        let radius = (point.distanceTo(new THREE.Vector3(0, 0, 0)) / 30) * 0.3;\r\n        this.dotRadius = radius > 30 ? 30 : radius;\r\n        let sphereGeometry = new THREE.SphereGeometry(this.dotRadius, 32);\r\n        let sphereMaterial = new THREE.MeshBasicMaterial({\r\n            color: this.dotFillColors,\r\n            shading: THREE.FlatShading\r\n        });\r\n        let dotMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        dotMesh.position.copy(point);\r\n        scene.add(dotMesh);\r\n        this.allPointArr.push(dotMesh);\r\n    }\r\n\r\n    /**\r\n     * 清除点\r\n     * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n     */\r\n    clear(num = 0) {\r\n        let dArr = num == 0 ? this.allPointArr.splice(0, this.allPointArr.length) : num < 0 ? this.allPointArr.splice(num, Math.abs(num)) : this.allPointArr.splice(0, num);\r\n        dArr.map((item, idx) => {\r\n\r\n            disposeNode(item);\r\n\r\n        });\r\n    }\r\n}\r\n\r\nexport default SWDrawPoint;"]}]}