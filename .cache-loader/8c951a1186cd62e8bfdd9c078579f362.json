{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\tool\\SWHashTable.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\tool\\SWHashTable.js","mtime":1527220307954},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 键值对集合\r\n */\nvar HashTable = function () {\n    function HashTable() {\n        _classCallCheck(this, HashTable);\n\n        this.size = 0;\n        this.entry = {};\n    }\n\n    /**\r\n     * 添加项\r\n     * @param {*} key 唯一键\r\n     * @param {*} value 对应值\r\n     */\n\n\n    _createClass(HashTable, [{\n        key: \"add\",\n        value: function add(key, value) {\n            if (!this.containsKey(key)) {\n                this.size++;\n            }\n            this.entry[key] = value;\n        }\n\n        /**\r\n         * 根据key取值\r\n         * @param {*} key 唯一键\r\n         * return object\r\n         */\n\n    }, {\n        key: \"getValue\",\n        value: function getValue(key) {\n            return this.containsKey(key) ? this.entry[key] : null;\n        }\n\n        /**\r\n         * 根据key删除一项\r\n         * @param {*} key \r\n         */\n\n    }, {\n        key: \"remove\",\n        value: function remove(key) {\n            if (this.containsKey(key) && delete this.entry[key]) {\n                this.size--;\n            }\n        }\n\n        /**\r\n         * 是否包含某个key\r\n         * @param {*} key \r\n         */\n\n    }, {\n        key: \"containsKey\",\n        value: function containsKey(key) {\n            return key in this.entry;\n        }\n\n        /**\r\n         * 是否包含某个值\r\n         * @param {*} value \r\n         */\n\n    }, {\n        key: \"containsValue\",\n        value: function containsValue(value) {\n            for (var prop in this.entry) {\n                if (this.entry[prop] == value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\r\n         * 获取所有的值的数组\r\n         */\n\n    }, {\n        key: \"getValues\",\n        value: function getValues() {\n            var values = [];\n            for (var prop in this.entry) {\n                values.push(this.entry[prop]);\n            }\n            return values;\n        }\n\n        /**\r\n         * 获取所有的key的数组\r\n         */\n\n    }, {\n        key: \"getKeys\",\n        value: function getKeys() {\n            var keys = [];\n            for (var prop in this.entry) {\n                keys.push(prop);\n            }\n            return keys;\n        }\n\n        /**\r\n         * 获取项总数\r\n         */\n\n    }, {\n        key: \"getSize\",\n        value: function getSize() {\n            return this.size;\n        }\n\n        /**\r\n         * 清空哈希表\r\n         */\n\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this.size = 0;\n            this.entry = {};\n        }\n    }]);\n\n    return HashTable;\n}();\n\nexports.default = HashTable;",{"version":3,"sources":["app\\src\\tool\\SWHashTable.js"],"names":["HashTable","size","entry","key","value","containsKey","prop","values","push","keys"],"mappings":";;;;;;;;;;AAAA;;;IAGMA,S;AACF,yBAAc;AAAA;;AACV,aAAKC,IAAL,GAAY,CAAZ;AACA,aAAKC,KAAL,GAAa,EAAb;AACH;;AAED;;;;;;;;;4BAKIC,G,EAAKC,K,EAAO;AACZ,gBAAI,CAAC,KAAKC,WAAL,CAAiBF,GAAjB,CAAL,EAA4B;AACxB,qBAAKF,IAAL;AACH;AACD,iBAAKC,KAAL,CAAWC,GAAX,IAAkBC,KAAlB;AACH;;AAED;;;;;;;;iCAKSD,G,EAAK;AACV,mBAAO,KAAKE,WAAL,CAAiBF,GAAjB,IAAwB,KAAKD,KAAL,CAAWC,GAAX,CAAxB,GAA0C,IAAjD;AACH;;AAED;;;;;;;+BAIOA,G,EAAK;AACR,gBAAI,KAAKE,WAAL,CAAiBF,GAAjB,KAA0B,OAAO,KAAKD,KAAL,CAAWC,GAAX,CAArC,EAAuD;AACnD,qBAAKF,IAAL;AACH;AACJ;;AAED;;;;;;;oCAIYE,G,EAAK;AACb,mBAAQA,OAAO,KAAKD,KAApB;AACH;;AAED;;;;;;;sCAIcE,K,EAAO;AACjB,iBAAK,IAAIE,IAAT,IAAiB,KAAKJ,KAAtB,EAA6B;AACzB,oBAAI,KAAKA,KAAL,CAAWI,IAAX,KAAoBF,KAAxB,EAA+B;AAC3B,2BAAO,IAAP;AACH;AACJ;AACD,mBAAO,KAAP;AACH;;AAED;;;;;;oCAGY;AACR,gBAAIG,SAAS,EAAb;AACA,iBAAK,IAAID,IAAT,IAAiB,KAAKJ,KAAtB,EAA6B;AACzBK,uBAAOC,IAAP,CAAY,KAAKN,KAAL,CAAWI,IAAX,CAAZ;AACH;AACD,mBAAOC,MAAP;AACH;;AAED;;;;;;kCAGU;AACN,gBAAIE,OAAO,EAAX;AACA,iBAAK,IAAIH,IAAT,IAAiB,KAAKJ,KAAtB,EAA6B;AACzBO,qBAAKD,IAAL,CAAUF,IAAV;AACH;AACD,mBAAOG,IAAP;AACH;;AAED;;;;;;kCAGU;AACN,mBAAO,KAAKR,IAAZ;AACH;;AAED;;;;;;gCAGQ;AACJ,iBAAKA,IAAL,GAAY,CAAZ;AACA,iBAAKC,KAAL,GAAa,EAAb;AACH;;;;;;kBAGUF,S","file":"SWHashTable.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/**\r\n * 键值对集合\r\n */\r\nclass HashTable {\r\n    constructor() {\r\n        this.size = 0;\r\n        this.entry = {};\r\n    }\r\n\r\n    /**\r\n     * 添加项\r\n     * @param {*} key 唯一键\r\n     * @param {*} value 对应值\r\n     */\r\n    add(key, value) {\r\n        if (!this.containsKey(key)) {\r\n            this.size++;\r\n        }\r\n        this.entry[key] = value;\r\n    }\r\n\r\n    /**\r\n     * 根据key取值\r\n     * @param {*} key 唯一键\r\n     * return object\r\n     */\r\n    getValue(key) {\r\n        return this.containsKey(key) ? this.entry[key] : null;\r\n    }\r\n\r\n    /**\r\n     * 根据key删除一项\r\n     * @param {*} key \r\n     */\r\n    remove(key) {\r\n        if (this.containsKey(key) && (delete this.entry[key])) {\r\n            this.size--;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否包含某个key\r\n     * @param {*} key \r\n     */\r\n    containsKey(key) {\r\n        return (key in this.entry);\r\n    }\r\n\r\n    /**\r\n     * 是否包含某个值\r\n     * @param {*} value \r\n     */\r\n    containsValue(value) {\r\n        for (let prop in this.entry) {\r\n            if (this.entry[prop] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 获取所有的值的数组\r\n     */\r\n    getValues() {\r\n        let values = [];\r\n        for (let prop in this.entry) {\r\n            values.push(this.entry[prop]);\r\n        }\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * 获取所有的key的数组\r\n     */\r\n    getKeys() {\r\n        let keys = [];\r\n        for (let prop in this.entry) {\r\n            keys.push(prop);\r\n        }\r\n        return keys;\r\n    }\r\n\r\n    /**\r\n     * 获取项总数\r\n     */\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n\r\n    /**\r\n     * 清空哈希表\r\n     */\r\n    clear() {\r\n        this.size = 0;\r\n        this.entry = {};\r\n    }\r\n}\r\n\r\nexport default HashTable;"]}]}