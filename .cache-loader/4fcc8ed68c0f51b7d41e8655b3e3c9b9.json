{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\server\\SWServerData.js","mtime":1531376426406},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1533282871391},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global $*/\n\nvar _SWConstants = require('../tool/SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWArrowInfo = require('../data/SWArrowInfo');\n\nvar _SWArrowInfo2 = _interopRequireDefault(_SWArrowInfo);\n\nvar _SWExhibitsInfo = require('../data/SWExhibitsInfo');\n\nvar _SWExhibitsInfo2 = _interopRequireDefault(_SWExhibitsInfo);\n\nvar _SWFacadeByPanoIDInfo = require('../data/SWFacadeByPanoIDInfo');\n\nvar _SWFacadeByPanoIDInfo2 = _interopRequireDefault(_SWFacadeByPanoIDInfo);\n\nvar _SWFloorsInfo = require('../data/SWFloorsInfo');\n\nvar _SWFloorsInfo2 = _interopRequireDefault(_SWFloorsInfo);\n\nvar _SWMarkerInfo = require('../data/SWMarkerInfo');\n\nvar _SWMarkerInfo2 = _interopRequireDefault(_SWMarkerInfo);\n\nvar _SWMultiDataByParentIDInfo = require('../data/SWMultiDataByParentIDInfo');\n\nvar _SWMultiDataByParentIDInfo2 = _interopRequireDefault(_SWMultiDataByParentIDInfo);\n\nvar _SWThumbnailsInfo = require('../data/SWThumbnailsInfo');\n\nvar _SWThumbnailsInfo2 = _interopRequireDefault(_SWThumbnailsInfo);\n\nvar _SWStationInfo = require('../data/SWStationInfo');\n\nvar _SWStationInfo2 = _interopRequireDefault(_SWStationInfo);\n\nvar _SWInitializeInstance = require('../tool/SWInitializeInstance');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar external = require('../tool/SWExternalConst.js');\n\n/**\r\n * 获取服务器数据\r\n */\n\nvar ServerData = function () {\n    function ServerData() {\n        _classCallCheck(this, ServerData);\n\n        /**博物馆ID*/\n        this.museumID = \"\";\n        /**建筑ID*/\n        this.displayID = \"\";\n        /**底层数据库链接*/\n        this.serverURL = \"\";\n        /**业务数据库链接*/\n        this.musServerURL = \"\";\n        /**默认第一站全景ID*/\n        this.firstPanoID = \"\";\n        /**数据存放处*/\n        this.resourcesUrl = \"\";\n        /**功能对象*/\n        this.featuresObj = {};\n    }\n\n    _createClass(ServerData, [{\n        key: 'getmusServerURL',\n        value: function getmusServerURL() {\n            return this.musServerURL;\n        }\n\n        /**\r\n         * 获取配置文件数据\r\n         */\n\n    }, {\n        key: 'getConfig',\n        value: function getConfig() {\n            console.info(external.server_json);\n            this.museumID = external.server_json.museumID;\n            this.displayID = external.server_json.displayID;\n            this.serverURL = external.server_json.serverUrl;\n            this.musServerURL = external.server_json.musServerUrl;\n            this.firstPanoID = external.server_json.firstPanoID;\n            this.resourcesUrl = external.server_json.resourcesUrl;\n            this.featuresObj = external.server_json.data;\n            this.getPanoByID(this.firstPanoID);\n            this.getAllFloorsForBuilding();\n        }\n\n        /**\r\n         * 获得所有楼层站点信息\r\n         */\n\n    }, {\n        key: 'getAllFloorsForBuilding',\n        value: function getAllFloorsForBuilding() {\n            var urls = \"?method=GetAllFloorsForBuilding&buildingID=\" + this.displayID + \"&random=\" + Math.random() * 10;\n            $.ajax({\n                url: this.musServerURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.Floors) {\n                        data.Floors.map(function (obj) {\n                            new _SWFloorsInfo2.default(obj);\n                        });\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获得当前站点信息\r\n         * @param {String} panoid 站点ID\r\n         */\n\n    }, {\n        key: 'getPanoByID',\n        value: function getPanoByID(panoid) {\n            var url = \"/GetPanoByID?ImageID=\" + panoid;\n            $.ajax({\n                url: this.serverURL + url,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.GetPanoByIDResult) {\n                        if (!constants.c_StationInfo || constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetPanoByIDResult.ImageID) {\n                            constants.c_isPreviewImageLoadEnd = false;\n                            constants.c_StationInfo = new _SWStationInfo2.default(data.GetPanoByIDResult);\n                            constants.sw_skyBox.addThumbnail();\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 激光点云面片数据\r\n         * */\n\n    }, {\n        key: 'getFacadeByPanoID',\n        value: function getFacadeByPanoID() {\n            var url = \"/GetFacadeByPanoID/?Z=\" + constants.c_StationInfo.nz + \"&PanoID=\" + constants.c_StationInfo.panoID + \"&TolerateZ=\" + 5;\n            $.ajax({\n                url: this.serverURL + url,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n\n                    if (data.GetFacadeByPanoIDResult) {\n\n                        constants.c_facadeByPanoIDInfoArr.length = 0;\n\n                        data.GetFacadeByPanoIDResult.map(function (obj) {\n\n                            constants.c_facadeByPanoIDInfoArr.push(new _SWFacadeByPanoIDInfo2.default(obj));\n                        });\n\n                        constants.sw_wallMesh.createWallFace();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取老箭头方法\r\n         * */\n\n    }, {\n        key: 'getOldArrow',\n        value: function getOldArrow() {\n            var _this = this;\n\n            var url = \"/GetAdjacentPano/?date=\" + Math.random() * 100 + \"&ImageID=\" + constants.c_StationInfo.panoID;\n            $.ajax({\n                url: this.serverURL + url,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.GetAdjacentPanoResult) {\n                        constants.c_AdjacentPanoInfoArr.length = 0;\n                        data.GetAdjacentPanoResult.map(function (obj) {\n                            constants.c_AdjacentPanoInfoArr.push(new _SWArrowInfo2.default(obj, 1));\n                        });\n                        (0, _SWInitializeInstance.AddOldArrow)();\n                    } else {\n                        _this.getNewArrow();\n                    }\n                }\n            });\n        }\n\n        //获得新箭头\n\n    }, {\n        key: 'getNewArrow',\n        value: function getNewArrow() {\n            var urls = \"?method=getLinkByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n            $.ajax({\n                url: this.musServerURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    constants.c_ArrowPanoInfoArr.length = 0;\n                    if (data.Link) {\n                        data.Link.map(function (obj) {\n                            constants.c_ArrowPanoInfoArr.push(new _SWArrowInfo2.default(obj, 2));\n                        });\n                        (0, _SWInitializeInstance.AddNewArrow)();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 地面跳转\r\n         * */\n\n    }, {\n        key: 'getOtherPanoByPosition',\n        value: function getOtherPanoByPosition(x, y, z, panoid) {\n            var urls = \"/GetOtherPanoByPosition1?TolerateZ=5&Tolerate=100&Z=\" + z + \"&Y=\" + y + \"&ImageID=\" + panoid + \"&X=\" + x;\n            $.ajax({\n                url: this.serverURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetOtherPanoByPositionResult.ImageID) {\n                        constants.c_isPreviewImageLoadEnd = false;\n                        constants.c_StationInfo = new _SWStationInfo2.default(data.GetOtherPanoByPositionResult);\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 墙面跳转\r\n         * @param {Number} x 3DS坐标X\r\n         * @param {Number} y 3DS坐标Y\r\n         * @param {Number} z 3DS坐标Z\r\n         * @param {Number} facadeid 点击跳转的墙面片ID\r\n         */\n\n    }, {\n        key: 'getOtherPanoByFacadeID',\n        value: function getOtherPanoByFacadeID(x, y, z, facadeid) {\n            var urls = \"/GetOtherPanoByFacadeID?facadeID=\" + facadeid + \"&Z=\" + z + \"&Y=\" + y + \"&X=\" + x;\n            $.ajax({\n                url: this.serverURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络链接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (constants.c_isPreviewImageLoadEnd && constants.c_StationInfo.panoID != data.GetOtherPanoByFacadeIDResult.ImageID) {\n                        constants.c_isPreviewImageLoadEnd = false;\n                        constants.c_StationInfo = new _SWStationInfo2.default(data.GetOtherPanoByFacadeIDResult);\n                        constants.sw_skyBox.addThumbnail();\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * 获取标注\r\n         * */\n\n    }, {\n        key: 'getMarkerByPanoID',\n        value: function getMarkerByPanoID() {\n            constants.c_markerInfoArr.length = 0;\n            var urls = \"?method=getMarkerByPanoID&panoID=\" + constants.c_StationInfo.panoID;\n            $.ajax({\n                url: this.musServerURL + urls,\n                type: 'GET',\n                cache: true,\n                dataType: 'json',\n                error: function error(data) {\n                    console.log(\"网络连接错误，请刷新重试！\");\n                },\n                success: function success(data) {\n                    if (data.MarkerInfo) {\n                        data.MarkerInfo.map(function (obj) {\n                            constants.c_markerInfoArr.push(new _SWMarkerInfo2.default(obj));\n                        });\n                        (0, _SWInitializeInstance.AddMarkerMesh)();\n                    }\n                }\n            });\n        }\n    }]);\n\n    return ServerData;\n}();\n\nexports.default = ServerData;",null]}