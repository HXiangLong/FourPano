{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxModule.js","mtime":1531703703136},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE */\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWBoxFaceModule = require('./SWBoxFaceModule');\n\nvar _SWBoxFaceModule2 = _interopRequireDefault(_SWBoxFaceModule);\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 全景盒子\r\n */\nvar SWBoxModule = function () {\n        function SWBoxModule(url, textures) {\n                _classCallCheck(this, SWBoxModule);\n\n                this.box = new THREE.Group(); //全景内盒子\n\n                this.faceArr = []; //面集合\n\n                this.url = url; //贴图路径\n\n                this.textures = textures; //缩略贴图对象\n\n                /**鼠标坐标 */\n                this.mouseV2 = new THREE.Vector2();\n\n                /**射线 */\n                this.raycaster = new THREE.Raycaster();\n\n                this.box.rotation.y = THREE.Math.degToRad(90 - _SWConstants.c_StationInfo.yaw); //每个站点都有一个校正值\n\n                _SWConstants.scene.add(this.box);\n\n                this.addFace();\n\n                this.worldFourPoint = [];\n        }\n\n        _createClass(SWBoxModule, [{\n                key: 'addFace',\n                value: function addFace() {\n\n                        for (var i = 0; i < 6; i++) {\n\n                                var canvas = document.createElement(\"canvas\");\n\n                                canvas.width = canvas.height = _SWConstants.c_ThumbnailSize;\n\n                                var context = canvas.getContext(\"2d\");\n\n                                //计算图片位置\n                                var nint = Math.floor(i / 3);\n                                var mint = i % 3;\n\n                                context.drawImage(this.textures.image, mint * _SWConstants.c_ThumbnailSize, nint * _SWConstants.c_ThumbnailSize, _SWConstants.c_ThumbnailSize, _SWConstants.c_ThumbnailSize, 0, 0, _SWConstants.c_ThumbnailSize, _SWConstants.c_ThumbnailSize);\n\n                                var texture1 = new THREE.Texture(canvas);\n\n                                texture1.needsUpdate = true;\n\n                                var face = new _SWBoxFaceModule2.default(i, this.box, texture1, this.url);\n\n                                this.faceArr.push(face);\n                        }\n                }\n\n                /**相机放大的情况下，有变化时调用此方法 */\n\n        }, {\n                key: 'addFaceTiles',\n                value: function addFaceTiles() {\n\n                        this.getWorldFourPoint();\n\n                        var yaw = this.worldFourPoint.sort(function (a, b) {\n                                if (a.Yaw > b.Yaw) {\n                                        return 1;\n                                } else {\n                                        return -1;\n                                }\n                        });\n\n                        var minYaw = yaw[0].Yaw;\n                        var maxYaw = yaw[yaw.length - 1].Yaw;\n\n                        var pitch = this.worldFourPoint.sort(function (a, b) {\n                                if (a.Pitch > b.Pitch) {\n                                        return 1;\n                                } else {\n                                        return -1;\n                                }\n                        });\n\n                        var minPitch = pitch[0].Pitch;\n                        var maxPitch = pitch[pitch.length - 1].Pitch;\n\n                        if (isNaN(minYaw) || isNaN(maxYaw) || isNaN(minPitch) || isNaN(maxPitch)) return; //上保险，计算错误时不影响程序运行\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.createTiles(minYaw, maxYaw, minPitch, maxPitch);\n                        });\n                }\n\n                /**\r\n                 * 获得当前屏幕四个顶点所在世界的坐标\r\n                 */\n\n        }, {\n                key: 'getWorldFourPoint',\n                value: function getWorldFourPoint() {\n\n                        this.worldFourPoint.length = 0;\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(0, 0)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(window.innerWidth, 0)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(0, window.innerHeight)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(window.innerWidth, window.innerWidth)));\n                }\n\n                /**\r\n                 * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n                 * @param {Number} ex 鼠标/触摸点X坐标\r\n                 * @param {Number} ey 鼠标/触摸点Y坐标\r\n                 */\n\n        }, {\n                key: 'getSceneToWorldRay',\n                value: function getSceneToWorldRay(ex, ey) {\n\n                        this.mouseV2.x = ex / window.innerWidth * 2 - 1;\n\n                        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\n\n                        this.raycaster.setFromCamera(this.mouseV2, _SWConstants.camera);\n\n                        var intersects = this.raycaster.intersectObjects([this.box], true);\n\n                        return intersects[0].point;\n                }\n\n                /**相机缩小的情况下，调用此方法 */\n\n        }, {\n                key: 'clearFaceTiles',\n                value: function clearFaceTiles() {\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.clearTiles(false);\n                        });\n                }\n\n                /**清楚全景盒子所有面片对象 */\n\n        }, {\n                key: 'clearBox',\n                value: function clearBox() {\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.clearTiles(true);\n                        });\n\n                        (0, _SWTool.disposeNode)(this.box);\n                }\n        }]);\n\n        return SWBoxModule;\n}();\n\nexports.default = SWBoxModule;",{"version":3,"sources":["app\\src\\module\\panoBox\\SWBoxModule.js"],"names":["SWBoxModule","url","textures","box","THREE","Group","faceArr","mouseV2","Vector2","raycaster","Raycaster","rotation","y","Math","degToRad","c_StationInfo","yaw","scene","add","addFace","worldFourPoint","i","canvas","document","createElement","width","height","c_ThumbnailSize","context","getContext","nint","floor","mint","drawImage","image","texture1","Texture","needsUpdate","face","SWBoxFaceModule","push","getWorldFourPoint","sort","a","b","Yaw","minYaw","maxYaw","length","pitch","Pitch","minPitch","maxPitch","isNaN","forEach","itme","createTiles","getSceneToWorldRay","window","innerWidth","innerHeight","ex","ey","x","setFromCamera","camera","intersects","intersectObjects","point","clearTiles"],"mappings":"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","file":"SWBoxModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE */\r\n\r\nimport { scene, camera, c_StationInfo, c_ThumbnailSize } from '../../tool/SWConstants';\r\nimport SWBoxFaceModule from './SWBoxFaceModule';\r\nimport { disposeNode, Vector3ToVP } from '../../tool/SWTool';\r\n\r\n/**\r\n * 全景盒子\r\n */\r\nclass SWBoxModule {\r\n    constructor(url, textures) {\r\n        this.box = new THREE.Group(); //全景内盒子\r\n\r\n        this.faceArr = []; //面集合\r\n\r\n        this.url = url; //贴图路径\r\n\r\n        this.textures = textures; //缩略贴图对象\r\n\r\n        /**鼠标坐标 */\r\n        this.mouseV2 = new THREE.Vector2();\r\n\r\n        /**射线 */\r\n        this.raycaster = new THREE.Raycaster();\r\n\r\n        this.box.rotation.y = THREE.Math.degToRad(90 - c_StationInfo.yaw); //每个站点都有一个校正值\r\n\r\n        scene.add(this.box);\r\n\r\n        this.addFace();\r\n\r\n        this.worldFourPoint = [];\r\n    }\r\n\r\n    addFace() {\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n\r\n            let canvas = document.createElement(\"canvas\");\r\n\r\n            canvas.width = canvas.height = c_ThumbnailSize;\r\n\r\n            let context = canvas.getContext(\"2d\");\r\n\r\n            //计算图片位置\r\n            let nint = Math.floor(i / 3);\r\n            let mint = i % 3;\r\n\r\n            context.drawImage(this.textures.image,\r\n\r\n                mint * c_ThumbnailSize,\r\n\r\n                nint * c_ThumbnailSize,\r\n\r\n                c_ThumbnailSize,\r\n\r\n                c_ThumbnailSize,\r\n\r\n                0,\r\n\r\n                0,\r\n                c_ThumbnailSize,\r\n\r\n                c_ThumbnailSize);\r\n\r\n            let texture1 = new THREE.Texture(canvas);\r\n\r\n            texture1.needsUpdate = true;\r\n\r\n            let face = new SWBoxFaceModule(i, this.box, texture1, this.url);\r\n\r\n            this.faceArr.push(face);\r\n\r\n        }\r\n    }\r\n\r\n    /**相机放大的情况下，有变化时调用此方法 */\r\n    addFaceTiles() {\r\n\r\n        this.getWorldFourPoint();\r\n\r\n        let yaw = this.worldFourPoint.sort((a, b) => {\r\n            if (a.Yaw > b.Yaw) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n        });\r\n\r\n        let minYaw = yaw[0].Yaw;\r\n        let maxYaw = yaw[yaw.length - 1].Yaw;\r\n\r\n        let pitch = this.worldFourPoint.sort((a, b) => {\r\n            if (a.Pitch > b.Pitch) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n        });\r\n\r\n        let minPitch = pitch[0].Pitch;\r\n        let maxPitch = pitch[pitch.length - 1].Pitch;\r\n\r\n        if (isNaN(minYaw) || isNaN(maxYaw) || isNaN(minPitch) || isNaN(maxPitch)) return; //上保险，计算错误时不影响程序运行\r\n\r\n        this.faceArr.forEach((itme) => {\r\n\r\n            itme.createTiles(minYaw, maxYaw, minPitch, maxPitch);\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获得当前屏幕四个顶点所在世界的坐标\r\n     */\r\n    getWorldFourPoint() {\r\n\r\n        this.worldFourPoint.length = 0;\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(0, 0)));\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(window.innerWidth, 0)));\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(0, window.innerHeight)));\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(window.innerWidth, window.innerWidth)));\r\n\r\n    }\r\n\r\n    /**\r\n     * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n     * @param {Number} ex 鼠标/触摸点X坐标\r\n     * @param {Number} ey 鼠标/触摸点Y坐标\r\n     */\r\n    getSceneToWorldRay(ex, ey) {\r\n\r\n        this.mouseV2.x = (ex / window.innerWidth) * 2 - 1;\r\n\r\n        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera(this.mouseV2, camera);\r\n\r\n        let intersects = this.raycaster.intersectObjects([this.box], true);\r\n\r\n        return intersects[0].point;\r\n    }\r\n\r\n    /**相机缩小的情况下，调用此方法 */\r\n    clearFaceTiles() {\r\n\r\n        this.faceArr.forEach((itme) => {\r\n\r\n            itme.clearTiles(false);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**清楚全景盒子所有面片对象 */\r\n    clearBox() {\r\n\r\n        this.faceArr.forEach((itme) => {\r\n\r\n            itme.clearTiles(true);\r\n\r\n        });\r\n\r\n        disposeNode(this.box);\r\n\r\n    }\r\n}\r\n\r\nexport default SWBoxModule;"]}]}