{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxModule.js","mtime":1545644777539},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE */\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWBoxFaceModule = require('./SWBoxFaceModule');\n\nvar _SWBoxFaceModule2 = _interopRequireDefault(_SWBoxFaceModule);\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWInitializeInstance = require('../../tool/SWInitializeInstance');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 全景盒子\r\n */\nvar SWBoxModule = function () {\n        function SWBoxModule(url, textures) {\n                _classCallCheck(this, SWBoxModule);\n\n                this.thumbnailSize = 128;\n\n                this.box = new THREE.Group(); //全景内盒子\n\n                this.faceArr = []; //面集合\n\n                this.worldFourPoint = []; //當前屏幕四個顶点在世界的位置\n\n                this.url = url; //贴图路径\n\n                this.textures = textures; //缩略贴图对象\n\n                this.faceNum = 0;\n\n                /**鼠标坐标 */\n                this.mouseV2 = new THREE.Vector2();\n\n                /**射线 */\n                this.raycaster = new THREE.Raycaster();\n\n                this.box.rotation.y = THREE.Math.degToRad(90 - _SWConstants.c_StationInfo.yaw); //每个站点都有一个校正值\n\n                this.regulateYaw = THREE.Math.radToDeg(this.box.rotation.y);\n\n                _SWConstants.scene.add(this.box);\n\n                this.addFace();\n        }\n\n        _createClass(SWBoxModule, [{\n                key: 'addFace',\n                value: function addFace() {\n                        var _this = this;\n\n                        var angle = (0, _SWTool.getNumberMax360)(Math.abs(this.regulateYaw) + _SWConstants.sw_cameraManage.yaw_Camera) / 90; //计算现在先看到的是那个面\n\n                        var originalOrderArr = [0, 1, 2, 3, 4, 5];\n\n                        var arr1 = originalOrderArr.slice(0, angle - 1);\n\n                        var arr2 = originalOrderArr.slice(angle - 1);\n\n                        var newOrderArr = [].concat(_toConsumableArray(arr2), _toConsumableArray(arr1));\n\n                        newOrderArr.forEach(function (item) {\n\n                                var texture1 = null;\n\n                                if (!_SWConstants.c_panoImageTable.containsKey(_SWConstants.c_StationInfo.panoID + \"_\" + item)) {\n\n                                        var canvas = document.createElement(\"canvas\");\n\n                                        canvas.width = canvas.height = _this.thumbnailSize;\n\n                                        var context = canvas.getContext(\"2d\");\n\n                                        //计算图片位置\n                                        var nint = Math.floor(item / 3);\n                                        var mint = item % 3;\n\n                                        context.drawImage(_this.textures.image, mint * _this.thumbnailSize, nint * _this.thumbnailSize, _this.thumbnailSize, _this.thumbnailSize, 0, 0, _this.thumbnailSize, _this.thumbnailSize);\n\n                                        texture1 = new THREE.Texture(canvas);\n\n                                        texture1.needsUpdate = true;\n                                }\n\n                                var face = new _SWBoxFaceModule2.default(item, _this.box, texture1, _this.url, function () {\n\n                                        _this.faceNum += 1;\n\n                                        if (_this.faceNum >= 6) {\n\n                                                (0, _SWInitializeInstance.LoadPreviewImage)();\n                                        }\n                                });\n\n                                _this.faceArr.push(face);\n                        });\n                }\n\n                /**相机放大的情况下，有变化时调用此方法 */\n\n        }, {\n                key: 'addFaceTiles',\n                value: function addFaceTiles() {\n                        var yp = this.getWorldFourPoint();\n                        if (yp) {\n\n                                this.faceArr.forEach(function (itme) {\n\n                                        itme.createTiles(yp[0], yp[1], yp[2], yp[3]);\n                                });\n                        }\n                }\n\n                /**\r\n                 * 获得当前屏幕四个顶点所在世界的坐标\r\n                 */\n\n        }, {\n                key: 'getWorldFourPoint',\n                value: function getWorldFourPoint() {\n\n                        this.worldFourPoint.length = 0;\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(0, 0)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(_SWConstants.c_clientWidth, 0)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(0, _SWConstants.c_clientHeight)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(_SWConstants.c_clientWidth, _SWConstants.c_clientHeight)));\n\n                        var yaw = this.worldFourPoint.sort(function (a, b) {\n                                if (a.Yaw > b.Yaw) {\n                                        return 1;\n                                } else {\n                                        return -1;\n                                }\n                        });\n\n                        var minYaw = yaw[0].Yaw;\n                        var maxYaw = yaw[yaw.length - 1].Yaw;\n\n                        var pitch = this.worldFourPoint.sort(function (a, b) {\n                                if (a.Pitch > b.Pitch) {\n                                        return 1;\n                                } else {\n                                        return -1;\n                                }\n                        });\n\n                        var minPitch = pitch[0].Pitch;\n                        var maxPitch = pitch[pitch.length - 1].Pitch;\n\n                        if (isNaN(minYaw) || isNaN(maxYaw) || isNaN(minPitch) || isNaN(maxPitch)) return; //上保险，计算错误时不影响程序运行\n\n                        return [minYaw, maxYaw, minPitch, maxPitch];\n                }\n\n                /**\r\n                 * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n                 * @param {Number} ex 鼠标/触摸点X坐标\r\n                 * @param {Number} ey 鼠标/触摸点Y坐标\r\n                 */\n\n        }, {\n                key: 'getSceneToWorldRay',\n                value: function getSceneToWorldRay(ex, ey) {\n\n                        this.mouseV2.x = ex / window.innerWidth * 2 - 1;\n\n                        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\n\n                        this.raycaster.setFromCamera(this.mouseV2, _SWConstants.camera);\n\n                        var intersects = this.raycaster.intersectObjects([this.box], true);\n\n                        return intersects.length > 0 ? intersects[0].point : new THREE.Vector3(0, 0, 0);\n                }\n\n                /**相机缩小的情况下，调用此方法 */\n\n        }, {\n                key: 'clearFaceTiles',\n                value: function clearFaceTiles() {\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.clearTiles(false);\n                        });\n                }\n\n                /**清楚全景盒子所有面片对象 */\n\n        }, {\n                key: 'clearBox',\n                value: function clearBox() {\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.clearTiles(true);\n                        });\n\n                        (0, _SWTool.disposeNode)(this.box);\n                }\n        }]);\n\n        return SWBoxModule;\n}();\n\nexports.default = SWBoxModule;",{"version":3,"sources":["app\\src\\module\\panoBox\\SWBoxModule.js"],"names":["SWBoxModule","url","textures","thumbnailSize","box","THREE","Group","faceArr","worldFourPoint","faceNum","mouseV2","Vector2","raycaster","Raycaster","rotation","y","Math","degToRad","c_StationInfo","yaw","regulateYaw","radToDeg","scene","add","addFace","angle","abs","sw_cameraManage","yaw_Camera","originalOrderArr","arr1","slice","arr2","newOrderArr","forEach","item","texture1","c_panoImageTable","containsKey","panoID","canvas","document","createElement","width","height","context","getContext","nint","floor","mint","drawImage","image","Texture","needsUpdate","face","SWBoxFaceModule","push","yp","getWorldFourPoint","itme","createTiles","length","getSceneToWorldRay","c_clientWidth","c_clientHeight","sort","a","b","Yaw","minYaw","maxYaw","pitch","Pitch","minPitch","maxPitch","isNaN","ex","ey","x","window","innerWidth","innerHeight","setFromCamera","camera","intersects","intersectObjects","point","Vector3","clearTiles"],"mappings":"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","file":"SWBoxModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE */\r\n\r\nimport {\r\n    scene,\r\n    camera,\r\n    c_StationInfo,\r\n    sw_cameraManage,\r\n    c_clientHeight,\r\n    c_clientWidth,\r\n    c_panoImageTable\r\n} from '../../tool/SWConstants';\r\nimport SWBoxFaceModule from './SWBoxFaceModule';\r\nimport {\r\n    disposeNode,\r\n    Vector3ToVP,\r\n    getNumberMax360\r\n} from '../../tool/SWTool';\r\nimport {\r\n    LoadPreviewImage\r\n} from '../../tool/SWInitializeInstance';\r\n\r\n/**\r\n * 全景盒子\r\n */\r\nclass SWBoxModule {\r\n    constructor(url, textures) {\r\n\r\n        this.thumbnailSize = 128;\r\n\r\n        this.box = new THREE.Group(); //全景内盒子\r\n\r\n        this.faceArr = []; //面集合\r\n\r\n        this.worldFourPoint = []; //當前屏幕四個顶点在世界的位置\r\n\r\n        this.url = url; //贴图路径\r\n\r\n        this.textures = textures; //缩略贴图对象\r\n\r\n        this.faceNum = 0;\r\n\r\n        /**鼠标坐标 */\r\n        this.mouseV2 = new THREE.Vector2();\r\n\r\n        /**射线 */\r\n        this.raycaster = new THREE.Raycaster();\r\n\r\n        this.box.rotation.y = THREE.Math.degToRad(90 - c_StationInfo.yaw); //每个站点都有一个校正值\r\n\r\n        this.regulateYaw = THREE.Math.radToDeg(this.box.rotation.y);\r\n\r\n        scene.add(this.box);\r\n\r\n        this.addFace();\r\n    }\r\n\r\n    addFace() {\r\n\r\n        let angle = getNumberMax360(Math.abs(this.regulateYaw) + sw_cameraManage.yaw_Camera) / 90; //计算现在先看到的是那个面\r\n\r\n        let originalOrderArr = [0, 1, 2, 3, 4, 5];\r\n\r\n        let arr1 = originalOrderArr.slice(0, angle - 1);\r\n\r\n        let arr2 = originalOrderArr.slice(angle - 1);\r\n\r\n        let newOrderArr = [...arr2, ...arr1];\r\n\r\n        newOrderArr.forEach((item) => {\r\n\r\n            let texture1 = null;\r\n\r\n            if (!c_panoImageTable.containsKey(c_StationInfo.panoID + \"_\" + item)) {\r\n\r\n                let canvas = document.createElement(\"canvas\");\r\n\r\n                canvas.width = canvas.height = this.thumbnailSize;\r\n\r\n                let context = canvas.getContext(\"2d\");\r\n\r\n                //计算图片位置\r\n                let nint = Math.floor(item / 3);\r\n                let mint = item % 3;\r\n\r\n                context.drawImage(this.textures.image,\r\n\r\n                    mint * this.thumbnailSize,\r\n\r\n                    nint * this.thumbnailSize,\r\n\r\n                    this.thumbnailSize,\r\n\r\n                    this.thumbnailSize,\r\n\r\n                    0,\r\n\r\n                    0,\r\n                    this.thumbnailSize,\r\n\r\n                    this.thumbnailSize);\r\n\r\n                texture1 = new THREE.Texture(canvas);\r\n\r\n                texture1.needsUpdate = true;\r\n            }\r\n\r\n            let face = new SWBoxFaceModule(item, this.box, texture1, this.url, () => {\r\n\r\n                this.faceNum += 1;\r\n\r\n                if (this.faceNum >= 6) {\r\n\r\n                    LoadPreviewImage();\r\n                }\r\n            });\r\n\r\n            this.faceArr.push(face);\r\n\r\n        })\r\n    }\r\n\r\n    /**相机放大的情况下，有变化时调用此方法 */\r\n    addFaceTiles() {\r\n        let yp = this.getWorldFourPoint();\r\n        if (yp) {\r\n\r\n            this.faceArr.forEach((itme) => {\r\n\r\n                itme.createTiles(yp[0], yp[1], yp[2], yp[3]);\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获得当前屏幕四个顶点所在世界的坐标\r\n     */\r\n    getWorldFourPoint() {\r\n\r\n        this.worldFourPoint.length = 0;\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(0, 0)));\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(c_clientWidth, 0)));\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(0, c_clientHeight)));\r\n\r\n        this.worldFourPoint.push(Vector3ToVP(this.getSceneToWorldRay(c_clientWidth, c_clientHeight)));\r\n\r\n        let yaw = this.worldFourPoint.sort((a, b) => {\r\n            if (a.Yaw > b.Yaw) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n        });\r\n\r\n        let minYaw = yaw[0].Yaw;\r\n        let maxYaw = yaw[yaw.length - 1].Yaw;\r\n\r\n        let pitch = this.worldFourPoint.sort((a, b) => {\r\n            if (a.Pitch > b.Pitch) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n        });\r\n\r\n        let minPitch = pitch[0].Pitch;\r\n        let maxPitch = pitch[pitch.length - 1].Pitch;\r\n\r\n        if (isNaN(minYaw) || isNaN(maxYaw) || isNaN(minPitch) || isNaN(maxPitch)) return; //上保险，计算错误时不影响程序运行\r\n\r\n        return [minYaw, maxYaw, minPitch, maxPitch];\r\n    }\r\n\r\n    /**\r\n     * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n     * @param {Number} ex 鼠标/触摸点X坐标\r\n     * @param {Number} ey 鼠标/触摸点Y坐标\r\n     */\r\n    getSceneToWorldRay(ex, ey) {\r\n\r\n        this.mouseV2.x = (ex / window.innerWidth) * 2 - 1;\r\n\r\n        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera(this.mouseV2, camera);\r\n\r\n        let intersects = this.raycaster.intersectObjects([this.box], true);\r\n\r\n        return intersects.length > 0 ? intersects[0].point : new THREE.Vector3(0, 0, 0);\r\n    }\r\n\r\n    /**相机缩小的情况下，调用此方法 */\r\n    clearFaceTiles() {\r\n\r\n        this.faceArr.forEach((itme) => {\r\n\r\n            itme.clearTiles(false);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**清楚全景盒子所有面片对象 */\r\n    clearBox() {\r\n\r\n        this.faceArr.forEach((itme) => {\r\n\r\n            itme.clearTiles(true);\r\n\r\n        });\r\n\r\n        disposeNode(this.box);\r\n\r\n    }\r\n}\r\n\r\nexport default SWBoxModule;"]}]}