{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawPoint.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawPoint.js","mtime":1531455011451},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1526554899270},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 绘制点\r\n */\nvar SWDrawPoint = function () {\n    function SWDrawPoint() {\n        _classCallCheck(this, SWDrawPoint);\n\n        this.dotRadius = 0.3; //圆点半径\n        this.dotFillColors = 0xff0000; // 圆点填充颜色\n        this.allPointArr = [];\n    }\n\n    /**绘制点 */\n\n\n    _createClass(SWDrawPoint, [{\n        key: 'drawPoint',\n        value: function drawPoint(point) {\n            var radius = point.distanceTo(new THREE.Vector3(0, 0, 0)) / 30 * 0.3;\n            this.dotRadius = radius > 30 ? 30 : radius;\n            var sphereGeometry = new THREE.SphereGeometry(this.dotRadius, 32);\n            var sphereMaterial = new THREE.MeshBasicMaterial({\n                color: this.dotFillColors,\n                shading: THREE.FlatShading\n            });\n            var dotMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n            dotMesh.position.copy(point);\n            _SWConstants.scene.add(dotMesh);\n            this.allPointArr.push(dotMesh);\n        }\n\n        /**\r\n         * 清除点\r\n         * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n         */\n\n    }, {\n        key: 'clear',\n        value: function clear() {\n            var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            var dArr = num == 0 ? this.allPointArr.splice(0, this.allPointArr.length) : num < 0 ? this.allPointArr.splice(num, Math.abs(num)) : this.allPointArr.splice(0, num);\n            dArr.map(function (item, idx) {\n\n                (0, _SWTool.disposeNode)(item);\n            });\n        }\n    }]);\n\n    return SWDrawPoint;\n}();\n\nexports.default = SWDrawPoint;",null]}