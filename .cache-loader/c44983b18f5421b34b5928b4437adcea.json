{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawString.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\draw\\SWDrawString.js","mtime":1537409793660},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538971317145},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// const external = require('../../tool/SWExternalConst');\n/**\r\n * 绘制字符串\r\n */\nvar SWDrawString = function () {\n        function SWDrawString() {\n                var _this = this;\n\n                _classCallCheck(this, SWDrawString);\n\n                this.font = undefined;\n\n                this.textArr = [];\n\n                //字体用的是绝对地址\n                (0, _SWTool.getFont)('http://ojv7mano6.bkt.clouddn.com/optimer_regular.typeface.json').then(function (response) {\n                        _this.font = response;\n                });\n        }\n\n        _createClass(SWDrawString, [{\n                key: 'drawString',\n                value: function drawString(labelPos, text, dotRadius) {\n\n                        var fontSize = dotRadius * 3;\n\n                        var options = {\n                                size: fontSize,\n                                height: 0,\n                                weight: 'normal',\n                                font: this.font,\n                                style: 'normal',\n                                bevelThickness: 1,\n                                bevelSize: 1,\n                                bevelSegments: 1,\n                                curveSegments: 50,\n                                steps: 1\n                        };\n\n                        var meshText = new THREE.Mesh(new THREE.TextGeometry(text, options), new THREE.MeshBasicMaterial({ color: 0xffffff }));\n\n                        meshText.position.copy(labelPos);\n\n                        meshText.lookAt(_SWConstants.camera.position);\n\n                        meshText.scale.set(0.3, 0.3, 0.3);\n\n                        _SWConstants.scene.add(meshText);\n\n                        this.textArr.push(meshText);\n                }\n\n                /**\r\n                 * 清除点\r\n                 * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n                 */\n\n        }, {\n                key: 'clear',\n                value: function clear() {\n                        var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n\n                        var dArr = num == 0 ? this.textArr.splice(0, this.textArr.length) : num < 0 ? this.textArr.splice(num, Math.abs(num)) : this.textArr.splice(0, num);\n\n                        dArr.forEach(function (item) {\n\n                                (0, _SWTool.disposeNode)(item);\n                        });\n                }\n        }]);\n\n        return SWDrawString;\n}();\n\nexports.default = SWDrawString;",{"version":3,"sources":["app\\src\\module\\draw\\SWDrawString.js"],"names":["SWDrawString","font","undefined","textArr","then","response","labelPos","text","dotRadius","fontSize","options","size","height","weight","style","bevelThickness","bevelSize","bevelSegments","curveSegments","steps","meshText","THREE","Mesh","TextGeometry","MeshBasicMaterial","color","position","copy","lookAt","camera","scale","set","scene","add","push","num","dArr","splice","length","Math","abs","forEach","item"],"mappings":";;;;;;qjBAAA;;;AACA;;AACA;;;;AACA;AACA;;;IAGMA,Y;AACF,gCAAc;AAAA;;AAAA;;AAEV,qBAAKC,IAAL,GAAYC,SAAZ;;AAEA,qBAAKC,OAAL,GAAe,EAAf;;AAEA;AACA,qCAAQ,gEAAR,EAA0EC,IAA1E,CAA+E,UAACC,QAAD,EAAc;AACzF,8BAAKJ,IAAL,GAAYI,QAAZ;AACH,iBAFD;AAGH;;;;2CAEUC,Q,EAAUC,I,EAAMC,S,EAAW;;AAElC,4BAAIC,WAAWD,YAAY,CAA3B;;AAEA,4BAAIE,UAAU;AACVC,sCAAMF,QADI;AAEVG,wCAAQ,CAFE;AAGVC,wCAAQ,QAHE;AAIVZ,sCAAM,KAAKA,IAJD;AAKVa,uCAAO,QALG;AAMVC,gDAAgB,CANN;AAOVC,2CAAW,CAPD;AAQVC,+CAAe,CARL;AASVC,+CAAe,EATL;AAUVC,uCAAO;AAVG,yBAAd;;AAaA,4BAAIC,WAAW,IAAIC,MAAMC,IAAV,CAAe,IAAID,MAAME,YAAV,CAAuBhB,IAAvB,EAA6BG,OAA7B,CAAf,EAAsD,IAAIW,MAAMG,iBAAV,CAA4B,EAAEC,OAAO,QAAT,EAA5B,CAAtD,CAAf;;AAEAL,iCAASM,QAAT,CAAkBC,IAAlB,CAAuBrB,QAAvB;;AAEAc,iCAASQ,MAAT,CAAgBC,oBAAOH,QAAvB;;AAEAN,iCAASU,KAAT,CAAeC,GAAf,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B;;AAEAC,2CAAMC,GAAN,CAAUb,QAAV;;AAEA,6BAAKjB,OAAL,CAAa+B,IAAb,CAAkBd,QAAlB;AACH;;AAED;;;;;;;wCAIe;AAAA,4BAATe,GAAS,uEAAH,CAAG;;;AAEX,4BAAIC,OAAOD,OAAO,CAAP,GAAW,KAAKhC,OAAL,CAAakC,MAAb,CAAoB,CAApB,EAAuB,KAAKlC,OAAL,CAAamC,MAApC,CAAX,GAAyDH,MAAM,CAAN,GAAU,KAAKhC,OAAL,CAAakC,MAAb,CAAoBF,GAApB,EAAyBI,KAAKC,GAAL,CAASL,GAAT,CAAzB,CAAV,GAAoD,KAAKhC,OAAL,CAAakC,MAAb,CAAoB,CAApB,EAAuBF,GAAvB,CAAxH;;AAEAC,6BAAKK,OAAL,CAAa,UAACC,IAAD,EAAU;;AAEnB,yDAAYA,IAAZ;AAEH,yBAJD;AAKH;;;;;;kBAGU1C,Y","file":"SWDrawString.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\nimport { scene, camera, sw_getService } from '../../tool/SWConstants';\r\nimport { disposeNode, getFont } from '../../tool/SWTool';\r\n// const external = require('../../tool/SWExternalConst');\r\n/**\r\n * 绘制字符串\r\n */\r\nclass SWDrawString {\r\n    constructor() {\r\n\r\n        this.font = undefined;\r\n\r\n        this.textArr = [];\r\n\r\n        //字体用的是绝对地址\r\n        getFont('http://ojv7mano6.bkt.clouddn.com/optimer_regular.typeface.json').then((response) => {\r\n            this.font = response;\r\n        });\r\n    }\r\n\r\n    drawString(labelPos, text, dotRadius) {\r\n\r\n        let fontSize = dotRadius * 3;\r\n\r\n        let options = {\r\n            size: fontSize,\r\n            height: 0,\r\n            weight: 'normal',\r\n            font: this.font,\r\n            style: 'normal',\r\n            bevelThickness: 1,\r\n            bevelSize: 1,\r\n            bevelSegments: 1,\r\n            curveSegments: 50,\r\n            steps: 1\r\n        };\r\n\r\n        let meshText = new THREE.Mesh(new THREE.TextGeometry(text, options), new THREE.MeshBasicMaterial({ color: 0xffffff }));\r\n\r\n        meshText.position.copy(labelPos);\r\n\r\n        meshText.lookAt(camera.position);\r\n\r\n        meshText.scale.set(0.3, 0.3, 0.3);\r\n\r\n        scene.add(meshText);\r\n\r\n        this.textArr.push(meshText);\r\n    }\r\n\r\n    /**\r\n     * 清除点\r\n     * @param {Number} num 0-全部清除 -1从尾部开始清除 1从头开始清除\r\n     */\r\n    clear(num = 0) {\r\n\r\n        let dArr = num == 0 ? this.textArr.splice(0, this.textArr.length) : num < 0 ? this.textArr.splice(num, Math.abs(num)) : this.textArr.splice(0, num);\r\n\r\n        dArr.forEach((item) => {\r\n\r\n            disposeNode(item);\r\n\r\n        });\r\n    }\r\n}\r\n\r\nexport default SWDrawString;"]}]}