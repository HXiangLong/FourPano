{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallFaceModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\laser\\SWWallFaceModule.js","mtime":1538128385525},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538971317145},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE*/\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWTool = require('../../tool/SWTool');\n\nvar _SWInitializeInstance = require('../../tool/SWInitializeInstance');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 激光点云墙面片\r\n */\nvar SWWallFaceModule = function () {\n    function SWWallFaceModule(obj) {\n        _classCallCheck(this, SWWallFaceModule);\n\n        this.info = obj; //面片数据\n        this.points = [];\n        this.startPoint = new THREE.Vector2();\n        this.wallmesh = undefined;\n\n        this.drawWallFace();\n    }\n\n    /**\r\n     * 绘制墙面片\r\n     */\n\n\n    _createClass(SWWallFaceModule, [{\n        key: 'drawWallFace',\n        value: function drawWallFace() {\n\n            var sif = _SWConstants.c_StationInfo.point.clone();\n\n            this.points.p1 = new THREE.Vector3(this.info.points.p1.x - sif.x, this.info.points.p1.y - sif.y, this.info.points.p1.z - sif.z);\n            this.points.p2 = new THREE.Vector3(this.info.points.p2.x - sif.x, this.info.points.p2.y - sif.y, this.info.points.p2.z - sif.z);\n            this.points.p3 = new THREE.Vector3(this.info.points.p3.x - sif.x, this.info.points.p3.y - sif.y, this.info.points.p3.z - sif.z);\n            this.points.p4 = new THREE.Vector3(this.info.points.p4.x - sif.x, this.info.points.p4.y - sif.y, this.info.points.p4.z - sif.z);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: (0, _SWTool.getRandomColor)(),\n                depthTest: true,\n                side: 2,\n                transparent: true,\n                opacity: 0\n            });\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices.push(new THREE.Vector3(this.points.p1.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p1.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p1.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p2.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p2.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p2.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p3.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p3.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p3.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n            geometry.vertices.push(new THREE.Vector3(this.points.p4.x * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p4.y * 0.5 * _SWConstants.c_WallDisplaySize, this.points.p4.z * 0.5 * _SWConstants.c_WallDisplaySize).applyMatrix4(_SWConstants.c_DS3ToOpenGLMx4));\n\n            var face = new THREE.Face3(0, 1, 2);\n            var face1 = new THREE.Face3(2, 3, 0);\n            geometry.faces.push(face);\n            geometry.faces.push(face1);\n            geometry.computeFaceNormals();\n\n            this.wallmesh = new THREE.Mesh(geometry, material);\n            this.wallmesh.rotation.y = THREE.Math.degToRad(90);\n            this.wallmesh.rotation.z = THREE.Math.degToRad(180);\n            this.wallmesh.userData.depthlevel = 2;\n            this.wallmesh.name = this.info.facadeID;\n            _SWConstants.scene.add(this.wallmesh);\n\n            this.wallMouseEvent();\n        }\n\n        /**墙面面片鼠标事件 */\n\n    }, {\n        key: 'wallMouseEvent',\n        value: function wallMouseEvent() {\n            var _this = this;\n\n            //鼠标进入\n            this.wallmesh.mouseOver = function (e, obj) {\n\n                _SWConstants.sw_wallProbeSurface.wallProbeSurfaceVisible(1);\n            };\n\n            //出去\n            this.wallmesh.mouseOut = function (e, obj) {\n\n                _SWConstants.sw_wallProbeSurface.wallProbeSurfaceVisible(0);\n            };\n\n            //移动\n            this.wallmesh.mouseMove = function (e, obj) {\n\n                _SWConstants.sw_wallProbeSurface.wallFaceMove(obj);\n            };\n\n            //鼠标弹起\n            this.wallmesh.mouseUp = function (e, obj) {\n\n                var event = e || window.event;\n\n                var v3 = new THREE.Vector2(event.clientX, event.clientY);\n\n                var boo = v3.equals(_this.startPoint);\n\n                if (boo) {\n                    //测量状态开启\n                    if (_SWConstants.c_isMeasureStatus) {\n                        _SWConstants.sw_measure.addPoint(obj, 1);\n                        return;\n                    }\n\n                    if (_SWConstants.sw_wallProbeSurface.isWallFaceJumpBoo) {\n\n                        var realPoint1 = obj.point.clone().applyMatrix4(obj.object.matrix).applyMatrix4(_SWConstants.c_OpenGLToDS3Mx4);\n\n                        var realPoint = new THREE.Vector3(_SWConstants.c_StationInfo.nx + realPoint1.x / 10, _SWConstants.c_StationInfo.ny + realPoint1.y / 10, _SWConstants.c_StationInfo.nz + realPoint1.z / 10);\n\n                        _SWConstants.c_wallClickRotateV3.copy(realPoint);\n\n                        (0, _SWInitializeInstance.deleteAll)();\n\n                        _SWConstants.sw_getService.getOtherPanoByFacadeID(realPoint.x, realPoint.y, realPoint.z, obj.object.name);\n                    } else {\n\n                        var vp = (0, _SWTool.Vector3ToVP)(obj.point.clone());\n\n                        (0, _SWTool.setCameraAngle)(vp.Yaw, vp.Pitch, true);\n\n                        _SWConstants.sw_cameraManage.setWallWheel();\n                    }\n                }\n            };\n\n            //鼠标按下\n            this.wallmesh.mouseDown = function (e) {\n\n                var event = e || window.event;\n\n                _this.startPoint.x = event.clientX;\n\n                _this.startPoint.y = event.clientY;\n            };\n        }\n\n        /**清除墙面片 */\n\n    }, {\n        key: 'clearWallMesh',\n        value: function clearWallMesh() {\n            (0, _SWTool.disposeNode)(this.wallmesh);\n        }\n    }]);\n\n    return SWWallFaceModule;\n}();\n\nexports.default = SWWallFaceModule;",{"version":3,"sources":["app\\src\\module\\laser\\SWWallFaceModule.js"],"names":["SWWallFaceModule","obj","info","points","startPoint","THREE","Vector2","wallmesh","undefined","drawWallFace","sif","c_StationInfo","point","clone","p1","Vector3","x","y","z","p2","p3","p4","material","MeshLambertMaterial","color","depthTest","side","transparent","opacity","geometry","Geometry","vertices","push","c_WallDisplaySize","applyMatrix4","c_DS3ToOpenGLMx4","face","Face3","face1","faces","computeFaceNormals","Mesh","rotation","Math","degToRad","userData","depthlevel","name","facadeID","scene","add","wallMouseEvent","mouseOver","e","sw_wallProbeSurface","wallProbeSurfaceVisible","mouseOut","mouseMove","wallFaceMove","mouseUp","event","window","v3","clientX","clientY","boo","equals","c_isMeasureStatus","sw_measure","addPoint","isWallFaceJumpBoo","realPoint1","object","matrix","c_OpenGLToDS3Mx4","realPoint","nx","ny","nz","c_wallClickRotateV3","copy","sw_getService","getOtherPanoByFacadeID","vp","Yaw","Pitch","sw_cameraManage","setWallWheel","mouseDown"],"mappings":"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","file":"SWWallFaceModule.js","sourceRoot":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano","sourcesContent":["/* global THREE*/\r\n\r\nimport {\r\n    scene,\r\n    c_StationInfo,\r\n    c_WallDisplaySize,\r\n    c_DS3ToOpenGLMx4,\r\n    c_OpenGLToDS3Mx4,\r\n    c_wallClickRotateV3,\r\n    sw_getService,\r\n    sw_wallProbeSurface,\r\n    sw_cameraManage,\r\n    c_isMeasureStatus,\r\n    sw_measure\r\n} from '../../tool/SWConstants';\r\nimport { getRandomColor, disposeNode, Vector3ToVP, setCameraAngle } from '../../tool/SWTool';\r\nimport { deleteAll } from '../../tool/SWInitializeInstance';\r\n/**\r\n * 激光点云墙面片\r\n */\r\nclass SWWallFaceModule {\r\n    constructor(obj) {\r\n        this.info = obj; //面片数据\r\n        this.points = [];\r\n        this.startPoint = new THREE.Vector2();\r\n        this.wallmesh = undefined;\r\n\r\n        this.drawWallFace();\r\n    }\r\n\r\n    /**\r\n     * 绘制墙面片\r\n     */\r\n    drawWallFace() {\r\n\r\n        let sif = c_StationInfo.point.clone();\r\n\r\n        this.points.p1 = new THREE.Vector3(this.info.points.p1.x - sif.x,\r\n            this.info.points.p1.y - sif.y,\r\n            this.info.points.p1.z - sif.z);\r\n        this.points.p2 = new THREE.Vector3(this.info.points.p2.x - sif.x,\r\n            this.info.points.p2.y - sif.y,\r\n            this.info.points.p2.z - sif.z);\r\n        this.points.p3 = new THREE.Vector3(this.info.points.p3.x - sif.x,\r\n            this.info.points.p3.y - sif.y,\r\n            this.info.points.p3.z - sif.z);\r\n        this.points.p4 = new THREE.Vector3(this.info.points.p4.x - sif.x,\r\n            this.info.points.p4.y - sif.y,\r\n            this.info.points.p4.z - sif.z);\r\n\r\n        let material = new THREE.MeshLambertMaterial({\r\n            color: getRandomColor(),\r\n            depthTest: true,\r\n            side: 2,\r\n            transparent: true,\r\n            opacity: 0\r\n        });\r\n\r\n        let geometry = new THREE.Geometry();\r\n        geometry.vertices.push(new THREE.Vector3(this.points.p1.x * 0.5 * c_WallDisplaySize,\r\n            this.points.p1.y * 0.5 * c_WallDisplaySize,\r\n            this.points.p1.z * 0.5 * c_WallDisplaySize).applyMatrix4(c_DS3ToOpenGLMx4));\r\n        geometry.vertices.push(new THREE.Vector3(this.points.p2.x * 0.5 * c_WallDisplaySize,\r\n            this.points.p2.y * 0.5 * c_WallDisplaySize,\r\n            this.points.p2.z * 0.5 * c_WallDisplaySize).applyMatrix4(c_DS3ToOpenGLMx4));\r\n        geometry.vertices.push(new THREE.Vector3(this.points.p3.x * 0.5 * c_WallDisplaySize,\r\n            this.points.p3.y * 0.5 * c_WallDisplaySize,\r\n            this.points.p3.z * 0.5 * c_WallDisplaySize).applyMatrix4(c_DS3ToOpenGLMx4));\r\n        geometry.vertices.push(new THREE.Vector3(this.points.p4.x * 0.5 * c_WallDisplaySize,\r\n            this.points.p4.y * 0.5 * c_WallDisplaySize,\r\n            this.points.p4.z * 0.5 * c_WallDisplaySize).applyMatrix4(c_DS3ToOpenGLMx4));\r\n\r\n        let face = new THREE.Face3(0, 1, 2);\r\n        let face1 = new THREE.Face3(2, 3, 0);\r\n        geometry.faces.push(face);\r\n        geometry.faces.push(face1);\r\n        geometry.computeFaceNormals();\r\n\r\n        this.wallmesh = new THREE.Mesh(geometry, material);\r\n        this.wallmesh.rotation.y = THREE.Math.degToRad(90);\r\n        this.wallmesh.rotation.z = THREE.Math.degToRad(180);\r\n        this.wallmesh.userData.depthlevel = 2;\r\n        this.wallmesh.name = this.info.facadeID;\r\n        scene.add(this.wallmesh);\r\n\r\n        this.wallMouseEvent();\r\n    }\r\n\r\n    /**墙面面片鼠标事件 */\r\n    wallMouseEvent() {\r\n\r\n        //鼠标进入\r\n        this.wallmesh.mouseOver = (e, obj) => {\r\n\r\n            sw_wallProbeSurface.wallProbeSurfaceVisible(1);\r\n\r\n        }\r\n\r\n        //出去\r\n        this.wallmesh.mouseOut = (e, obj) => {\r\n\r\n            sw_wallProbeSurface.wallProbeSurfaceVisible(0);\r\n\r\n        }\r\n\r\n        //移动\r\n        this.wallmesh.mouseMove = (e, obj) => {\r\n\r\n            sw_wallProbeSurface.wallFaceMove(obj);\r\n\r\n        }\r\n\r\n        //鼠标弹起\r\n        this.wallmesh.mouseUp = (e, obj) => { \r\n\r\n            let event = e || window.event;\r\n\r\n            let v3 = new THREE.Vector2(event.clientX, event.clientY);\r\n\r\n            let boo = v3.equals(this.startPoint);\r\n\r\n            if (boo) {\r\n                //测量状态开启\r\n                if (c_isMeasureStatus) {\r\n                    sw_measure.addPoint(obj, 1);\r\n                    return;\r\n                }\r\n\r\n                if (sw_wallProbeSurface.isWallFaceJumpBoo) {\r\n\r\n                    let realPoint1 = obj.point.clone().applyMatrix4(obj.object.matrix).applyMatrix4(c_OpenGLToDS3Mx4);\r\n\r\n                    let realPoint = new THREE.Vector3(c_StationInfo.nx + realPoint1.x / 10,\r\n                        c_StationInfo.ny + realPoint1.y / 10,\r\n                        c_StationInfo.nz + realPoint1.z / 10);\r\n\r\n                    c_wallClickRotateV3.copy(realPoint);\r\n\r\n                    deleteAll();\r\n\r\n                    sw_getService.getOtherPanoByFacadeID(realPoint.x, realPoint.y, realPoint.z, obj.object.name);\r\n\r\n                } else {\r\n\r\n                    let vp = Vector3ToVP(obj.point.clone());\r\n\r\n                    setCameraAngle(vp.Yaw, vp.Pitch, true);\r\n\r\n                    sw_cameraManage.setWallWheel();\r\n\r\n                }\r\n            }\r\n        };\r\n\r\n        //鼠标按下\r\n        this.wallmesh.mouseDown = (e) => {\r\n\r\n            let event = e || window.event;\r\n\r\n            this.startPoint.x = event.clientX;\r\n\r\n            this.startPoint.y = event.clientY;\r\n\r\n        };        \r\n    }\r\n\r\n    /**清除墙面片 */\r\n    clearWallMesh() {\r\n        disposeNode(this.wallmesh);\r\n    }\r\n\r\n}\r\n\r\nexport default SWWallFaceModule;"]}]}