{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js??ref--5-0!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxModule.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\module\\panoBox\\SWBoxModule.js","mtime":1531703703136},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\.babelrc","mtime":1533282871391},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526631545426},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\eslint-loader\\index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global THREE */\n\nvar _SWConstants = require('../../tool/SWConstants');\n\nvar _SWBoxFaceModule = require('./SWBoxFaceModule');\n\nvar _SWBoxFaceModule2 = _interopRequireDefault(_SWBoxFaceModule);\n\nvar _SWTool = require('../../tool/SWTool');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 全景盒子\r\n */\nvar SWBoxModule = function () {\n        function SWBoxModule(url, textures) {\n                _classCallCheck(this, SWBoxModule);\n\n                this.box = new THREE.Group(); //全景内盒子\n\n                this.faceArr = []; //面集合\n\n                this.url = url; //贴图路径\n\n                this.textures = textures; //缩略贴图对象\n\n                /**鼠标坐标 */\n                this.mouseV2 = new THREE.Vector2();\n\n                /**射线 */\n                this.raycaster = new THREE.Raycaster();\n\n                this.box.rotation.y = THREE.Math.degToRad(90 - _SWConstants.c_StationInfo.yaw); //每个站点都有一个校正值\n\n                _SWConstants.scene.add(this.box);\n\n                this.addFace();\n\n                this.worldFourPoint = [];\n        }\n\n        _createClass(SWBoxModule, [{\n                key: 'addFace',\n                value: function addFace() {\n\n                        for (var i = 0; i < 6; i++) {\n\n                                var canvas = document.createElement(\"canvas\");\n\n                                canvas.width = canvas.height = _SWConstants.c_ThumbnailSize;\n\n                                var context = canvas.getContext(\"2d\");\n\n                                //计算图片位置\n                                var nint = Math.floor(i / 3);\n                                var mint = i % 3;\n\n                                context.drawImage(this.textures.image, mint * _SWConstants.c_ThumbnailSize, nint * _SWConstants.c_ThumbnailSize, _SWConstants.c_ThumbnailSize, _SWConstants.c_ThumbnailSize, 0, 0, _SWConstants.c_ThumbnailSize, _SWConstants.c_ThumbnailSize);\n\n                                var texture1 = new THREE.Texture(canvas);\n\n                                texture1.needsUpdate = true;\n\n                                var face = new _SWBoxFaceModule2.default(i, this.box, texture1, this.url);\n\n                                this.faceArr.push(face);\n                        }\n                }\n\n                /**相机放大的情况下，有变化时调用此方法 */\n\n        }, {\n                key: 'addFaceTiles',\n                value: function addFaceTiles() {\n\n                        this.getWorldFourPoint();\n\n                        var yaw = this.worldFourPoint.sort(function (a, b) {\n                                if (a.Yaw > b.Yaw) {\n                                        return 1;\n                                } else {\n                                        return -1;\n                                }\n                        });\n\n                        var minYaw = yaw[0].Yaw;\n                        var maxYaw = yaw[yaw.length - 1].Yaw;\n\n                        var pitch = this.worldFourPoint.sort(function (a, b) {\n                                if (a.Pitch > b.Pitch) {\n                                        return 1;\n                                } else {\n                                        return -1;\n                                }\n                        });\n\n                        var minPitch = pitch[0].Pitch;\n                        var maxPitch = pitch[pitch.length - 1].Pitch;\n\n                        if (isNaN(minYaw) || isNaN(maxYaw) || isNaN(minPitch) || isNaN(maxPitch)) return; //上保险，计算错误时不影响程序运行\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.createTiles(minYaw, maxYaw, minPitch, maxPitch);\n                        });\n                }\n\n                /**\r\n                 * 获得当前屏幕四个顶点所在世界的坐标\r\n                 */\n\n        }, {\n                key: 'getWorldFourPoint',\n                value: function getWorldFourPoint() {\n\n                        this.worldFourPoint.length = 0;\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(0, 0)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(window.innerWidth, 0)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(0, window.innerHeight)));\n\n                        this.worldFourPoint.push((0, _SWTool.Vector3ToVP)(this.getSceneToWorldRay(window.innerWidth, window.innerWidth)));\n                }\n\n                /**\r\n                 * 鼠标屏幕位置 转换到三维（-1 ~ +1）中的\r\n                 * @param {Number} ex 鼠标/触摸点X坐标\r\n                 * @param {Number} ey 鼠标/触摸点Y坐标\r\n                 */\n\n        }, {\n                key: 'getSceneToWorldRay',\n                value: function getSceneToWorldRay(ex, ey) {\n\n                        this.mouseV2.x = ex / window.innerWidth * 2 - 1;\n\n                        this.mouseV2.y = -(ey / window.innerHeight) * 2 + 1;\n\n                        this.raycaster.setFromCamera(this.mouseV2, _SWConstants.camera);\n\n                        var intersects = this.raycaster.intersectObjects([this.box], true);\n\n                        return intersects[0].point;\n                }\n\n                /**相机缩小的情况下，调用此方法 */\n\n        }, {\n                key: 'clearFaceTiles',\n                value: function clearFaceTiles() {\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.clearTiles(false);\n                        });\n                }\n\n                /**清楚全景盒子所有面片对象 */\n\n        }, {\n                key: 'clearBox',\n                value: function clearBox() {\n\n                        this.faceArr.forEach(function (itme) {\n\n                                itme.clearTiles(true);\n                        });\n\n                        (0, _SWTool.disposeNode)(this.box);\n                }\n        }]);\n\n        return SWBoxModule;\n}();\n\nexports.default = SWBoxModule;",null]}