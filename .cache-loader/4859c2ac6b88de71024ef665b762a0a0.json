{"remainingRequest":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js?cacheDirectory=true!D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\tool\\SWInitializeInstance.js","dependencies":[{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\app\\src\\tool\\SWInitializeInstance.js","mtime":1545623001120},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540192322431},{"path":"D:\\02数文\\WebProject\\NodeAllProject\\FourPano\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.LoadPreviewImage = LoadPreviewImage;\nexports.storeDispatch = storeDispatch;\nexports.deleteAll = deleteAll;\nexports.deleteMarker = deleteMarker;\nexports.deleteMeasuring = deleteMeasuring;\nexports.AddOldArrow = AddOldArrow;\nexports.AddNewArrow = AddNewArrow;\nexports.jumpSite = jumpSite;\nexports.AddMarkerMesh = AddMarkerMesh;\nexports.AddSmallVideo = AddSmallVideo;\nexports.InitialOrientation = InitialOrientation;\nexports.rotateByWallClick = rotateByWallClick;\nexports.JumpLookMarker = JumpLookMarker;\nexports.ShakeAmbient = ShakeAmbient;\nexports.VRShow = VRShow;\nexports.VRHide = VRHide;\nexports.gyroStatus = gyroStatus;\n\nvar _SWConstants = require('./SWConstants');\n\nvar constants = _interopRequireWildcard(_SWConstants);\n\nvar _SWTool = require('./SWTool');\n\nvar _SWMarkerArrowModule = require('../module/marker/SWMarkerArrowModule');\n\nvar _SWMarkerArrowModule2 = _interopRequireDefault(_SWMarkerArrowModule);\n\nvar _SWMarkerSingleModule = require('../module/marker/SWMarkerSingleModule');\n\nvar _SWMarkerSingleModule2 = _interopRequireDefault(_SWMarkerSingleModule);\n\nvar _SWMarkerMoreModule = require('../module/marker/SWMarkerMoreModule');\n\nvar _SWMarkerMoreModule2 = _interopRequireDefault(_SWMarkerMoreModule);\n\nvar _SWMarkerVideoModule = require('../module/marker/SWMarkerVideoModule');\n\nvar _SWMarkerVideoModule2 = _interopRequireDefault(_SWMarkerVideoModule);\n\nvar _SWSiteLocationMoudle = require('../module/marker/SWSiteLocationMoudle');\n\nvar _SWSiteLocationMoudle2 = _interopRequireDefault(_SWSiteLocationMoudle);\n\nvar _store = require('../../views/redux/store/store');\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _action = require('../../views/redux/action');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar swExternalConst = require('./SWExternalConst');\nvar external = require('../tool/SWExternalConst.js');\n\nvar TWEEN = require('@tweenjs/tween.js');\n\n/**加载完成之后调用 */\nfunction LoadPreviewImage() {\n\n    storeDispatch();\n\n    AddMarkerMesh();\n\n    for (var i = 0; i < external.server_json.data.AngleLimit.length; i++) {\n        var item = external.server_json.data.AngleLimit[i];\n        if (item.panoid == constants.c_StationInfo.panoID) {\n            constants.c_maxPitch = item.UpperAngle;\n            constants.c_minPitch = item.LowerAngle;\n            break;\n        } else {\n            constants.c_maxPitch = 89;\n            constants.c_minPitch = -89;\n        }\n    }\n\n    var waitTime = setTimeout(function () {\n\n        if (constants.c_treeShapeJumpPano) {\n            //目录树点击之后朝向 优先级最高\n\n            constants.c_treeShapeJumpPano = false;\n\n            var arr = constants.c_treeShapeJumpPanoStr.split(\"#\");\n\n            (0, _SWTool.setCameraAngle)(parseFloat(arr[0]), parseFloat(arr[1]), true);\n        } else {\n\n            if (constants.c_isWallClickRotateBoo) {\n                //墙面跳转朝向 优先级最低\n\n                constants.c_isWallClickRotateBoo = false;\n\n                rotateByWallClick();\n            }\n\n            InitialOrientation(); //初始朝向 优先级中等\n\n            //嵌入视频朝向 优先级最高\n            AddSmallVideo();\n\n            //跳转之后，第一眼要加载\n            constants.sw_skyBox.panoBox.addFaceTiles();\n        }\n\n        clearTimeout(waitTime);\n\n        constants.c_isPreviewImageLoadEnd = false;\n    }, 500);\n}\n\n/**加载完之后，界面有些需要更新 */\nfunction storeDispatch() {\n    var store = (0, _store2.default)();\n\n    if (constants.c_StationInfo) {\n\n        var mapmarker = constants.c_panoIDTable.getValue(constants.c_StationInfo.panoID);\n        var floorsMapData = null;\n        var imgurl = \"\";\n        var floorsMapArr = constants.c_FloorsMapTable.getValues();\n        for (var i = 0; i < floorsMapArr.length; i++) {\n            var obj = floorsMapArr[i];\n            if (mapmarker.rasterMapID == obj.floorID) {\n                floorsMapData = obj;\n                imgurl = constants.sw_getService.resourcesUrl + '/' + obj.rasterMapPath;\n                break;\n            }\n        }\n\n        //站点跳转之后需要更新一下小地图\n        store.dispatch((0, _action.show_PanoMap_fun)({\n            pID: constants.c_StationInfo.panoID,\n            imgUrl: imgurl,\n            floorsMapData: floorsMapData\n        }));\n\n        store.dispatch((0, _action.pano_prompt_fun)({\n            panoNames: mapmarker.markerContent\n        }));\n    }\n\n    if (constants.c_thumbnailsShow) {\n        constants.c_thumbnailsShow = false;\n        //数据来之后可以弹出展厅列表\n        store.dispatch((0, _action.show_Thumbnails_fun)(true));\n    }\n\n    if (constants.c_initUIData) {\n        constants.c_initUIData = false;\n        store.dispatch((0, _action.show_Introduction_fun)({\n            imgurl: external.server_json.data.resourcePath + external.server_json.data.Introduction.imgUrl,\n            title: external.server_json.data.Introduction.title,\n            content: external.server_json.data.Introduction.content\n        }));\n\n        store.dispatch((0, _action.background_music_fun)({\n            audioUrl: external.server_json.data.resourcePath + external.server_json.data.bgMusic\n        }));\n    }\n}\n\n/**跳转时需要清除所有的东西 */\nfunction deleteAll() {\n\n    deleteMarker();\n\n    //清除箭头\n    constants.c_arrowArr.forEach(function (item) {\n\n        if (item) item.clearArrow();\n    });\n    constants.c_arrowArr.length = 0;\n\n    constants.c_arrowCurentArr.length = 0;\n\n    //清除墙面片\n    constants.sw_wallMesh.clear();\n\n    //隐藏探面\n    constants.sw_wallProbeSurface.wallProbeSurfaceVisible(0, 0);\n\n    constants.c_smallVideoArr.forEach(function (item) {\n\n        if (item) item.clearSmallVideo();\n    });\n\n    constants.c_smallVideoArr.length = 0;\n\n    deleteMeasuring();\n}\n\nfunction deleteMarker() {\n    //清理标注\n    constants.c_markerMeshArr.forEach(function (item) {\n\n        item.clear();\n    });\n    constants.c_markerMeshArr.length = 0;\n}\n\n/**清除测量 */\nfunction deleteMeasuring() {\n\n    constants.c_isMeasureStatus = false;\n\n    constants.sw_measure.clear();\n}\n\n/**\r\n * 添加老箭头数据\r\n * */\nfunction AddOldArrow() {\n\n    if (constants.c_siteRepresentation) {\n\n        constants.c_AdjacentPanoInfoArr.forEach(function (obj) {\n\n            constants.c_arrowArr.push(new _SWMarkerArrowModule2.default(obj));\n        });\n\n        constants.sw_getService.getNewArrow();\n    } else {\n\n        constants.c_AdjacentPanoInfoArr.forEach(function (obj) {\n\n            constants.c_arrowArr.push(new _SWSiteLocationMoudle2.default(obj));\n        });\n    }\n\n    //偷偷加载思路是对的，还未想清楚怎么优先加载本站全景图\n    //constants.sw_skyBox.AccordingArrowLoadPano();\n}\n\n/**\r\n * 添加新箭头数据\r\n * */\nfunction AddNewArrow() {\n\n    var boo = true;\n\n    if (constants.c_arrowArr.length == 0) {\n\n        boo = false;\n    }\n\n    constants.c_ArrowPanoInfoArr.forEach(function (obj) {\n\n        if (boo) {\n\n            constants.c_arrowArr.forEach(function (item) {\n\n                if (item.arrowData.srcPanoID === obj.srcPanoID && item.arrowData.dstPanoID === obj.dstPanoID) {\n\n                    item.updateLocation(obj);\n                }\n            });\n        } else {\n\n            constants.c_arrowArr.push(new _SWMarkerArrowModule2.default(obj));\n        }\n    });\n}\n\n/**\r\n * 跳站点\r\n * @param {String} panoID 站点ID\r\n */\nfunction jumpSite(panoID) {\n\n    if (!constants.c_isPreviewImageLoadEnd) {\n\n        deleteAll();\n\n        constants.sw_getService.getPanoByID(panoID);\n    }\n}\n\n/**\r\n * 添加标注\r\n * */\nfunction AddMarkerMesh() {\n\n    constants.c_markerInfoArr.forEach(function (obj) {\n\n        if (obj.centerX != 0 && obj.centerY != 0) {\n\n            constants.c_markerMeshArr.push(new _SWMarkerSingleModule2.default(obj));\n        } else {\n\n            constants.c_markerMeshArr.push(new _SWMarkerMoreModule2.default(obj));\n        }\n\n        if (constants.c_JumpMarkerID != \"\" && constants.c_JumpMarkerID == obj.markerID) {\n\n            constants.c_JumpMarkerID = \"\";\n\n            JumpLookMarker(obj);\n        }\n    });\n}\n\n/**\r\n * 添加视频\r\n * */\nfunction AddSmallVideo() {\n\n    constants.c_isDisplayFace = true;\n\n    var vboo = false;\n\n    if (constants.c_allVideoTable.containsKey(constants.c_StationInfo.panoID)) {\n\n        var tableValue = constants.c_allVideoTable.getValue(constants.c_StationInfo.panoID);\n\n        tableValue.forEach(function (obj) {\n\n            var details = JSON.parse(obj.details);\n\n            if (constants.c_currentState != constants.c_currentStateEnum.phoneStatus) {\n\n                vboo = true;\n\n                constants.c_smallVideoArr.push(new _SWMarkerVideoModule2.default(details, obj.panoID));\n\n                var yp = (0, _SWTool.Vector3ToVP)(new THREE.Vector3(details.posX, details.posY, details.posZ));\n\n                (0, _SWTool.setCameraAngle)(yp.Yaw, yp.Pitch, true);\n\n                constants.c_isDisplayFace = details.openBox || false;\n            } else if (details.openBox) {\n                //可彈出視頻才會形成标注\n\n                var videoObj = {\n                    centerX: parseFloat(details.posX),\n                    centerY: parseFloat(details.posY),\n                    centerZ: parseFloat(details.posZ),\n                    markerID: \"sp\",\n                    name: details.url,\n                    panoID: constants.c_StationInfo.panoID,\n                    points: \"\",\n                    type: 44\n                };\n\n                constants.c_markerMeshArr.push(new _SWMarkerSingleModule2.default(videoObj));\n            }\n        });\n    }\n\n    if (vboo) {\n\n        var store = (0, _store2.default)();\n\n        store.dispatch((0, _action.background_music_fun)({\n            bgMusicOff: false\n        }));\n    }\n};\n\n/**初始朝向 */\nfunction InitialOrientation() {\n\n    //如果传入站点和配置点冲突了，以传入站点为主\n    if (swExternalConst.server_json.firstAnimation && swExternalConst.server_json.firstPanoID == constants.c_StationInfo.panoID) {\n\n        swExternalConst.server_json.firstAnimation = false;\n\n        (0, _SWTool.setCameraAngle)(swExternalConst.server_json.firstYaw, swExternalConst.server_json.firstPitch, true);\n    } else {\n\n        swExternalConst.server_json.data.InitialOrientation.forEach(function (obj, idx) {\n\n            if (obj.panoid == constants.c_StationInfo.panoID) {\n\n                (0, _SWTool.setCameraAngle)(obj.yaw, obj.pitch, true);\n            }\n        });\n    }\n}\n\n/**\r\n * 跳转之后看向某一个点\r\n * */\nfunction rotateByWallClick() {\n\n    var aa = constants.c_wallClickRotateV3.clone().sub(constants.c_StationInfo.point.clone());\n\n    var bb = aa.clone().applyMatrix4(constants.c_DS3ToOpenGLMx4);\n\n    var swvg = (0, _SWTool.Vector3ToVP)(new THREE.Vector3(bb.z, -bb.y, bb.x));\n\n    (0, _SWTool.setCameraAngle)(swvg.Yaw, swvg.Pitch, true);\n};\n\n/**\r\n * 跳转之后看向标注的中心点\r\n * @param {SWMarkerInfo} obj 标注点对象\r\n */\nfunction JumpLookMarker(obj) {\n\n    if (obj.centerX != 0 && obj.centerY != 0 && obj.centerZ != 0) {\n\n        (0, _SWTool.setCameraAngle)(obj.centerX, obj.centerY, true);\n    } else {\n\n        var yaw = [],\n            pitch = [];\n\n        obj.points.forEach(function (objs) {\n\n            yaw.push(parseFloat(objs.yaw));\n\n            pitch.push(parseFloat(objs.pitch));\n        });\n\n        var yawArr = yaw.sort(function (a, b) {\n            if (a > b) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n\n        var pitchArr = pitch.sort(function (a, b) {\n            if (a > b) {\n                return 1;\n            } else {\n                return -1;\n            }\n        });\n\n        var num = yawArr[yawArr.length - 1];\n\n        if (yawArr[0] < 100 && yawArr[yawArr.length - 1] > 300) {\n\n            num = 360 - yawArr[yawArr.length - 1];\n        }\n\n        var yy = yawArr[0] + (num - yawArr[0]) * 0.5;\n\n        var pp = pitchArr[0] + (pitchArr[pitchArr.length - 1] - pitchArr[0]) * 0.5;\n\n        (0, _SWTool.setCameraAngle)(yy, pp, true);\n    }\n}\n\n/**摇一摇\r\n * 判定规则：1.当前站点是否有热点存在\r\n * 2.箭头能跳转到的点是否有热点存在\r\n * 3.以上两种都没有则在热点墙上随机挑选\r\n * 4.以上三种都没有则没有此功能\r\n */\nfunction ShakeAmbient() {\n\n    if (constants.c_markerInfoArr.length > 0) {\n        //判定当前站点是否有热点\n        //在当前站点的文物随机看向一个\n        var objs = constants.c_markerInfoArr[Math.floor(Math.random() * 10 * constants.c_markerInfoArr.length / 10)];\n        JumpLookMarker(objs);\n        return true;\n    } else {\n        var nowArrow = void 0;\n        if (swExternalConst.server_json.features.arrowType) {\n            //不同的箭头类型，数据表不一样\n            nowArrow = constants.sw_GetSQLData.GetAdjacentPanoFun(constants.c_StationInfo.panoID);\n        } else {\n            nowArrow = constants.sw_GetSQLData.GetStreetViewLinkFun(constants.c_StationInfo.panoID);\n        }\n\n        var nowArrowMarkerArr = [];\n        for (var i = 0; i < nowArrow.length; i++) {\n            //查找所有箭头站点是否有热点\n            var arrowObj = nowArrow[i];\n            var nowMarkerArr = constants.sw_GetSQLData.getMarkByPanoIDFun(swExternalConst.server_json.features.arrowType ? arrowObj.DstImageID : arrowObj.DstImageName);\n            if (nowMarkerArr && nowMarkerArr.length > 0) {\n                nowArrowMarkerArr.push(nowMarkerArr);\n            }\n        }\n\n        if (nowArrowMarkerArr.length > 0) {\n            //有\n            var nowAMArr = nowArrowMarkerArr[0];\n            var nowMarker = nowAMArr[Math.floor(Math.random() * 10 * nowAMArr.length / 10)];\n            jumpSite(nowMarker.PanoID);\n            constants.c_JumpMarkerID = nowMarker.MarkerID;\n            return true;\n        } else {\n            //没有\n            var buildingArr = constants.c_allExhibitsForBuildingTable.getValues();\n            if (buildingArr.length > 0) {\n                var aefb = buildingArr[Math.floor(Math.random() * 10 * buildingArr.length / 10)];\n                jumpSite(aefb.panoID);\n                constants.c_JumpMarkerID = aefb.markerID[0];\n                return true;\n            }\n            return false;\n        }\n    }\n}\n\n/**开启VR */\nfunction VRShow() {\n    constants.c_mode = constants.c_modes.STEREO;\n    constants.sw_SWReticle.show();\n    gyroStatus(true);\n    var fov = constants.camera.fov;\n    // 强制效果立体相机通过刷新fov更新\n    constants.camera.fov = fov + 10e-3;\n    constants.c_effect.setSize(window.innerWidth, window.innerHeight);\n    constants.c_effect.render(constants.scene, constants.camera);\n    constants.camera.fov = fov;\n}\n\n/**关闭VR */\nfunction VRHide() {\n    constants.c_mode = constants.c_modes.NORMAL;\n    constants.sw_SWReticle.hide();\n    gyroStatus(false);\n}\n\n/**陀螺仪状态 */\nfunction gyroStatus(boo) {\n    constants.c_control.enabled = boo;\n    // if (!boo) {\n    //     let euler = new THREE.Euler().setFromQuaternion(constants.camera.quaternion);\n    //     // euler.set(THREE.Math.degToRad(constants.sw_cameraManage.yaw_Camera), 0, -0, 'YXZ'); //欧拉角是绕坐标轴旋转的角度和顺序,按照heading , pitch , roll 的顺序，应该是 YXZ\n    //     // constants.camera.quaternion.setFromEuler(euler); // 从欧拉角设置四元数\n    //     setCameraAngle(THREE.Math.radToDeg(euler.x + Math.PI), THREE.Math.radToDeg(euler.y), true);\n    // }\n}",null]}